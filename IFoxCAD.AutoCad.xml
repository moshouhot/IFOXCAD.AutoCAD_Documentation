<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IFoxCAD.AutoCad</name>
    </assembly>
    <members>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            指示参数将为另一个参数传递的表达式捕获为字符串。
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            初始化 CallerArgumentExpressionAttribute 类的新实例。
            </summary>
            <param name="parameterName">参数名</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            获取其表达式应捕获为字符串的参数的名称。
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.QuadEntity">
            <summary>
            四叉树图元
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.QuadEntity.#ctor(IFoxCAD.Cad.Rect)">
            <summary>
            四叉树图元
            </summary>
            <param name="box">包围盒</param>
        </member>
        <member name="T:IFoxCAD.Cad.QuadTree`1">
            <summary>
            根节点控制器
            </summary>
            <typeparam name="TEntity">类型接口约束必须有正交矩形</typeparam>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTree`1._rootNode">
            <summary>
            根节点
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.QuadTree`1.Count">
            <summary>
            四叉树节点的数目
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTree`1._points">
            <summary>
            点容器(红黑树)
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTree`1.#ctor(IFoxCAD.Cad.Rect)">
            <summary>
            四叉树根节点控制器
            </summary>
            <param name="rect">四叉树矩形范围</param>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTree`1.Insert(`0)">
            <summary>
            通过根节点插入数据项
            </summary>
            <param name="ent"></param>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTree`1.Query(IFoxCAD.Cad.Rect,IFoxCAD.Cad.QuadTreeSelectMode)">
            <summary>
            查询四叉树,返回给定区域的数据项
            </summary>
            <param name="rect">矩形选区查询</param>
            <param name="selectMode">查询模式</param>
            <returns>查询结果列表</returns>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTree`1.Remove(IFoxCAD.Cad.Rect)">
            <summary>
            删除子节点
            </summary>
            <param name="rect">根据范围删除</param>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTree`1.Remove(`0)">
            <summary>
            删除子节点
            </summary>
            <param name="ent">根据图元删除</param>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTree`1.FindNeibor(IFoxCAD.Cad.Rect,IFoxCAD.Cad.QuadTreeFindMode)">
            <summary>
            找到附近节点图元
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTree`1.FindNearEntity(IFoxCAD.Cad.Rect)">
            <summary>
            找到附近图元
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTree`1.ForEach(IFoxCAD.Cad.QuadTree{`0}.QTAction)">
            <summary>
            执行四叉树中特定的行为
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:IFoxCAD.Cad.QuadTree`1.QTAction">
            <summary>
            委托:四叉树节点上执行一个操作
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:IFoxCAD.Cad.QuadTreeEvn">
            <summary>
            四叉树环境变量
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeEvn.MinArea">
            <summary>
            最小的节点有一个面积(一定要大于0)
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeEvn.SelectMode">
            <summary>
            选择模式
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeEvn.QuadTreeMaximumDepth">
            <summary>
            最大深度
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeEvn.QuadTreeContentsCountSplit">
            <summary>
            节点内容超过就分裂
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.QuadTreeNode`1">
            <summary>
            子节点
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeNode`1.RightTopTree">
            <summary>
            子节点:第一象限:右上↗
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeNode`1.LeftTopTree">
            <summary>
            子节点:第二象限:左上↖
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeNode`1.LeftBottomTree">
            <summary>
            子节点:第三象限:左下↙
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeNode`1.RightBottomTree">
            <summary>
            子节点:第四象限:右下↘
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.QuadTreeNode`1.Nodes">
            <summary>
            所有子节点
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.QuadTreeNode`1.NodesIsEmpty">
            <summary>
            所有子节点是空的
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeNode`1.Parent">
            <summary>
            父节点
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeNode`1.Depth">
            <summary>
            节点的在四叉树的深度
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeNode`1.Contents">
            (节点图元是交叉线压着的,并不是矩形范围内全部,因为这是四叉树的特性决定)
            <summary>
            本节点:内容
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.ContentsSubTree(System.Collections.Generic.List{`0})">
            <summary>
            本节点和旗下所有子节点:内容群
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.QuadTreeNode`1.CountSubTree">
            <summary>
            本节点和旗下所有子节点:内容群数量
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.#ctor(IFoxCAD.Cad.Rect,IFoxCAD.Cad.QuadTreeNode{`0},System.Int32)">
            <summary>
            四叉树节点
            </summary>
            <param name="box">当前节点边界</param>
            <param name="parent">父节点</param>
            <param name="depth">节点深度</param>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.Insert(IFoxCAD.Cad.Rect)">
            <summary>
            将原有节点插入用
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.Insert(`0)">
            <summary>
            将数据项递归插入四叉树
            </summary>
            <param name="ent"></param>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.CreateChildren">
            <summary>
            创建子节点
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.RectSplit(IFoxCAD.Cad.Rect)">
            <summary>
            矩形分裂为四个
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.Remove(`0)">
            <summary>
            删除图元
            </summary>
            <param name="easeEnt">根据图元删除</param>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.Clear(IFoxCAD.Cad.QuadTreeNode{`0})">
            <summary>
            递归进入最下层节点,然后开始清理
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.Remove(IFoxCAD.Cad.Rect)">
            <summary>
            删除子节点内容
            </summary>
            <param name="queryArea">根据范围删除</param>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.Query(IFoxCAD.Cad.Rect,System.Collections.Generic.List{`0})">
            <summary>
            查询范围内的实体
            </summary>
            <param name="queryArea">查询矩形</param>
            <param name="results">查询结果</param>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.GetCurrentContents(IFoxCAD.Cad.Rect,System.Collections.Generic.List{`0})">
            <summary>
            获取本节点内容
            </summary>
            <param name="queryArea"></param>
            <param name="results"></param>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.FindNearEntity(IFoxCAD.Cad.Rect)">
            <summary>
            找临近图元
            </summary>
            <param name="queryArea">查找矩形</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.FindNeibor(IFoxCAD.Cad.Rect,IFoxCAD.Cad.QuadTreeFindMode)">
            <summary>
            找临近节点的图元
            </summary>
            <param name="queryArea">查找矩形</param>
            <param name="findMode">查找什么方向</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.GetNearestNeighbor(IFoxCAD.Cad.QuadTreeNode{`0},IFoxCAD.Cad.QuadTreeFindMode,IFoxCAD.Cad.Rect)">
            <summary>
            查找节点的(本内容和子内容)与(查找面积)矩形中点对比,找到最近一个内容
            </summary>
            <param name="queryArea">查找面积</param>
            <param name="findMode">查找方向</param>
            <param name="queryNode">查找节点</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.GetMinNode(IFoxCAD.Cad.Rect)">
            <summary>
            找包含它的最小分支
            </summary>
            <param name="queryArea">查询的矩形</param>
            <returns>节点</returns>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.FindNeiborNode(IFoxCAD.Cad.QuadTreeNode{`0},IFoxCAD.Cad.QuadTreeFindMode)">
            <summary>
            四叉树找邻居节点(相同或更大)
            </summary>
            <param name="tar">源节点</param>
            <param name="findMode">方向</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.ForEach(IFoxCAD.Cad.QuadTree{`0}.QTAction)">
            <summary>
            递归全部节点(提供给根用的,所以是全部)
            </summary>
            <param name="action"></param>QTAction
        </member>
        <member name="T:IFoxCAD.Cad.QuadTreeSelectMode">
            <summary>
            四叉树选择模式
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeSelectMode.IntersectsWith">
            <summary>
            碰撞到就选中
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeSelectMode.Contains">
            <summary>
            全包含才选中
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.QuadTreeFindMode">
            <summary>
            四叉树查找方向
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeFindMode.Top">
            <summary>
            上
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeFindMode.Bottom">
            <summary>
            下
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeFindMode.Left">
            <summary>
            左
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeFindMode.Right">
            <summary>
            右
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.TolerancePoint2d">
            <summary>
            Linq Distinct 消重比较两点在容差范围内就去除
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.TolerancePoint2d.#ctor(System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="tolerance">容差</param>
        </member>
        <member name="M:IFoxCAD.Cad.TolerancePoint2d.Equals(Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d)">
            <summary>
            比较
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.TolerancePoint2d.GetHashCode(Autodesk.AutoCAD.Geometry.Point2d)">
            <summary>
            哈希
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:IFoxCAD.Cad.Rect">
            <summary>
            矩形范围类
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Rect.RectTolerance">
            <summary>
            矩形容差
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Rect.CadTolerance">
            <summary>
            cad容差
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.X">
            <summary>
            X
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.Y">
            <summary>
            Y
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.Left">
            <summary>
            左
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.Bottom">
            <summary>
            下
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.Right">
            <summary>
            右
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.Top">
            <summary>
            上
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.Width">
            <summary>
            宽
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.Height">
            <summary>
            高
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.Area">
            <summary>
            面积
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.MinPoint">
            <summary>
            左下Min
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.MaxPoint">
            <summary>
            右上Max
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.CenterPoint">
            <summary>
            中间
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.LeftLower">
            <summary>
            左下Min
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.LeftMidst">
            <summary>
            左中
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.LeftUpper">
            <summary>
            左上
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.RightUpper">
            <summary>
            右上Max
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.RightMidst">
            <summary>
            右中
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.RightBottom">
            <summary>
            右下
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.Midst">
            <summary>
            中间
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.MidstUpper">
            <summary>
            中上
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.MidstBottom">
            <summary>
            中下
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.IsPoint">
            <summary>
            是一个点
            水平或垂直直线包围盒是面积是0,所以面积是0不一定是点
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            矩形类
            </summary>
            <param name="left">左</param>
            <param name="bottom">下</param>
            <param name="right">右</param>
            <param name="top">上</param>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.#ctor(Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,System.Boolean)">
            <summary>
            构造矩形类
            </summary>
            <param name="p1"></param>
            <param name="p3"></param>
            <param name="check">是否检查大小</param>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.Equals(IFoxCAD.Cad.Rect)">
            <summary>
            
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.op_Inequality(IFoxCAD.Cad.Rect,IFoxCAD.Cad.Rect)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.op_Equality(IFoxCAD.Cad.Rect,IFoxCAD.Cad.Rect)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.Equals(IFoxCAD.Cad.Rect,System.Double)">
            <summary>
            比较核心
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.Contains(Autodesk.AutoCAD.Geometry.Point2d)">
            <summary>
            
            </summary>
            <param name="Point2d"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.Contains(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.Contains(IFoxCAD.Cad.Rect)">
            <summary>
            四个点都在内部就是包含
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.IntersectsWith(IFoxCAD.Cad.Rect)">
            <summary>
            一个点在内部就是碰撞
            </summary>
            <param name="rect"></param>
            <returns>true内部</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.GetCommonPoint(IFoxCAD.Cad.Rect)">
            <summary>
            获取共点
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.ToPoints">
            <summary>
            转换为point2d数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.ToPoints4">
            <summary>
            转换为point2d元组
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.Expand(System.Double)">
            <summary>
            四周膨胀
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.IsRectAngle(System.Collections.Generic.List{Autodesk.AutoCAD.Geometry.Point2d},System.Double)">
            <summary>
            是否矩形(带角度)
            </summary>
            <param name="ptList"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.DotProductValue(Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d)">
            <summary>
            点积,求值
            <a href="https://zhuanlan.zhihu.com/p/359975221"> 1.是两个向量的长度与它们夹角余弦的积 </a>
            <a href="https://www.cnblogs.com/JJBox/p/14062009.html#_label1"> 2.求四个点是否矩形使用 </a>
            </summary>
            <param name="o">原点</param>
            <param name="a">点</param>
            <param name="b">点</param>
            <returns><![CDATA[>0方向相同,夹角0~90度;=0相互垂直;<0方向相反,夹角90~180度]]></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.IsRect(System.Collections.Generic.List{Autodesk.AutoCAD.Geometry.Point2d},System.Double)">
            <summary>
            是否轴向矩形(无角度)
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.GetMinMax(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point2d})">
            <summary>
            获取点集的包围盒的最小点和最大点(无角度)
            </summary>
            <param name="pts"></param>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.RectAnglePointOrder(System.Collections.Generic.List{Autodesk.AutoCAD.Geometry.Point2d})">
            <summary>
            矩形点序逆时针排列,将min点[0],max点是[3](带角度)
            </summary>
            <param name="pts"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.Cross(Autodesk.AutoCAD.Geometry.Vector2d,Autodesk.AutoCAD.Geometry.Vector2d)">
            <summary>
            叉积,二维叉乘计算
            </summary>
            <param name="a">传参是向量,表示原点是0,0</param>
            <param name="b">传参是向量,表示原点是0,0</param>
            <returns>其模为a与b构成的平行四边形面积</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.Cross(Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d)">
            <summary>
            叉积,二维叉乘计算
            </summary>
            <param name="o">原点</param>
            <param name="a">oa向量</param>
            <param name="b">ob向量,此为判断点</param>
            <returns>返回值有正负,表示绕原点四象限的位置变换,也就是有向面积</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.CrossAclockwise(Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d)">
            <summary>
            叉积,逆时针方向为真
            </summary>
            <param name="o">直线点1</param>
            <param name="a">直线点2</param>
            <param name="b">判断点</param>
            <returns>b点在oa的逆时针时为 <see langword="true"/></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.ToPolyLine">
            <summary>
            创建矩形范围多段线
            </summary>
            <returns>多段线对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.XCollision``1(System.Collections.Generic.List{``0},System.Func{``0,System.Boolean},System.Func{``0,``0,System.Boolean},System.Action{``0})">
            <summary>
            列扫碰撞检测(碰撞算法)
            比四叉树还快哦~
            </summary>
            <typeparam name="T"></typeparam>
            <param name="box">继承Rect的集合</param>
            <param name="firstProcessing">先处理集合每一个成员;返回true就跳过后续委托</param>
            <param name="collisionProcessing">碰撞,返回两个碰撞的成员;返回true就跳过后续委托</param>
            <param name="lastProcessing">后处理集合每一个成员</param>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.op_Implicit(System.Drawing.RectangleF)~IFoxCAD.Cad.Rect">
            <summary>
            
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.op_Implicit(System.Drawing.Rectangle)~IFoxCAD.Cad.Rect">
            <summary>
            
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.ToString(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.ToString(System.String,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.CompareTo(IFoxCAD.Cad.Rect)">
            <summary>
            
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="T:IFoxCAD.Cad.Assoc.AssocPersSubentityIdPEEx">
            <summary>
            子对象关系Id扩展
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.Assoc.AssocPersSubentityIdPEEx.GetPersSubentityIdPE(Autodesk.AutoCAD.DatabaseServices.Entity)">
            <summary>
            获取实体的个性化子对象关系Id
            </summary>
            <param name="entity">要查询的实体</param>
            <returns>返回个性化子对象关系Id实例，如果不存在则返回null</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Assoc.AssocPersSubentityIdPEEx.GetAllSubentityIds(Autodesk.AutoCAD.DatabaseServices.Entity,Autodesk.AutoCAD.DatabaseServices.SubentityType)">
            <summary>
            获取实体中所有指定类型的子对象Id
            </summary>
            <param name="entity">要查询的实体</param>
            <param name="subentityType">子对象的类型</param>
            <returns>返回所有子对象Id的数组</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Assoc.AssocPersSubentityIdPEEx.GetAllSubentities(Autodesk.AutoCAD.DatabaseServices.Entity,Autodesk.AutoCAD.DatabaseServices.SubentityType)">
            <summary>
            获取实体中所有指定类型的子对象
            </summary>
            <param name="entity">要查询的实体</param>
            <param name="subentityType">子对象的类型</param>
            <returns>返回所有子对象的列表</returns>
        </member>
        <member name="T:IFoxCAD.Cad.Assoc.AssocUtils">
            <summary>
            关联动作辅助类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.Assoc.AssocUtils.CreateActionAndActionBodyAndPostToDatabase(Autodesk.AutoCAD.Runtime.RXClass,Autodesk.AutoCAD.DatabaseServices.ObjectId,Autodesk.AutoCAD.DatabaseServices.ObjectId@,Autodesk.AutoCAD.DatabaseServices.ObjectId@)">
            <summary>
            创建关系动作并提交到数据库<br/>
            替代AssocActionBody.CreateActionAndActionBodyAndPostToDatabase();函数
            </summary>
            <param name="actionBodyClass">actionBody的RXClass</param>
            <param name="ownerId">拥有者Id</param>
            <param name="actionId">动作id</param>
            <param name="actionBodyId">动作bodyId</param>
            <returns>错误信息</returns>
        </member>
        <member name="T:IFoxCAD.Cad.BaseEx">
            <summary>
            基础扩展
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.BaseEx.IsLegalLayerName(System.String)">
            <summary>
            判断图层名是否合法
            </summary>
            <param name="layerName">图层名</param>
            <returns>是则返回<c>true</c></returns>
        </member>
        <member name="T:IFoxCAD.Cad.BulgeVertexWidth">
            <summary>
            多段线的顶点,凸度,头宽,尾宽
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BulgeVertexWidth.X">
            <summary>
            顶点X
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BulgeVertexWidth.Y">
            <summary>
            顶点Y
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BulgeVertexWidth.Bulge">
            <summary>
            凸度
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BulgeVertexWidth.StartWidth">
            <summary>
            头宽
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BulgeVertexWidth.EndWidth">
            <summary>
            尾宽
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.BulgeVertexWidth.Vertex">
            <summary>
            顶点
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.BulgeVertexWidth.#ctor">
            <summary>
            默认构造
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.BulgeVertexWidth.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            多段线的顶点,凸度,头宽,尾宽
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.BulgeVertexWidth.#ctor(Autodesk.AutoCAD.Geometry.Point2d,System.Double,System.Double,System.Double)">
            <summary>
            多段线的顶点,凸度,头宽,尾宽
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.BulgeVertexWidth.#ctor(Autodesk.AutoCAD.DatabaseServices.BulgeVertex)">
            <summary>
            多段线的顶点,凸度,头宽,尾宽
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.BulgeVertexWidth.#ctor(Autodesk.AutoCAD.DatabaseServices.Polyline,System.Int32)">
            <summary>
            多段线的顶点,凸度,头宽,尾宽
            </summary>
            <param name="pl">多段线</param>
            <param name="index">子段编号</param>
        </member>
        <member name="M:IFoxCAD.Cad.BulgeVertexWidth.ToBulgeVertex">
            <summary>
            转换为 BulgeVertex
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFoxCAD.Cad.CollectionEx">
            <summary>
            集合扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.CollectionEx.ToCollection(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.ObjectId})">
            <summary>
            对象id迭代器转换为集合
            </summary>
            <param name="ids">对象id的迭代器</param>
            <returns>对象id集合,记得释放</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CollectionEx.ToCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            实体迭代器转换为集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="objs">实体对象的迭代器</param>
            <returns>实体集合,记得释放</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CollectionEx.ToCollection(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            double 数值迭代器转换为 double 数值集合
            </summary>
            <param name="doubles">double 数值迭代器</param>
            <returns>数值集合,它没有Dispose</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CollectionEx.ToCollection(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            double 数值迭代器转换为 double 数值集合
            </summary>
            <param name="ints">double 数值迭代器</param>
            <returns>数值集合,它没有Dispose</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CollectionEx.ToCollection(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point2d})">
            <summary>
            二维点迭代器转换为二维点集合
            </summary>
            <param name="pts">二维点迭代器</param>
            <returns>二维点集合,!acad记得释放</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CollectionEx.ToCollection(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point3d})">
            <summary>
            三维点迭代器转换为三维点集合
            </summary>
            <param name="pts">三维点迭代器</param>
            <returns>三维点集合,记得释放</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CollectionEx.ToList(Autodesk.AutoCAD.DatabaseServices.ObjectIdCollection)">
            <summary>
            对象id集合转换为对象id列表
            </summary>
            <param name="ids">对象id集合</param>
            <returns>对象id列表</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CollectionEx.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            遍历集合,执行委托
            </summary>
            <typeparam name="T">集合值的类型</typeparam>
            <param name="source">集合</param>
            <param name="action">委托</param>
        </member>
        <member name="M:IFoxCAD.Cad.CollectionEx.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32,``0})">
            <summary>
            遍历集合,执行委托
            </summary>
            <typeparam name="T">集合值的类型</typeparam>
            <param name="source">集合</param>
            <param name="action">委托</param>
        </member>
        <member name="M:IFoxCAD.Cad.CollectionEx.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,IFoxCAD.Basal.LoopState})">
            <summary>
            遍历集合,执行委托(允许循环中断)
            </summary>
            <typeparam name="T">集合值的类型</typeparam>
            <param name="source">集合</param>
            <param name="action">委托</param>
        </member>
        <member name="M:IFoxCAD.Cad.CollectionEx.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,IFoxCAD.Basal.LoopState,System.Int32})">
            <summary>
            遍历集合,执行委托(允许循环中断,输出索引值)
            </summary>
            <typeparam name="T">集合值的类型</typeparam>
            <param name="source">集合</param>
            <param name="action">委托</param>
        </member>
        <member name="T:IFoxCAD.Cad.CollectionEx.KeywordName">
            <summary>
            关键字名字
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.CollectionEx.KeywordName.GLOBAL">
            <summary>
            全局名字
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.CollectionEx.KeywordName.LOCAL">
            <summary>
            本地名字
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.CollectionEx.KeywordName.DISPLAY">
            <summary>
            显示名字
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.CollectionEx.Contains(Autodesk.AutoCAD.EditorInput.KeywordCollection,System.String,IFoxCAD.Cad.CollectionEx.KeywordName)">
            <summary>
            含有关键字
            </summary>
            <param name="collection">关键字集合</param>
            <param name="name">关键字</param>
            <param name="keywordName">关键字容器字段名</param>
            <returns>true含有</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CollectionEx.ToDictionary(Autodesk.AutoCAD.EditorInput.KeywordCollection)">
            <summary>
            获取词典<see langword="(GlobalName"/>,<see langword="DisplayName)"/>
            <para>KeywordCollection是允许重复关键字的,没有哈希索引,在多次判断时候会遍历多次O(n),所以生成一个词典进行O(1)</para>
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.CollectionEx.GetKeys(Autodesk.AutoCAD.DatabaseServices.IdMapping)">
            <summary>
            旧块名
            </summary>
            <param name="idMapping"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.CollectionEx.GetValues(Autodesk.AutoCAD.DatabaseServices.IdMapping)">
            <summary>
            新块名
            </summary>
            <param name="idMapping"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.CollectionEx.ToDictionary(Autodesk.AutoCAD.DatabaseServices.IdMapping)">
            <summary>
            转换为词典
            </summary>
            <param name="mapping"></param>
            <returns></returns>
        </member>
        <member name="T:IFoxCAD.Cad.DatabaseEx">
            <summary>
            数据库扩展函数
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DatabaseEx.SwitchDatabase(Autodesk.AutoCAD.DatabaseServices.Database)">
            <summary>
            打开切换活动数据库
            </summary>
            <param name="db">当前数据库</param>
            <returns>切换数据库对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DatabaseEx.SaveDwgFile(Autodesk.AutoCAD.DatabaseServices.Database,Autodesk.AutoCAD.DatabaseServices.DwgVersion)">
            <summary>
            保存文件
            </summary>
            <param name="db">数据库</param>
            <param name="version">文件版本</param>
        </member>
        <member name="M:IFoxCAD.Cad.DatabaseEx.SaveFile(Autodesk.AutoCAD.DatabaseServices.Database,Autodesk.AutoCAD.DatabaseServices.DwgVersion,System.Boolean,System.String,System.Boolean)">
            <summary>
            保存文件<br/>
            </summary>
            <param name="db">数据库</param>
            <param name="version">默认2004dwg;若保存dxf则需要在路径输入扩展名</param>
            <param name="automatic">为true时候<paramref name="version"/>无效,将变为自动识别环境变量</param>
            <param name="saveAsFile">另存为文件,前台将调用时它将无效,将变为弹出面板</param>
            <param name="echoes">保存路径失败的提示</param>
        </member>
        <member name="M:IFoxCAD.Cad.DatabaseEx.GetOrCreateSaveAsFile(Autodesk.AutoCAD.DatabaseServices.Database)">
            <summary>
            获取文件名,无效的话就制造
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFoxCAD.Cad.SwitchDatabase">
            <summary>
            自动切换活动数据库
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.SwitchDatabase.#ctor(Autodesk.AutoCAD.DatabaseServices.Database)">
            <summary>
            切换活动数据库
            </summary>
            <param name="database">当前数据库</param>
        </member>
        <member name="M:IFoxCAD.Cad.SwitchDatabase.Dispose">
            <summary>
            恢复活动数据库为默认
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.DBDictionaryEx">
            <summary>
            字典扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DBDictionaryEx.GetAllObjects``1(Autodesk.AutoCAD.DatabaseServices.DBDictionary)">
            <summary>
            获取字典里的全部对象
            </summary>
            <typeparam name="T">对象类型的泛型</typeparam>
            <param name="dict">字典</param>
            <returns>对象迭代器</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBDictionaryEx.GetData(Autodesk.AutoCAD.DatabaseServices.DBDictionary,System.String)">
            <summary>
            获取字典内指定key的对象
            </summary>
            <param name="dict">字典</param>
            <param name="key">指定的键值</param>
            <returns>T 类型的对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBDictionaryEx.GetData``1(Autodesk.AutoCAD.DatabaseServices.DBDictionary,System.String)">
            <summary>
            获取字典内指定key的对象
            </summary>
            <typeparam name="T">对象类型的泛型</typeparam>
            <param name="dict">字典</param>
            <param name="key">key</param>
            <returns>T类型的对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBDictionaryEx.SetData``1(Autodesk.AutoCAD.DatabaseServices.DBDictionary,System.String,``0)">
            <summary>
            添加条目（键值对）到字典
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="dict">字典</param>
            <param name="key">键</param>
            <param name="newValue">值</param>
            <returns>字典项目的id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBDictionaryEx.GetXRecord(Autodesk.AutoCAD.DatabaseServices.DBDictionary,System.String)">
            <summary>
            从字典中获取扩展数据
            </summary>
            <param name="dict">字典</param>
            <param name="key">键值</param>
            <returns>扩展数据</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBDictionaryEx.SetXRecord(Autodesk.AutoCAD.DatabaseServices.DBDictionary,System.String,IFoxCAD.Cad.XRecordDataList)">
            <summary>
            保存扩展数据到字典
            </summary>
            <param name="rb">扩展数据</param>
            <param name="dict">字典</param>
            <param name="key">键值</param>
            <returns>字典项的Id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBDictionaryEx.GetXDictionary(Autodesk.AutoCAD.DatabaseServices.DBObject,Autodesk.AutoCAD.DatabaseServices.OpenMode)">
            <summary>
            获取扩展字典
            </summary>
            <param name="obj">对象</param>
            <param name="openMode">打开模式</param>
            <returns>扩展字典对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBDictionaryEx.CreateDataTable(System.Collections.Generic.Dictionary{System.String,Autodesk.AutoCAD.DatabaseServices.CellType},System.Object[0:,0:])">
            <summary>
            创建数据表
            </summary>
            <param name="colTypes">原数据类型的字典</param>
            <param name="content">表元素（二维数组）</param>
            <returns>数据表</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBDictionaryEx.SetValue(Autodesk.AutoCAD.DatabaseServices.DataCell,Autodesk.AutoCAD.DatabaseServices.CellType,System.Object)">
            <summary>
            设定单元格数据
            </summary>
            <param name="cell">单元格</param>
            <param name="type">类型</param>
            <param name="value">数据</param>
        </member>
        <member name="M:IFoxCAD.Cad.DBDictionaryEx.GetSubDictionary(Autodesk.AutoCAD.DatabaseServices.DBDictionary,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取子字典
            </summary>
            <param name="dict">根字典</param>
            <param name="createSubDictionary">是否创建子字典</param>
            <param name="dictNames">键值列表</param>
            <returns>字典</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBDictionaryEx.AddGroup(Autodesk.AutoCAD.DatabaseServices.DBDictionary,System.String,Autodesk.AutoCAD.DatabaseServices.ObjectIdCollection)">
            <summary>
            添加编组
            </summary>
            <param name="dict">字典</param>
            <param name="name">组名</param>
            <param name="ids">实体Id集合</param>
            <returns>编组Id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBDictionaryEx.AddGroup(Autodesk.AutoCAD.DatabaseServices.DBDictionary,System.String,System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.ObjectId})">
            <summary>
            添加编组
            </summary>
            <param name="dict">字典</param>
            <param name="name">组名</param>
            <param name="ids">实体Id集合</param>
            <returns>编组Id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBDictionaryEx.GetGroups(Autodesk.AutoCAD.DatabaseServices.DBDictionary,System.Func{Autodesk.AutoCAD.DatabaseServices.Group,System.Boolean})">
            <summary>
            按选择条件获取编组集合
            </summary>
            <param name="dict">字典</param>
            <param name="func">选择条件，过滤函数</param>
            <example><![CDATA[var groups = dict.GetGroups(g => g.NumEntities < 2);]]></example>
            <returns>编组集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBDictionaryEx.GetGroups(Autodesk.AutoCAD.DatabaseServices.Entity)">
            <summary>
            返回实体的所在编组的集合
            </summary>
            <param name="ent">图元实体</param>
            <returns>编组集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBDictionaryEx.RemoveNullGroup(Autodesk.AutoCAD.DatabaseServices.DBDictionary)">
            <summary>
            移除所有的空组
            </summary>
            <returns>被移除编组的名称集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBDictionaryEx.RemoveNullGroup(Autodesk.AutoCAD.DatabaseServices.DBDictionary,System.Func{System.String,System.Boolean})">
            <summary>
            移除所有空组
            </summary>
            <param name="dict"></param>
            <param name="func">过滤条件，过滤要删除的组名的规则函数</param>
            <example>
            <![CDATA[RemoveNullGroup(g => g.StartsWith("hah"));]]>
            </example>
            <returns>被移除编组的名称集合</returns>
        </member>
        <member name="T:IFoxCAD.Cad.DBObjectEx">
            <summary>
            实体对象扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DBObjectEx.Erase(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.DBObject})">
            <summary>
            删除数据库对象
            </summary>
            <param name="dBObjects">数据库对象列表</param>
        </member>
        <member name="M:IFoxCAD.Cad.DBObjectEx.RemoveXData(Autodesk.AutoCAD.DatabaseServices.DBObject,System.String,Autodesk.AutoCAD.DatabaseServices.DxfCode)">
            <summary>
            删除扩展数据
            </summary>
            <param name="obj">对象实例</param>
            <param name="appName">应用程序名称</param>
            <param name="dxfCode">要删除数据的组码</param>
        </member>
        <member name="M:IFoxCAD.Cad.DBObjectEx.RemoveXData(Autodesk.AutoCAD.DatabaseServices.DBObject,System.String)">
            <summary>
            删除扩展数据
            </summary>
            <param name="obj">对象实例</param>
            <param name="appName">应用程序名称</param>
        </member>
        <member name="M:IFoxCAD.Cad.DBObjectEx.CloneEx``1(``0)">
            <summary>
            克隆对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">对象</param>
            <returns>克隆后的对象</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:IFoxCAD.Cad.DBObjectEx.ChangeXData(Autodesk.AutoCAD.DatabaseServices.DBObject,System.String,Autodesk.AutoCAD.DatabaseServices.DxfCode,System.Object)">
            <summary>
            修改扩展数据
            </summary>
            <param name="obj">对象实例</param>
            <param name="appName">应用程序名称</param>
            <param name="dxfCode">要修改数据的组码</param>
            <param name="newValue">新的数据</param>
        </member>
        <member name="M:IFoxCAD.Cad.DBObjectEx.ForWrite``1(``0,System.Action{``0})">
            <summary>
            实体自动管理读写函数，此函数性能比using模式低一倍
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="obj">实体对象</param>
            <param name="action">操作委托</param>
        </member>
        <member name="M:IFoxCAD.Cad.DBObjectEx.ForWrite(Autodesk.AutoCAD.DatabaseServices.DBObject)">
            <summary>
            打开模式提权
            </summary>
            <param name="obj">实体对象</param>
            <returns>提权类对象</returns>
        </member>
        <member name="T:IFoxCAD.Cad.DBObjectEx.UpgradeOpenManager">
            <summary>
            提权类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DBObjectEx.UpgradeOpenManager.Dispose">
            <summary>
            注销函数
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.DBTransEx">
            <summary>
            事务类扩展
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DBTransEx.Purge(IFoxCAD.Cad.DBTrans,IFoxCAD.Cad.SymModes,System.Boolean)">
            <summary>
            清理符号表
            </summary>
            <param name="tr"></param>
            <param name="sym"></param>
            <param name="excludeXref">排除外部参照:默认true,为false时候会令图层全部显示再清理,包括冻结</param>
        </member>
        <member name="T:IFoxCAD.Cad.DocumentLockManager">
            <summary>
            文档锁管理器，用于管理文档的锁定和解锁。
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.DocumentLockManager._documentLock">
            <summary>
            用于存储文档锁的实例，如果文档未锁定则为null。
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DocumentLockManager.#ctor(Autodesk.AutoCAD.ApplicationServices.Document)">
            <summary>
            初始化DocumentLockManager实例。
            </summary>
            <param name="doc">需要进行锁定管理的文档。</param>
        </member>
        <member name="P:IFoxCAD.Cad.DocumentLockManager.IsDisposed">
            <summary>
            表示当前实例是否已被释放。
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DocumentLockManager.Dispose">
            <summary>
            释放当前实例持有的资源。
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.DocumentLockManagerExtension">
            <summary>
            提供Document类型的扩展方法来方便创建DocumentLockManager实例。
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DocumentLockManagerExtension.SecurelyLock(Autodesk.AutoCAD.ApplicationServices.Document)">
            <summary>
            安全锁定文档，返回一个新的DocumentLockManager实例。
            </summary>
            <param name="doc">需要进行锁定的文档。</param>
            <returns>DocumentLockManager实例，用于管理文档锁。</returns>
        </member>
        <member name="T:IFoxCAD.Cad.DwgMark">
            <summary>
            为dwg文件添加标记
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DwgMark.AddMark(System.IO.FileInfo,System.Int32)">
            <summary>
            为dwg文件添加标识
            </summary>
            <param name="file">DWG文件</param>
            <param name="bite">ASCII标识字节0X00~0X7F</param>
            <exception cref="T:System.ArgumentException">非dwg文件会报错，给定bite超界限也报错</exception>
        </member>
        <member name="M:IFoxCAD.Cad.DwgMark.RemoveMark(System.IO.FileInfo)">
            <summary>
            将dwg文件标记恢复为默认值
            </summary>
            <param name="file">文件</param>
            <exception cref="T:System.ArgumentException">非dwg文件会报错</exception>
        </member>
        <member name="M:IFoxCAD.Cad.DwgMark.GetMark(System.IO.FileInfo)">
            <summary>
            获取设置的dwg文件标记
            </summary>
            <param name="file">文件</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">非dwg文件会报错</exception>
        </member>
        <member name="T:IFoxCAD.Cad.EditorEx">
            <summary>
            命令行扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.SelectAtPoint(Autodesk.AutoCAD.EditorInput.Editor,Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.EditorInput.SelectionFilter)">
            <summary>
            选择穿过一个点的对象
            </summary>
            <param name="editor">命令行对象</param>
            <param name="point">点</param>
            <param name="filter">过滤器</param>
            <returns>选择集结果类</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.SelectByLineWeight(Autodesk.AutoCAD.EditorInput.Editor,Autodesk.AutoCAD.DatabaseServices.LineWeight)">
            <summary>
            根据线宽创建图层选择集
            </summary>
            <param name="editor">命令行对象</param>
            <param name="lineWeight">线宽</param>
            <returns>图层选择集</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.SSGet(Autodesk.AutoCAD.EditorInput.Editor,System.String,Autodesk.AutoCAD.EditorInput.SelectionFilter,System.Nullable{System.ValueTuple{System.String,System.String}},System.Collections.Generic.Dictionary{System.String,System.ValueTuple{System.String,System.Action}})">
            <summary>
            选择集
            </summary>
            <param name="editor">命令行对象</param>
            <param name="mode">模式</param>
            <param name="filter">过滤器</param>
            <param name="messages">消息</param>
            <param name="keywords">
            关键字和回调函数
            <para>不用使用下列关键字 "Window/Last/Crossing/BOX/ALL/Fence/WPolygon/CPolygon/Group/Add/Remove/Multiple/Previous/Undo/AUto/Single" </para>
            </param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.SsgetAddKeys(Autodesk.AutoCAD.EditorInput.PromptSelectionOptions,System.Collections.Generic.Dictionary{System.String,System.Action})">
            <summary>
             添加选择集关键字和回调
            </summary>
            <param name="pso">选择集配置</param>
            <param name="dicActions">关键字,回调委托</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.StreamMessage(System.String,System.Object[])">
            <summary>
            带错误提示对话框的打印信息函数
            </summary>
            <param name="format">带格式项的字符串</param>
            <param name="args">指定格式化的对象数组</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.StreamMessage(System.String)">
            <summary>
            带错误提示对话框的打印信息函数
            </summary>
            <param name="message">打印信息</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.Message(System.Exception)">
            <summary>
            异常信息对话框
            </summary>
            <param name="ex">异常</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.InfoMessageBox(System.String,System.String)">
            <summary>
            提示信息对话框
            </summary>
            <param name="caption">对话框的标题</param>
            <param name="message">对话框文本</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.InfoMessageBox(System.String,System.String,System.Object[])">
            <summary>
            提示信息对话框
            </summary>
            <param name="caption">对话框的标题</param>
            <param name="format">带格式化项的对话框文本</param>
            <param name="args">指定格式化的对象数组</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.InfoMessageBox(System.String)">
            <summary>
            提示信息对话框,默认标题为NFox.Cad
            </summary>
            <param name="message">对话框文本</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.InfoMessageBox(System.String,System.Object[])">
            <summary>
            提示信息对话框
            </summary>
            <param name="format">带格式化项的对话框文本</param>
            <param name="args">指定格式化的对象数组</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.WriteMessage(System.String)">
            <summary>
            命令行打印字符串
            </summary>
            <param name="message">字符串</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.WriteMessage(System.String,System.Object[])">
            <summary>
            命令行打印字符串
            </summary>
            <param name="format">带格式化项的文本</param>
            <param name="args">指定格式化的对象数组</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.HasEditor">
            <summary>
            判断是否有活动的编辑器对象
            </summary>
            <returns><see langword="true"/>有,<see langword="false"/>没有</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.Acceptable">
            <summary>
            判断是否可以打印字符串
            </summary>
            <returns><see langword="true"/>可以打印,<see langword="false"/>不可以打印</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.GetLines(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point2d},System.Boolean)">
            <summary>
            根据点表返回矢量线的列表
            </summary>
            <param name="pnts">点表</param>
            <param name="isClosed">是否闭合,<see langword="true"/> 为闭合,<see langword="false"/> 为不闭合</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.DrawVectors(Autodesk.AutoCAD.EditorInput.Editor,System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point2d},System.Int16,System.Boolean)">
            <summary>
            画矢量线
            </summary>
            <param name="editor">编辑器对象</param>
            <param name="pnts">点表</param>
            <param name="colorIndex">颜色码</param>
            <param name="isClosed">是否闭合,<see langword="true"/> 为闭合,<see langword="false"/> 为不闭合</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.DrawVectors(Autodesk.AutoCAD.EditorInput.Editor,System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point2d},System.Int16)">
            <summary>
            画矢量线
            </summary>
            <param name="editor">编辑器对象</param>
            <param name="pnts">点表</param>
            <param name="colorIndex">颜色码</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.DrawCircles(Autodesk.AutoCAD.EditorInput.Editor,System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point2d},System.Int16,System.Double,System.Int32)">
            <summary>
            用矢量线画近似圆（正多边形）
            </summary>
            <param name="editor">编辑器对象</param>
            <param name="pnts">点表</param>
            <param name="colorIndex">颜色码</param>
            <param name="radius">半径</param>
            <param name="numEdges">多边形边的个数</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.DrawCircle(Autodesk.AutoCAD.EditorInput.Editor,Autodesk.AutoCAD.Geometry.Point2d,System.Int16,System.Double,System.Int32)">
            <summary>
            用矢量线画近似圆（正多边形）
            </summary>
            <param name="editor">编辑器对象</param>
            <param name="pnt">点</param>
            <param name="colorIndex">颜色码</param>
            <param name="radius">半径</param>
            <param name="numEdges">多边形边的个数</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.DrawLineVectors(Autodesk.AutoCAD.EditorInput.Editor,System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point3d},System.Int32,System.Boolean)">
            <summary>
            根据点表绘制矢量线段(每两点为一条线段的起始点和终止点)
            </summary>
            <param name="editor">用户交互对象</param>
            <param name="points">点表</param>
            <param name="colorIndex">CAD颜色索引;默认：1为红色</param>
            <param name="drawHighlighted">是否高亮显示;<see langword="true"/>为高亮显示,默认：<see langword="false"/>为不高亮显示</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.DrawEndToEndVectors(Autodesk.AutoCAD.EditorInput.Editor,System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point3d},System.Int32,System.Boolean,System.Boolean)">
            <summary>
            根据点表绘制首尾相连的矢量
            </summary>
            <param name="editor">用户交互对象</param>
            <param name="points">点表</param>
            <param name="colorIndex">CAD颜色索引;默认：1为红色</param>
            <param name="isClose">是否闭合;<see langword="true"/> 为闭合,默认：<see langword="false"/> 为不闭合</param>
            <param name="drawHighlighted">是否高亮显示;<see langword="true"/>为高亮显示,默认：<see langword="false"/>为不高亮显示</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.GetMatrixFromUcsToWcs(Autodesk.AutoCAD.EditorInput.Editor)">
            <summary>
            获取UCS到WCS的矩阵
            </summary>
            <param name="editor">命令行对象</param>
            <returns>变换矩阵</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.GetMatrixFromWcsToUcs(Autodesk.AutoCAD.EditorInput.Editor)">
            <summary>
            获取WCS到UCS的矩阵
            </summary>
            <param name="editor">命令行对象</param>
            <returns>变换矩阵</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.GetMatrixFromMDcsToWcs(Autodesk.AutoCAD.EditorInput.Editor)">
            <summary>
            获取MDcs(模型空间)到WCS的矩阵
            </summary>
            <param name="editor">命令行对象</param>
            <returns>变换矩阵</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.GetMatrixFromWcsToMDcs(Autodesk.AutoCAD.EditorInput.Editor)">
            <summary>
            获取WCS到MDCS(模型空间)的矩阵
            </summary>
            <param name="editor">命令行对象</param>
            <returns>变换矩阵</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.GetMatrixFromMDcsToPDcs(Autodesk.AutoCAD.EditorInput.Editor)">
            <summary>
            获取MDCS(模型空间)到PDCS(图纸空间)的矩阵
            </summary>
            <param name="editor">命令行对象</param>
            <returns>变换矩阵</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.GetMatrixFromPDcsToMDcs(Autodesk.AutoCAD.EditorInput.Editor)">
            <summary>
            获取PDCS(图纸空间)到MDCS(模型空间)的矩阵
            </summary>
            <param name="editor">命令行对象</param>
            <returns>变换矩阵</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.GetMatrix(Autodesk.AutoCAD.EditorInput.Editor,IFoxCAD.Cad.CoordinateSystemCode,IFoxCAD.Cad.CoordinateSystemCode)">
            <summary>
            获取变换矩阵
            </summary>
            <param name="editor">命令行对象</param>
            <param name="from">源坐标系</param>
            <param name="to">目标坐标系</param>
            <returns>变换矩阵</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.ZoomWindow(Autodesk.AutoCAD.EditorInput.Editor,Autodesk.AutoCAD.DatabaseServices.Extents3d,System.Double)">
            <summary>
            缩放窗口范围
            </summary>
            <param name="ed">命令行对象</param>
            <param name="ext">窗口范围点</param>
            <param name="offsetDist">偏移距离</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.Zoom(Autodesk.AutoCAD.EditorInput.Editor,Autodesk.AutoCAD.Geometry.Point3d,System.Double,System.Double)">
            <summary>
            按范围缩放
            </summary>
            <param name="ed">命令行对象</param>
            <param name="cenPt">中心点</param>
            <param name="width">窗口宽</param>
            <param name="height">窗口高</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.ZoomWindow(Autodesk.AutoCAD.EditorInput.Editor,Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d,System.Double)">
            <summary>
            缩放窗口范围
            </summary>
            <param name="ed">命令行对象</param>
            <param name="lpt">第一点</param>
            <param name="rpt">对角点</param>
            <param name="offsetDist">偏移距离</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.GetValidExtents3d(Autodesk.AutoCAD.DatabaseServices.Database,System.Double)">
            <summary>
            获取有效的数据库范围
            </summary>
            <param name="db">数据库</param>
            <param name="extention">容差值:图元包围盒会超过数据库边界,用此参数扩大边界</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.ZoomExtents(Autodesk.AutoCAD.EditorInput.Editor,System.Double)">
            <summary>
            动态缩放
            </summary>
            <param name="ed">命令行对象</param>
            <param name="offsetDist">偏移距离</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.ZoomObject(Autodesk.AutoCAD.EditorInput.Editor,Autodesk.AutoCAD.DatabaseServices.Entity,System.Double)">
            <summary>
            根据实体对象的范围显示视图
            </summary>
            <param name="ed">命令行对象</param>
            <param name="ent">Entity对象</param>
            <param name="offsetDist">偏移距离</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.GetPoint(Autodesk.AutoCAD.EditorInput.Editor,System.String,Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            获取Point
            </summary>
            <param name="ed">命令行对象</param>
            <param name="message">提示信息</param>
            <param name="basePoint">提示使用的基点</param>
            <returns>交互结果</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.GetDouble(Autodesk.AutoCAD.EditorInput.Editor,System.String,System.Double)">
            <summary>
            获取double值
            </summary>
            <param name="ed">命令行对象</param>
            <param name="message">提示信息</param>
            <param name="defaultValue">double默认值</param>
            <returns>交互结果</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.GetInteger(Autodesk.AutoCAD.EditorInput.Editor,System.String,System.Int32)">
            <summary>
            获取int值
            </summary>
            <param name="ed">命令行对象</param>
            <param name="message">提示信息</param>
            <param name="defaultValue">默认值</param>
            <returns>交互结果</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.GetString(Autodesk.AutoCAD.EditorInput.Editor,System.String,System.String)">
            <summary>
            获取string值
            </summary>
            <param name="ed">命令行对象</param>
            <param name="message">提示信息</param>
            <param name="defaultValue">string默认值</param>
            <returns></returns>
        </member>
        <member name="T:IFoxCAD.Cad.EditorEx.RunLispFlag">
            <summary>
            执行lisp的方式枚举
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EditorEx.RunLispFlag.AdsQueueexpr">
            <summary>
            AdsQueueexpr
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EditorEx.RunLispFlag.AcedEvaluateLisp">
            <summary>
            AcedEvaluateLisp
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EditorEx.RunLispFlag.SendStringToExecute">
            <summary>
            SendStringToExecute
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.RunLisp(Autodesk.AutoCAD.EditorInput.Editor,System.String,IFoxCAD.Cad.EditorEx.RunLispFlag)">
            <summary>
            发送lisp语句字符串到cad执行
            </summary>
            <param name="ed">编辑器对象</param>
            <param name="lispCode">lisp语句</param>
            <param name="flag">运行方式</param>
            <returns>缓冲结果,返回值</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.ComExportWMF(Autodesk.AutoCAD.EditorInput.Editor,System.String,Autodesk.AutoCAD.DatabaseServices.ObjectId[],System.Boolean)">
            <summary>
            输出WMF<br/>
            此函数不适用于后台
            </summary>
            <param name="editor">命令行对象</param>
            <param name="saveFile">保存文件</param>
            <param name="ids">选择集的对象,为null时候手选</param>
            <param name="wmfSetDel">是否清空选择集</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.PrepareForJig(Autodesk.AutoCAD.EditorInput.Editor,Autodesk.AutoCAD.DatabaseServices.Entity[])">
            <summary>
            jig前的准备工作，使图元暗显
            </summary>
            <param name="ed">命令栏</param>
            <param name="ents">实体（已存在数据库中）</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.PrepareForJig(Autodesk.AutoCAD.EditorInput.Editor,System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.Entity})">
            <summary>
            jig前的准备工作，使图元暗显
            </summary>
            <param name="ed">命令栏</param>
            <param name="ents">实体（已存在数据库中）</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.GetCurrentMouthPoint(Autodesk.AutoCAD.EditorInput.Editor)">
            <summary>
            获取CAD鼠标当前位置坐标
            </summary>
            <param name="ed">命令栏</param>
            <returns>坐标(可能为null)</returns>
        </member>
        <member name="T:IFoxCAD.Cad.ArcEx">
            <summary>
            圆弧扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.ArcEx.CreateArcSCE(Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            根据圆心、起点、终点来创建圆弧(二维)
            </summary>
            <param name="startPoint">起点</param>
            <param name="centerPoint">圆心</param>
            <param name="endPoint">终点</param>
            <returns>圆弧</returns>
        </member>
        <member name="M:IFoxCAD.Cad.ArcEx.CreateArc(Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            三点法创建圆弧(二维)
            </summary>
            <param name="startPoint">起点</param>
            <param name="pointOnArc">圆弧上的点</param>
            <param name="endPoint">终点</param>
            <returns>圆弧</returns>
        </member>
        <member name="M:IFoxCAD.Cad.ArcEx.CreateArc(Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d,System.Double)">
            <summary>
            根据起点、圆心和圆弧角度创建圆弧(二维)
            </summary>
            <param name="startPoint">起点</param>
            <param name="centerPoint">圆心</param>
            <param name="angle">圆弧角度</param>
            <returns>圆弧</returns>
        </member>
        <member name="M:IFoxCAD.Cad.ArcEx.ToPolyline(Autodesk.AutoCAD.DatabaseServices.Arc)">
            <summary>
            圆弧转为多段线
            </summary>
            <param name="arc">圆弧</param>
            <returns>多段线</returns>
        </member>
        <member name="T:IFoxCAD.Cad.BlockReferenceEx">
            <summary>
            块参照扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.BlockReferenceEx.XClip(Autodesk.AutoCAD.DatabaseServices.BlockReference,System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point3d})">
            <summary>
            裁剪块参照
            </summary>
            <param name="brf">块参照</param>
            <param name="pt3ds">裁剪多边形点表</param>
        </member>
        <member name="M:IFoxCAD.Cad.BlockReferenceEx.XClip(Autodesk.AutoCAD.DatabaseServices.BlockReference,Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            裁剪块参照
            </summary>
            <param name="brf">块参照</param>
            <param name="pt1">第一角点</param>
            <param name="pt2">第二角点</param>
        </member>
        <member name="M:IFoxCAD.Cad.BlockReferenceEx.ChangeBlockProperty(Autodesk.AutoCAD.DatabaseServices.BlockReference,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            更新动态块参数值
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.BlockReferenceEx.ChangeBlockProperty(Autodesk.AutoCAD.DatabaseServices.BlockReference,System.String,System.Object)">
            <summary>
            更新动态块参数值
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.BlockReferenceEx.ChangeBlockAttribute(Autodesk.AutoCAD.DatabaseServices.BlockReference,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            更新属性块的属性值
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.BlockReferenceEx.GetAttributes(Autodesk.AutoCAD.DatabaseServices.BlockReference)">
            <summary>
            获取普通块参照的属性集合
            </summary>
            <param name="owner">普通块参照</param>
            <returns>属性集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.BlockReferenceEx.GetBlockTableRecord(Autodesk.AutoCAD.DatabaseServices.BlockReference)">
            <summary>
            获取块表记录
            </summary>
            <param name="brf">块参照</param>
            <returns>块表记录</returns>
        </member>
        <member name="M:IFoxCAD.Cad.BlockReferenceEx.GetBlockName(Autodesk.AutoCAD.DatabaseServices.BlockReference)">
            <summary>
            获取块的有效名字
            </summary>
            <param name="blk">块参照</param>
            <returns>名字</returns>
        </member>
        <member name="M:IFoxCAD.Cad.BlockReferenceEx.GetNestedBlockPosition(Autodesk.AutoCAD.DatabaseServices.BlockReference,System.String)">
            <summary>
            获取嵌套块的位置(wcs)
            </summary>
            <param name="parentBlockRef">父块</param>
            <param name="nestedBlockName">子块名</param>
            <returns>子块的位置</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:IFoxCAD.Cad.BlockReferenceEx.ForEach(Autodesk.AutoCAD.DatabaseServices.BlockReference,System.Action{Autodesk.AutoCAD.DatabaseServices.ObjectId})">
            <summary>
            遍历块内
            </summary>
            <param name="brf"></param>
            <param name="action"></param>
        </member>
        <member name="M:IFoxCAD.Cad.BlockReferenceEx.ForEach(Autodesk.AutoCAD.DatabaseServices.BlockReference,System.Action{Autodesk.AutoCAD.DatabaseServices.ObjectId,IFoxCAD.Basal.LoopState})">
            <summary>
            遍历块内
            </summary>
            <param name="brf"></param>
            <param name="action"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:IFoxCAD.Cad.BlockReferenceEx.ForEach(Autodesk.AutoCAD.DatabaseServices.BlockReference,System.Action{Autodesk.AutoCAD.DatabaseServices.ObjectId,IFoxCAD.Basal.LoopState,System.Int32})">
            <summary>
            遍历块内
            </summary>
            <param name="brf"></param>
            <param name="action"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:IFoxCAD.Cad.BlockReferenceEx.NestedForEach(Autodesk.AutoCAD.DatabaseServices.Entity,System.Action{Autodesk.AutoCAD.DatabaseServices.Entity,Autodesk.AutoCAD.Geometry.Matrix3d},IFoxCAD.Cad.DBTrans)">
            <summary>
            遍历嵌套块中块图元
            </summary>
            <param name="blockReference">块参照</param>
            <param name="action">委托</param>
            <param name="tr">事务</param>
        </member>
        <member name="M:IFoxCAD.Cad.BlockReferenceEx.GetVisibilityInfo(Autodesk.AutoCAD.DatabaseServices.BlockReference)">
            <summary>
            获取块可见性信息
            </summary>
            <param name="blockReference">块参照</param>
            <returns>可见性信息</returns>
        </member>
        <member name="M:IFoxCAD.Cad.BlockReferenceEx.GetVisibilityInfo(Autodesk.AutoCAD.DatabaseServices.BlockTableRecord)">
            <summary>
            获取块可见性信息
            </summary>
            <param name="btr">块表记录</param>
            <returns>可见性信息</returns>
        </member>
        <member name="T:IFoxCAD.Cad.BlockVisibilityInfo">
            <summary>
            块可见性信息
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.BlockVisibilityInfo.Has">
            <summary>
            有无可见性
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.BlockVisibilityInfo.PropertyName">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.BlockVisibilityInfo.AllowedValues">
            <summary>
            允许值
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.BoundingInfo">
            <summary>
            和尚777 重构
            包围盒信息
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.BoundingInfo.MinX">
            <summary>
            MinPoint.X
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.BoundingInfo.MinY">
            <summary>
            MinPoint.Y
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.BoundingInfo.MinZ">
            <summary>
            MinPoint.Z
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.BoundingInfo.MaxX">
            <summary>
            MaxPoint.X
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.BoundingInfo.MaxY">
            <summary>
            MaxPoint.Y
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.BoundingInfo.MaxZ">
            <summary>
            MaxPoint.Z
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.BoundingInfo.BottomLeft">
            <summary>
            MinPoint 左下点 P1
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.BoundingInfo.BottomCenter">
            <summary>
            P2
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.BoundingInfo.BottomRight">
            <summary>
            P3
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.BoundingInfo.MidLeft">
            <summary>
            P4
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.BoundingInfo.MidCenter">
            <summary> 
            P5
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.BoundingInfo.MidRight">
            <summary>  
            P6 
            </summary> 
        </member>
        <member name="P:IFoxCAD.Cad.BoundingInfo.TopLeft">
            <summary>
            P7
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.BoundingInfo.TopCenter">
            <summary>
            P8
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.BoundingInfo.TopRight">
            <summary>
            MaxPoint 右上点 P9
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.BoundingInfo.Height">
            <summary>
            高
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.BoundingInfo.Width">
            <summary>
            宽
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.BoundingInfo.Area">
            <summary>
            面积
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.BoundingInfo.Extents3d">
            <summary>
            3D包围盒
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.BoundingInfo.Extents2d">
            <summary>
            2D包围盒
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.BoundingInfo.#ctor(Autodesk.AutoCAD.DatabaseServices.Extents3d)">
            <summary>
            包围盒信息3D构造
            </summary>
            <param name="ext">包围盒</param>
        </member>
        <member name="M:IFoxCAD.Cad.BoundingInfo.#ctor(Autodesk.AutoCAD.DatabaseServices.Extents2d)">
            <summary>
            包围盒信息2D构造
            </summary>
            <param name="ext">包围盒</param>
        </member>
        <member name="M:IFoxCAD.Cad.BoundingInfo.ToString">
            <summary>
            重写ToString
            </summary>
            <returns>返回MinPoint,MaxPoint坐标</returns>
        </member>
        <member name="M:IFoxCAD.Cad.BoundingInfo.Move(Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            移动包围盒
            </summary>
            <param name="pt1">基点</param>
            <param name="pt2">目标点</param>
        </member>
        <member name="T:IFoxCAD.Cad.CircleEx">
            <summary>
            圆扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.CircleEx.CreateCircle(Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            两点创建圆(两点中点为圆心)
            </summary>
            <param name="startPoint">起点</param>
            <param name="endPoint">终点</param>
            <returns>圆</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CircleEx.CreateCircle(Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            三点法创建圆(失败则返回Null)
            </summary>
            <param name="pt1">第一点</param>
            <param name="pt2">第二点</param>
            <param name="pt3">第三点</param>
            <returns>圆</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CircleEx.CreateCircle(Autodesk.AutoCAD.Geometry.Point3d,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            通过圆心,半径绘制圆形
            </summary>
            <param name="center">圆心</param>
            <param name="radius">半径</param>
            <param name="vex">法向量的X</param>
            <param name="vey">法向量的Y</param>
            <param name="vez">法向量的Z</param>
            <returns>圆</returns>
        </member>
        <member name="T:IFoxCAD.Cad.CurveEx">
            <summary>
            实体类曲线扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.GetLength(Autodesk.AutoCAD.DatabaseServices.Curve)">
            <summary>
            曲线长度
            </summary>
            <param name="curve">曲线</param>
            <returns>长度</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.GetSplitCurves(Autodesk.AutoCAD.DatabaseServices.Curve,System.Collections.Generic.IEnumerable{System.Double},System.Boolean)">
            <summary>
            获取分割曲线集合
            </summary>
            <param name="curve">曲线</param>
            <param name="pars">打断参数表</param>
            <param name="isOrder">对参数表是否进行排序
            <para>
            <see langword="true"/>按参数值升序排序<br/>
            <see langword="false"/>不排序,默认值
            </para>
            </param>
            <returns>打断后曲线的集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.GetSplitCurves(Autodesk.AutoCAD.DatabaseServices.Curve,System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point3d},System.Boolean)">
            <summary>
            获取分割曲线集合
            </summary>
            <param name="curve">曲线</param>
            <param name="points">打断点表</param>
            <param name="isOrder">对点表是否进行排序
            <para>
            <see langword="true"/>按参数值升序排序<br/>
            <see langword="false"/>不排序,默认值
            </para>
            </param>
            <returns>打断后曲线的集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.BreakCurve(System.Collections.Generic.List{Autodesk.AutoCAD.DatabaseServices.Curve})">
            <summary>
            曲线打断
            </summary>
            <param name="curves">曲线列表</param>
            <returns>打断后的曲线列表</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.BreakCurveOnZPlane(System.Collections.Generic.List{Autodesk.AutoCAD.DatabaseServices.Curve})">
            <summary>
            在z法向量平面打断曲线
            </summary>
            <param name="curves">曲线列表</param>
            <returns>打断后的曲线列表</returns>
            <exception cref="T:System.ArgumentNullException">传入的曲线列表错误</exception>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.BreakCurve2dByQuadTree(System.Collections.Generic.List{Autodesk.AutoCAD.DatabaseServices.Curve},System.Double)">
            <summary>
            打段曲线2维By四叉树
            <code>
            目前对xLine,ray的支持存在错误
            需要更多的测试
            </code>
            </summary>
            <param name="sourceCurveList">曲线列表</param>
            <param name="tol">容差</param>
            <returns>打断后的曲线列表</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.GetScaleCurve(Autodesk.AutoCAD.DatabaseServices.Curve,Autodesk.AutoCAD.Geometry.Point3d,System.Double,System.Double)">
            <summary>
            获取非等比转换的曲线（旋转投影法）
            </summary>
            <param name="cur">转换前的曲线</param>
            <param name="pt">基点</param>
            <param name="x">x方向比例</param>
            <param name="y">y方向比例</param>
            <returns>转换后的曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToCurve3d(Autodesk.AutoCAD.DatabaseServices.Curve)">
            <summary>
            将曲线转换为ge曲线，此函数将在未来淘汰，二惊加油
            </summary>
            <param name="curve">曲线</param>
            <returns>ge曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToCompositeCurve3d(Autodesk.AutoCAD.DatabaseServices.Curve)">
            <summary>
            将曲线转换为复合曲线
            </summary>
            <param name="curve">曲线</param>
            <returns>复合曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToNurbCurve3d(Autodesk.AutoCAD.DatabaseServices.Curve)">
            <summary>
            将曲线转换为Nurb曲线
            </summary>
            <param name="curve">曲线</param>
            <returns>Nurb曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToCurve3d(Autodesk.AutoCAD.DatabaseServices.Line)">
            <summary>
            将直线转换为ge直线
            </summary>
            <param name="line">直线</param>
            <returns>ge直线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToNurbCurve3d(Autodesk.AutoCAD.DatabaseServices.Line)">
            <summary>
            将直线转换为Nurb曲线
            </summary>
            <param name="line">直线</param>
            <returns>Nurb曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToCurve3d(Autodesk.AutoCAD.DatabaseServices.Circle)">
            <summary>
            将圆转换为ge圆弧曲线
            </summary>
            <param name="cir">圆</param>
            <returns>ge圆弧曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToEllipticalArc3d(Autodesk.AutoCAD.DatabaseServices.Circle)">
            <summary>
            将圆转换为ge椭圆曲线
            </summary>
            <param name="cir">圆</param>
            <returns>ge椭圆曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToNurbCurve3d(Autodesk.AutoCAD.DatabaseServices.Circle)">
            <summary>
            将圆转换为Nurb曲线
            </summary>
            <param name="cir">圆</param>
            <returns>Nurb曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToCurve3d(Autodesk.AutoCAD.DatabaseServices.Arc)">
            <summary>
            将圆弧转换为ge圆弧曲线
            </summary>
            <param name="arc">圆弧</param>
            <returns>ge圆弧曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToEllipticalArc3d(Autodesk.AutoCAD.DatabaseServices.Arc)">
            <summary>
            将圆弧转换为ge椭圆曲线
            </summary>
            <param name="arc">圆弧</param>
            <returns>ge椭圆曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToNurbCurve3d(Autodesk.AutoCAD.DatabaseServices.Arc)">
            <summary>
            将圆弧转换为三维Nurb曲线
            </summary>
            <param name="arc">圆弧</param>
            <returns>三维Nurb曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToCurve3d(Autodesk.AutoCAD.DatabaseServices.Ellipse)">
            <summary>
            将椭圆转换为三维ge椭圆曲线
            </summary>
            <param name="ell">椭圆</param>
            <returns>三维ge椭圆曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToNurbCurve3d(Autodesk.AutoCAD.DatabaseServices.Ellipse)">
            <summary>
            将椭圆转换为三维Nurb曲线
            </summary>
            <param name="ell">椭圆</param>
            <returns>三维Nurb曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToCurve3d(Autodesk.AutoCAD.DatabaseServices.Spline)">
            <summary>
            将样条曲线转换为三维Nurb曲线
            </summary>
            <param name="spl">样条曲线</param>
            <returns>三维Nurb曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToCurve3d(Autodesk.AutoCAD.DatabaseServices.Polyline2d)">
            <summary>
            将二维多段线转换为三维ge曲线
            </summary>
            <param name="pl2d">二维多段线</param>
            <returns>三维ge曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToNurbCurve3d(Autodesk.AutoCAD.DatabaseServices.Polyline2d)">
            <summary>
            将二维多段线转换为三维Nurb曲线
            </summary>
            <param name="pl2d">二维多段线</param>
            <returns>三维Nurb曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToPolylineCurve3d(Autodesk.AutoCAD.DatabaseServices.Polyline2d)">
            <summary>
            将二维多段线转换为三维ge多段线
            </summary>
            <param name="pl">二维多段线</param>
            <returns>三维ge多段线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToCurve3d(Autodesk.AutoCAD.DatabaseServices.Polyline3d)">
            <summary>
            将三维多段线转换为三维曲线
            </summary>
            <param name="pl3d">三维多段线</param>
            <returns>三维曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToNurbCurve3d(Autodesk.AutoCAD.DatabaseServices.Polyline3d)">
            <summary>
            将三维多段线转换为三维Nurb曲线
            </summary>
            <param name="pl3d">三维多段线</param>
            <returns>三维Nurb曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToPolylineCurve3d(Autodesk.AutoCAD.DatabaseServices.Polyline3d)">
            <summary>
            将三维多段线转换为三维ge多段线
            </summary>
            <param name="pl">三维多段线</param>
            <returns>三维ge多段线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToCurve3d(Autodesk.AutoCAD.DatabaseServices.Polyline)">
            <summary>
            多段线转换为复合曲线
            </summary>
            <param name="pl">多段线对象</param>
            <returns>复合曲线对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToNurbCurve3d(Autodesk.AutoCAD.DatabaseServices.Polyline)">
            <summary>
            多段线转换为Nurb曲线
            </summary>
            <param name="pl">多段线</param>
            <returns>Nurb曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ChamferAt(Autodesk.AutoCAD.DatabaseServices.Polyline,System.Int32,System.Double,System.Boolean)">
            <summary>
            为优化多段线倒角
            </summary>
            <param name="polyline">优化多段线</param>
            <param name="index">顶点索引号</param>
            <param name="radius">倒角半径</param>
            <param name="isFillet">倒角类型</param>
        </member>
        <member name="T:IFoxCAD.Cad.DBTextEx">
            <summary>
            单行文字扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DBTextEx.CreateDBText(Autodesk.AutoCAD.Geometry.Point3d,System.String,System.Double,Autodesk.AutoCAD.DatabaseServices.AttachmentPoint,Autodesk.AutoCAD.DatabaseServices.Database,System.Action{Autodesk.AutoCAD.DatabaseServices.DBText})">
            <summary>
            创建单行文字
            </summary>
            <param name="position">插入点</param>
            <param name="text">文本内容</param>
            <param name="height">文字高度</param>
            <param name="justify">对齐方式</param>
            <param name="database">文字所在的数据库</param>
            <param name="action">文字属性设置委托</param>
            <returns>文字对象</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:IFoxCAD.Cad.DBTextEx.ValidateMirror(Autodesk.AutoCAD.DatabaseServices.DBText)">
            <summary>
            更正单行文字的镜像属性
            </summary>
            <param name="txt">单行文字</param>
        </member>
        <member name="T:IFoxCAD.Cad.EntityBoundingInfo">
            <summary>
            获取实体包围盒信息方法
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.EntityBoundingInfo.GetBoundingInfo(Autodesk.AutoCAD.DatabaseServices.Extents3d)">
            <summary>
            获取包围盒信息
            </summary>
            <param name="ext">包围盒</param>
            <returns>包围盒信息</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EntityBoundingInfo.GetMTextBox(Autodesk.AutoCAD.DatabaseServices.MText)">
            <summary>
            获取多行文本的正交包围盒
            </summary>
            <param name="mText">多行文本</param>
            <returns>包围盒</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EntityBoundingInfo.GetBlockBox(Autodesk.AutoCAD.DatabaseServices.Entity,Autodesk.AutoCAD.DatabaseServices.Extents3d@,Autodesk.AutoCAD.Geometry.Matrix3d@)">
            <summary>
            获取块的包围盒
            </summary>
            <param name="en">实体</param>
            <param name="ext"></param>
            <param name="mat"></param>
        </member>
        <member name="M:IFoxCAD.Cad.EntityBoundingInfo.GetMTextBoxCorners(Autodesk.AutoCAD.DatabaseServices.MText)">
            <summary>
            获取多行文字最小包围盒4点坐标
            </summary>
            <param name="mtext">多行文本</param>
            <returns>最小包围盒4点坐标</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EntityBoundingInfo.GetEntityBoxEx(Autodesk.AutoCAD.DatabaseServices.Entity)">
            <summary>
            获取实体包围盒
            </summary>
            <param name="ent">实体</param>
            <returns>包围盒</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EntityBoundingInfo.IsEmptyExt(Autodesk.AutoCAD.DatabaseServices.Extents3d)">
            <summary>
            判断包围盒是否有效
            </summary>
            <param name="ext">包围盒</param>
            <returns></returns>
        </member>
        <member name="T:IFoxCAD.Cad.EntityEx">
            <summary>
            实体图元扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.EntityEx.Move(Autodesk.AutoCAD.DatabaseServices.Entity,Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            移动实体
            </summary>
            <param name="ent">实体</param>
            <param name="from">基点</param>
            <param name="to">目标点</param>
        </member>
        <member name="M:IFoxCAD.Cad.EntityEx.Move(Autodesk.AutoCAD.DatabaseServices.Entity,Autodesk.AutoCAD.Geometry.Vector3d)">
            <summary>
            移动实体
            </summary>
            <param name="ent">实体</param>
            <param name="vector">向量</param>
        </member>
        <member name="M:IFoxCAD.Cad.EntityEx.Scale(Autodesk.AutoCAD.DatabaseServices.Entity,Autodesk.AutoCAD.Geometry.Point3d,System.Double)">
            <summary>
            缩放实体
            </summary>
            <param name="ent">实体</param>
            <param name="center">缩放基点坐标</param>
            <param name="scaleValue">缩放比例</param>
        </member>
        <member name="M:IFoxCAD.Cad.EntityEx.Rotation(Autodesk.AutoCAD.DatabaseServices.Entity,Autodesk.AutoCAD.Geometry.Point3d,System.Double,Autodesk.AutoCAD.Geometry.Vector3d)">
            <summary>
            旋转实体
            </summary>
            <param name="ent">实体</param>
            <param name="center">旋转中心</param>
            <param name="angle">转角，弧度制，正数为顺时针</param>
            <param name="normal">旋转平面的法向矢量</param>
        </member>
        <member name="M:IFoxCAD.Cad.EntityEx.Rotation(Autodesk.AutoCAD.DatabaseServices.Entity,Autodesk.AutoCAD.Geometry.Point3d,System.Double)">
            <summary>
            在XY平面内旋转实体
            </summary>
            <param name="ent">实体</param>
            <param name="center">旋转中心</param>
            <param name="angle">转角，弧度制，正数为顺时针</param>
        </member>
        <member name="M:IFoxCAD.Cad.EntityEx.Mirror(Autodesk.AutoCAD.DatabaseServices.Entity,Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            按对称轴镜像实体
            </summary>
            <param name="ent">实体</param>
            <param name="startPoint">对称轴起点</param>
            <param name="endPoint">对称轴终点</param>
        </member>
        <member name="M:IFoxCAD.Cad.EntityEx.Mirror(Autodesk.AutoCAD.DatabaseServices.Entity,Autodesk.AutoCAD.Geometry.Plane)">
            <summary>
            按对称面镜像实体
            </summary>
            <param name="ent">实体</param>
            <param name="plane">对称平面</param>
        </member>
        <member name="M:IFoxCAD.Cad.EntityEx.Mirror(Autodesk.AutoCAD.DatabaseServices.Entity,Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            按对称点镜像实体
            </summary>
            <param name="ent">实体</param>
            <param name="basePoint">对称点</param>
        </member>
        <member name="M:IFoxCAD.Cad.EntityEx.GetExtents(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.Entity})">
            <summary>
            获取实体集合的范围
            </summary>
            <param name="ents">实体迭代器</param>
            <returns>实体集合的范围</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EntityEx.GetBoundingBoxEx(Autodesk.AutoCAD.DatabaseServices.Entity)">
            <summary>
            获取图元包围盒
            </summary>
            <param name="ent"></param>
            <returns>包围盒信息</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EntityEx.GetStretchPoints(Autodesk.AutoCAD.DatabaseServices.Entity)">
            <summary>
            获取拉伸点
            </summary>
            <param name="ent">实体</param>
            <returns>点集</returns>
        </member>
        <member name="T:IFoxCAD.Cad.MTextEx">
            <summary>
            多行文字扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.MTextEx.CreateMText(Autodesk.AutoCAD.Geometry.Point3d,System.String,System.Double,Autodesk.AutoCAD.DatabaseServices.Database,System.Action{Autodesk.AutoCAD.DatabaseServices.MText})">
            <summary>
            创建多行文字
            </summary>
            <param name="position">插入点</param>
            <param name="text">文本内容</param>
            <param name="height">文字高度</param>
            <param name="database">文字所在的数据库</param>
            <param name="action">文字属性设置委托</param>
            <returns>文字对象id</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:IFoxCAD.Cad.MTextEx.ExplodeFragments``1(Autodesk.AutoCAD.DatabaseServices.MText,``0,System.Func{Autodesk.AutoCAD.DatabaseServices.MTextFragment,``0,Autodesk.AutoCAD.DatabaseServices.MTextFragmentCallbackStatus})">
            <summary>
            炸散多行文字
            </summary>
            <typeparam name="T">存储多行文字炸散之后的对象的类型</typeparam>
            <param name="mt">多行文字</param>
            <param name="obj">存储对象变量</param>
            <param name="mTextFragmentCallback">回调函数，用于处理炸散之后的对象
            <para>
            <see cref="T:Autodesk.AutoCAD.DatabaseServices.MTextFragment"/>多行文字炸散后的对象<br/>
            <see cref="T:Autodesk.AutoCAD.DatabaseServices.MTextFragmentCallbackStatus"/>回调函数处理的结果
            </para>
            </param>
        </member>
        <member name="M:IFoxCAD.Cad.MTextEx.GetUnFormatString(Autodesk.AutoCAD.DatabaseServices.MText)">
            <summary>
            获取多行文字的无格式文本
            </summary>
            <param name="mt">多行文字</param>
            <returns>文本</returns>
        </member>
        <member name="T:IFoxCAD.Cad.PolylineEx">
            <summary>
            多段线扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PolylineEx.GetPoints(Autodesk.AutoCAD.DatabaseServices.Polyline2d)">
            <summary>
            获取二维多段线的端点坐标
            </summary>
            <param name="pl2d">二维多段线</param>
            <returns>端点坐标集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PolylineEx.GetPoints(Autodesk.AutoCAD.DatabaseServices.Polyline3d)">
            <summary>
            获取三维多段线的端点坐标
            </summary>
            <param name="pl3d">三维多段线</param>
            <returns>端点坐标集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PolylineEx.GetPoints(Autodesk.AutoCAD.DatabaseServices.Polyline)">
            <summary>
            获取多段线的端点坐标
            </summary>
            <param name="pl">多段线</param>
            <returns>端点坐标集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PolylineEx.CreatePolyline(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point3d},System.Action{Autodesk.AutoCAD.DatabaseServices.Polyline})">
            <summary>
            根据点集创建多段线<br/>
            此多段线无默认全局宽度0，无圆弧段
            </summary>
            <param name="points">点集</param>
            <param name="action">多段线属性设置委托</param>
            <returns>多段线对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PolylineEx.CreatePolyline(System.Collections.Generic.IEnumerable{System.ValueTuple{Autodesk.AutoCAD.Geometry.Point3d,System.Double,System.Double,System.Double}},System.Action{Autodesk.AutoCAD.DatabaseServices.Polyline})">
            <summary>
            根据点集创建多段线
            </summary>
            <param name="pts">端点表,利用元组(Point3d pt, double bulge, double startWidth, double endWidth)</param>
            <param name="action">轻多段线属性设置委托</param>
            <returns>轻多段线对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PolylineEx.CreatePolyline(Autodesk.AutoCAD.DatabaseServices.Extents3d,System.Action{Autodesk.AutoCAD.DatabaseServices.Polyline})">
            <summary>
            根据Extents3d创建多段线<br/>
            此多段线无默认全局宽度0，无圆弧段，标高为0
            </summary>
            <param name="points">Extents3d</param>
            <param name="action">多段线属性设置委托</param>
            <returns>多段线对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PolylineEx.ToPolyline(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point2d},System.Double,System.Boolean)">
            <summary>
            点表生成多段线
            </summary>
            <param name="pointList">点表</param>
            <param name="plineWidth">线宽</param>
            <param name="closed">是否闭合</param>
            <returns>Polyline</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PolylineEx.ToPolyline(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point3d},System.Double,System.Boolean)">
            <summary>
            点表生成多段线
            </summary>
            <param name="pointList">点表</param>
            <param name="plineWidth">线宽</param>
            <param name="closed">是否闭合</param>
            <returns>Polyline</returns>
        </member>
        <member name="T:IFoxCAD.Cad.RegionEx">
            <summary>
            面域扩展
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.RegionEx.ToCurves(Autodesk.AutoCAD.DatabaseServices.Region)">
            <summary>
            面域转曲线
            </summary>
            <param name="region">面域</param>
            <returns>曲线集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.RegionEx.ToOrderedArray(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Curve3d})">
            <summary>
            按首尾相连对曲线集合进行排序
            </summary>
            <param name="source"></param>
            <returns>曲线列表</returns>
            <exception cref="T:System.ArgumentException">当不能首尾相连时会抛出此异常</exception>
        </member>
        <member name="T:IFoxCAD.Cad.PathConverterModes">
            <summary>
            参照路径转换
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PathConverterModes.Relative">
            <summary>
            相对路径
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PathConverterModes.Complete">
            <summary>
            绝对路径
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.XrefModes">
            <summary>
            参照绑定
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.XrefModes.Unload">
            <summary>
            卸载
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.XrefModes.Reload">
            <summary>
            重载
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.XrefModes.Detach">
            <summary>
            拆离
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.XrefModes.Bind">
            <summary>
            绑定
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.SymModes">
            <summary>
            符号表模式
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.SymModes.BlockTable">
            <summary>
            块表
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.SymModes.LayerTable">
            <summary>
            图层表
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.SymModes.TextStyleTable">
            <summary>
            文字样式表
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.SymModes.RegAppTable">
            <summary>
            注册应用程序表
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.SymModes.DimStyleTable">
            <summary>
            标注样式表
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.SymModes.LinetypeTable">
            <summary>
            线型表
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.SymModes.Option1">
            <summary>
            图层|字体|标注|线型|应用
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.SymModes.UcsTable">
            <summary>
            用户坐标系表
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.SymModes.ViewTable">
            <summary>
            视图表
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.SymModes.ViewportTable">
            <summary>
            视口表
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.SymModes.Option2">
            <summary>
            坐标|视口|视图
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.SymModes.All">
            <summary>
            全部
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.CoordinateSystemCode">
            <summary>
            坐标系类型枚举
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.CoordinateSystemCode.Wcs">
            <summary>
            世界坐标系
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.CoordinateSystemCode.Ucs">
            <summary>
            用户坐标系
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.CoordinateSystemCode.MDcs">
            <summary>
            模型空间坐标系
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.CoordinateSystemCode.PDcs">
            <summary>
            图纸空间坐标系
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.OrientationType">
            <summary>
            方向的枚举
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.OrientationType.CounterClockWise">
            <summary>
            左转或逆时针
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.OrientationType.ClockWise">
            <summary>
            右转或顺时针
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.OrientationType.Parallel">
            <summary>
            重合或平行
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.PointOnRegionType">
            <summary>
            点与多边形的关系类型枚举
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PointOnRegionType.Inside">
            <summary>
            多边形内部
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PointOnRegionType.On">
            <summary>
            多边形上
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PointOnRegionType.Outside">
            <summary>
            多边形外
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PointOnRegionType.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.FontTTF">
            <summary>
            ttf字体枚举
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.FontTTF.宋体">
            <summary>
            宋体
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.FontTTF.仿宋">
            <summary>
            仿宋
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.FontTTF.仿宋GB2312">
            <summary>
            仿宋GB2312
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.FontTTF.Arial">
            <summary>
            Arial
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.FontTTF.Romans">
            <summary>
            Romans
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.ErrorInfoEx">
            <summary>
            CAD错误大全
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.ErrorInfoEx.AcErrorInfo(Autodesk.AutoCAD.Runtime.Exception)">
            <summary>
            打印CAD错误信息到命令行
            <code>使用方法：
            try
            {
                //你的代码
            }
            catch (AcException acex) { acex.AcErrorInfo(); }
            catch (Exception) { throw; }
            </code>
            </summary>
            <param name="acex">AcException</param>
        </member>
        <member name="T:IFoxCAD.Cad.Curve2dEx">
            <summary>
            二维解析类曲线转换为二维实体曲线扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.Curve2dEx.ToCurve(Autodesk.AutoCAD.Geometry.Curve2d,Autodesk.AutoCAD.Geometry.Matrix3d)">
            <summary>
            按矩阵转换Ge2d曲线为Db曲线
            </summary>
            <param name="curve">Ge2d曲线</param>
            <param name="mat">曲线转换矩阵</param>
            <returns>Db曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve2dEx.IsIn(Autodesk.AutoCAD.Geometry.CircularArc2d,Autodesk.AutoCAD.Geometry.Point2d)">
            <summary>
            判断点是否位于圆内及圆上
            </summary>
            <param name="ca2d">二维解析类圆弧对象</param>
            <param name="pnt">二维点</param>
            <returns>位于圆内及圆上返回 <see langword="true"/>,反之返回 <see langword="false"/></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve2dEx.ToCurve(Autodesk.AutoCAD.Geometry.CircularArc2d,Autodesk.AutoCAD.Geometry.Matrix3d)">
            <summary>
            将二维解析类圆弧转换为实体圆或者圆弧，然后进行矩阵变换
            </summary>
            <param name="ca2d">二维解析类圆弧对象</param>
            <param name="mat">变换矩阵</param>
            <returns>实体圆或者圆弧</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve2dEx.ToCurve(Autodesk.AutoCAD.Geometry.CircularArc2d)">
            <summary>
            将二维解析类圆弧转换为实体圆或者圆弧
            </summary>
            <param name="ca2d">二维解析类圆弧对象</param>
            <returns>实体圆或者圆弧</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve2dEx.ToCircle(Autodesk.AutoCAD.Geometry.CircularArc2d)">
            <summary>
            将二维解析类圆弧转换为实体圆
            </summary>
            <param name="c2d">二维解析类圆弧对象</param>
            <returns>实体圆</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve2dEx.ToArc(Autodesk.AutoCAD.Geometry.CircularArc2d)">
            <summary>
            将二维解析类圆弧转换为实体圆弧
            </summary>
            <param name="a2d">二维解析类圆弧对象</param>
            <returns>圆弧</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve2dEx.ToCurve(Autodesk.AutoCAD.Geometry.EllipticalArc2d,Autodesk.AutoCAD.Geometry.Matrix3d)">
            <summary>
            将二维解析类椭圆弧转换为实体椭圆弧，然后进行矩阵变换
            </summary>
            <param name="ea2d">二维解析类椭圆弧对象</param>
            <param name="mat">变换矩阵</param>
            <returns>实体椭圆弧</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve2dEx.ToCurve(Autodesk.AutoCAD.Geometry.EllipticalArc2d)">
            <summary>
            将二维解析类椭圆弧转换为实体椭圆弧
            </summary>
            <param name="ea2d">二维解析类椭圆弧对象</param>
            <returns>实体椭圆弧</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve2dEx.ToCurve(Autodesk.AutoCAD.Geometry.Line2d)">
            <summary>
            将二维解析类直线转换为实体类构造线
            </summary>
            <param name="line2d">二维解析类直线</param>
            <returns>实体类构造线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve2dEx.ToCurve(Autodesk.AutoCAD.Geometry.Line2d,Autodesk.AutoCAD.Geometry.Matrix3d)">
            <summary>
            将二维解析类直线转换为实体类构造线，然后进行矩阵变换
            </summary>
            <param name="line2d">二维解析类直线</param>
            <param name="mat">变换矩阵</param>
            <returns>实体类构造线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve2dEx.ToLineSegment2d(Autodesk.AutoCAD.Geometry.Line2d,System.Double,System.Double)">
            <summary>
            将二维解析类构造线转换为二维解析类线段
            </summary>
            <param name="line2d">二维解析类构造线</param>
            <param name="fromParameter">起点参数</param>
            <param name="toParameter">终点参数</param>
            <returns>二维解析类线段</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve2dEx.ToCurve(Autodesk.AutoCAD.Geometry.LineSegment2d,Autodesk.AutoCAD.Geometry.Matrix3d)">
            <summary>
            将二维解析类线段转换为实体类直线，并进行矩阵变换
            </summary>
            <param name="ls2d">二维解析类线段</param>
            <param name="mat">变换矩阵</param>
            <returns>实体类直线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve2dEx.ToCurve(Autodesk.AutoCAD.Geometry.LineSegment2d)">
            <summary>
            将二维解析类线段转换为实体类直线
            </summary>
            <param name="ls2d">二维解析类线段</param>
            <returns>实体类直线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve2dEx.ToCurve(Autodesk.AutoCAD.Geometry.NurbCurve2d,Autodesk.AutoCAD.Geometry.Matrix3d)">
            <summary>
            将二维解析类NURB曲线转换为实体类样条曲线，并进行矩阵变换
            </summary>
            <param name="nc2d">二维解析类NURB曲线</param>
            <param name="mat">变换矩阵</param>
            <returns>实体类样条曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve2dEx.ToCurve(Autodesk.AutoCAD.Geometry.NurbCurve2d)">
            <summary>
            将二维解析类NURB曲线转换为实体类样条曲线
            </summary>
            <param name="nc2d">二维解析类NURB曲线</param>
            <returns>实体类样条曲线</returns>
        </member>
        <member name="T:IFoxCAD.Cad.Curve3dEx">
            <summary>
            三维解析类曲线转换为三维实体曲线扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.IsEqualPoint(Autodesk.AutoCAD.Geometry.Tolerance,System.Double,System.Double)">
            <summary>
            判断两个浮点数是否相等
            </summary>
            <param name="tol">容差</param>
            <param name="d1">第一个数</param>
            <param name="d2">第二个数</param>
            <returns>两个数的差值的绝对值小于容差返回 <see langword="true"/>,反之返回 <see langword="false"/></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.GetParamsAtIntersectionPoints(Autodesk.AutoCAD.Geometry.Curve3d,System.Boolean)">
            <summary>
            获取三维解析类曲线(自交曲线)的交点参数
            </summary>
            <param name="c3d">三维解析类曲线</param>
            <param name="sort">是否排序</param>
            <returns>曲线参数的列表</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.GetSubCurve(Autodesk.AutoCAD.Geometry.Curve3d,System.Double,System.Double)">
            <summary>
            获取三维解析类子曲线
            </summary>
            <param name="curve">三维解析类曲线</param>
            <param name="from">子段曲线起点参数</param>
            <param name="to">子段曲线终点参数</param>
            <returns>三维解析类曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.ToCurve(Autodesk.AutoCAD.Geometry.Curve3d)">
            <summary>
            将三维解析类曲线转换为三维实体类曲线
            </summary>
            <param name="curve">三维解析类曲线</param>
            <returns>三维实体类曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.ToNurbCurve3d(Autodesk.AutoCAD.Geometry.Curve3d)">
            <summary>
            将三维解析类曲线转换为三维解析类Nurb曲线
            </summary>
            <param name="curve">三维解析类曲线</param>
            <returns>三维解析类Nurb曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.IsCircular(Autodesk.AutoCAD.Geometry.Curve3d)">
            <summary>
            判断是否为圆和椭圆
            </summary>
            <param name="curve">三维解析类曲线</param>
            <returns>完整圆及完整的椭圆返回 <see langword="true"/>,反之返回 <see langword="false"/></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.GetSplitCurves(Autodesk.AutoCAD.Geometry.CompositeCurve3d,System.Collections.Generic.List{System.Double})">
            <summary>
            将三维复合曲线按曲线参数分割
            </summary>
            <param name="c3d">三维复合曲线</param>
            <param name="pars">曲线参数列表</param>
            <returns>三维复合曲线列表</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.ToCurve(Autodesk.AutoCAD.Geometry.CompositeCurve3d)">
            <summary>
            将复合曲线转换为实体类曲线
            </summary>
            <param name="curve">三维复合曲线</param>
            <returns>实体曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.ToPolyline(Autodesk.AutoCAD.Geometry.CompositeCurve3d)">
            <summary>
            将三维复合曲线转换为实体类多段线
            </summary>
            <param name="cc3d">三维复合曲线</param>
            <returns>实体类多段线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.ToCurve(Autodesk.AutoCAD.Geometry.Line3d)">
            <summary>
            将解析类三维构造线转换为实体类构造线
            </summary>
            <param name="line3d">解析类三维构造线</param>
            <returns>实体类构造线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.ToLineSegment3d(Autodesk.AutoCAD.Geometry.Line3d,System.Double,System.Double)">
            <summary>
            将三维解析类构造线转换为三维解析类线段
            </summary>
            <param name="line3d">三维解析类构造线</param>
            <param name="fromParameter">起点参数</param>
            <param name="toParameter">终点参数</param>
            <returns>三维解析类线段</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.ToCurve(Autodesk.AutoCAD.Geometry.LineSegment3d)">
            <summary>
            将三维解析类线段转换为实体类直线
            </summary>
            <param name="lineSeg3d">三维解析类线段</param>
            <returns>实体类直线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.ToCurve(Autodesk.AutoCAD.Geometry.CircularArc3d)">
            <summary>
            将三维解析类圆/弧转换为实体圆/弧
            </summary>
            <param name="ca3d">三维解析类圆/弧</param>
            <returns>实体圆/弧</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.ToCircle(Autodesk.AutoCAD.Geometry.CircularArc3d)">
            <summary>
            将三维解析类圆/弧转换为实体圆
            </summary>
            <param name="ca3d">三维解析类圆/弧</param>
            <returns>实体圆</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.ToArc(Autodesk.AutoCAD.Geometry.CircularArc3d)">
            <summary>
            将三维解析类圆/弧转换为实体圆弧
            </summary>
            <param name="ca3d">三维解析类圆/弧</param>
            <returns>实体圆弧</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.ToEllipticalArc3d(Autodesk.AutoCAD.Geometry.CircularArc3d)">
            <summary>
            将三维解析类圆/弧转换为三维解析类椭圆弧
            </summary>
            <param name="ca3d">三维解析类圆/弧</param>
            <returns>三维解析类椭圆弧</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.ToNurbCurve3d(Autodesk.AutoCAD.Geometry.CircularArc3d)">
            <summary>
            将三维解析类圆/弧转换为三维解析类Nurb曲线
            </summary>
            <param name="ca3d">三维解析类圆/弧</param>
            <returns>三维解析类Nurb曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.ToCurve(Autodesk.AutoCAD.Geometry.EllipticalArc3d)">
            <summary>
            将三维解析类椭圆弧转换为实体类椭圆弧
            </summary>
            <param name="ea3d">三维解析类椭圆弧</param>
            <returns>实体类椭圆弧</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.ToCurve(Autodesk.AutoCAD.Geometry.NurbCurve3d)">
            <summary>
            将三维解析类Nurb曲线转换为实体类样条曲线
            </summary>
            <param name="nc3d">三维解析类Nurb曲线</param>
            <returns>实体类样条曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.ToCurve(Autodesk.AutoCAD.Geometry.PolylineCurve3d)">
            <summary>
            将三维解析类多段线转换为实体类三维多段线
            </summary>
            <param name="pl3d">三维解析类多段线</param>
            <returns>实体类三维多段线</returns>
        </member>
        <member name="T:IFoxCAD.Cad.GeometryEx">
            <summary>
            图形扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.PointOnRegion(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point2d},Autodesk.AutoCAD.Geometry.Point2d)">
            <summary>
            判断点与多边形的关系
            </summary>
            <param name="pts">多边形顶点集合</param>
            <param name="pt">点</param>
            <returns>点与多边形的关系</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.PointOnRegion(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point3d},Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            判断点与多边形的关系
            </summary>
            <param name="pts">多边形顶点集合</param>
            <param name="pt">点</param>
            <returns>点与多边形的关系</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.GetMinCircle(Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,IFoxCAD.Basal.LoopList{Autodesk.AutoCAD.Geometry.Point2d}@)">
            <summary>
            按两点返回最小包围圆
            </summary>
            <param name="pt1">基准点</param>
            <param name="pt2">基准点</param>
            <param name="ptlst">输出圆上的点</param>
            <returns>解析类圆对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.GetMinCircle(Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,IFoxCAD.Basal.LoopList{Autodesk.AutoCAD.Geometry.Point2d}@)">
            <summary>
            按三点返回最小包围圆
            </summary>
            <param name="pt1">基准点</param>
            <param name="pt2">基准点</param>
            <param name="pt3">基准点</param>
            <param name="ptlst">输出圆上的点</param>
            <returns>解析类圆对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.GetMinCircle(Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,IFoxCAD.Basal.LoopList{Autodesk.AutoCAD.Geometry.Point2d}@)">
            <summary>
            按四点返回最小包围圆
            </summary>
            <param name="pt1">基准点</param>
            <param name="pt2">基准点</param>
            <param name="pt3">基准点</param>
            <param name="pt4">基准点</param>
            <param name="ptlst">输出圆上的点</param>
            <returns>解析类圆对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.CalArea(Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d)">
            <summary>
            计算三点围成的有向面积
            </summary>
            <param name="ptBase">基准点</param>
            <param name="pt1">第一点</param>
            <param name="pt2">第二点</param>
            <returns>三点围成的三角形的有向面积</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.GetArea(Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d)">
            <summary>
            计算三点围成的三角形的真实面积
            </summary>
            <param name="ptBase">基准点</param>
            <param name="pt1">第一点</param>
            <param name="pt2">第二点</param>
            <returns>三点围成的三角形的真实面积</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.IsClockWise(Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d)">
            <summary>
            判断三点是否为逆时针，也就是说判断三点是否为左转
            </summary>
            <param name="ptBase">基点</param>
            <param name="pt1">第一点</param>
            <param name="pt2">第二点</param>
            <returns>OrientationType 类型值</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.CalArea(Autodesk.AutoCAD.Geometry.Vector2d,Autodesk.AutoCAD.Geometry.Vector2d)">
            <summary>
            计算两个二维向量围成的平行四边形的有向面积
            </summary>
            <param name="vecBase">基向量</param>
            <param name="vec">向量</param>
            <returns>有向面积</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.GetArea(Autodesk.AutoCAD.Geometry.Vector2d,Autodesk.AutoCAD.Geometry.Vector2d)">
            <summary>
            计算两个二维向量围成的平行四边形的真实面积
            </summary>
            <param name="vecBase">基向量</param>
            <param name="vec">向量</param>
            <returns>真实面积</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.IsClockWise(Autodesk.AutoCAD.Geometry.Vector2d,Autodesk.AutoCAD.Geometry.Vector2d)">
            <summary>
            判断两个二维向量是否左转
            </summary>
            <param name="vecBase">基向量</param>
            <param name="vec">向量</param>
            <returns>OrientationType 类型值</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.CalArea(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point2d})">
            <summary>
            计算点集的有向面积
            </summary>
            <param name="pnts">点集</param>
            <returns>有向面积</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.GetArea(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point2d})">
            <summary>
            计算点集的真实面积
            </summary>
            <param name="pnts">点集</param>
            <returns>面积</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.IsClockWise(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point2d})">
            <summary>
            判断点集的点序
            </summary>
            <param name="pnts">点集</param>
            <returns>OrientationType 类型值</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.GetMinCircle(System.Collections.Generic.List{Autodesk.AutoCAD.Geometry.Point2d},IFoxCAD.Basal.LoopList{Autodesk.AutoCAD.Geometry.Point2d}@)">
            <summary>
            按点集返回最小包围圆
            </summary>
            <param name="pnts">点集</param>
            <param name="ptlst">输出圆上的点</param>
            <returns>解析类圆对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.Cross(Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d)">
            <summary>
            叉积,二维叉乘计算
            </summary>
            <param name="o">原点</param>
            <param name="a">oa向量</param>
            <param name="b">ob向量,此为判断点</param>
            <returns>返回值有正负,表示绕原点四象限的位置变换,也就是有向面积</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.ConvexHull(System.Collections.Generic.List{Autodesk.AutoCAD.Geometry.Point2d})">
            <summary>
            获取点集的凸包
            </summary>
            <param name="points">点集</param>
            <returns>凸包</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.Ucs2Wcs(Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            ucs到wcs的点变换
            </summary>
            <param name="point">点</param>
            <returns>变换后的点</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.Wcs2Ucs(Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            wcs到ucs的点变换
            </summary>
            <param name="point">点</param>
            <returns>变换后的点</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.Ucs2Wcs(Autodesk.AutoCAD.Geometry.Vector3d)">
            <summary>
            ucs到wcs的向量变换
            </summary>
            <param name="vec">向量</param>
            <returns>变换后的向量</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.Wcs2Ucs(Autodesk.AutoCAD.Geometry.Vector3d)">
            <summary>
            wcs到ucs的向量变换
            </summary>
            <param name="vec">向量</param>
            <returns>变换后的向量</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.Trans(Autodesk.AutoCAD.Geometry.Point3d,IFoxCAD.Cad.CoordinateSystemCode,IFoxCAD.Cad.CoordinateSystemCode)">
            <summary>
            模拟 trans 函数
            </summary>
            <param name="point">点</param>
            <param name="from">源坐标系</param>
            <param name="to">目标坐标系</param>
            <returns>变换后的点</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.Trans(Autodesk.AutoCAD.Geometry.Vector3d,IFoxCAD.Cad.CoordinateSystemCode,IFoxCAD.Cad.CoordinateSystemCode)">
            <summary>
            模拟 trans 函数
            </summary>
            <param name="vec">向量</param>
            <param name="from">源坐标系</param>
            <param name="to">目标坐标系</param>
            <returns>变换后的向量</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.Wcs2Dcs(Autodesk.AutoCAD.Geometry.Point3d,System.Boolean)">
            <summary>
            wcs到dcs的点变换
            </summary>
            <param name="point">点</param>
            <param name="atPaperSpace">是否为图纸空间</param>
            <returns>变换后的点</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.Wcs2Dcs(Autodesk.AutoCAD.Geometry.Vector3d,System.Boolean)">
            <summary>
            wcs到dcs的向量变换
            </summary>
            <param name="vec">向量</param>
            <param name="atPaperSpace">是否为图纸空间</param>
            <returns>变换后的向量</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.GetScaleMatrix(Autodesk.AutoCAD.Geometry.Point3d,System.Double,System.Double,System.Double)">
            <summary>
            返回不等比例变换矩阵
            </summary>
            <param name="point">基点</param>
            <param name="x">x方向比例</param>
            <param name="y">y方向比例</param>
            <param name="z">z方向比例</param>
            <returns>三维矩阵</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.GetSize(Autodesk.AutoCAD.DatabaseServices.Extents3d)">
            <summary>
            获取坐标范围的大小
            </summary>
            <param name="ext">坐标范围</param>
            <returns>尺寸对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.Draw(Autodesk.AutoCAD.GraphicsInterface.Geometry,System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.GraphicsInterface.Drawable})">
            <summary>
            重绘
            </summary>
            <param name="geometry">图形界面几何</param>
            <param name="drawables">可绘制的对象列表</param>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.Draw(Autodesk.AutoCAD.GraphicsInterface.Geometry,Autodesk.AutoCAD.GraphicsInterface.Drawable[])">
            <summary>
            重绘
            </summary>
            <param name="geometry">图形界面几何</param>
            <param name="drawables">可绘制的对象列表</param>
        </member>
        <member name="T:IFoxCAD.Cad.VectorEx">
            <summary>
            向量扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.VectorEx.Convert2d(Autodesk.AutoCAD.Geometry.Vector3d)">
            <summary>
            转换为2d向量
            </summary>
            <param name="vector3d">3d向量</param>
            <returns>2d向量</returns>
        </member>
        <member name="M:IFoxCAD.Cad.VectorEx.Convert3d(Autodesk.AutoCAD.Geometry.Vector2d,System.Double)">
            <summary>
            转换为3d向量
            </summary>
            <param name="vector2d">2d向量</param>
            <param name="z">z值</param>
            <returns>3d向量</returns>
        </member>
        <member name="M:IFoxCAD.Cad.VectorEx.Cross2d(Autodesk.AutoCAD.Geometry.Vector3d,Autodesk.AutoCAD.Geometry.Vector3d)">
            <summary>
            2d叉乘
            </summary>
            <param name="a">向量a</param>
            <param name="b">向量b</param>
            <returns>叉乘值</returns>
        </member>
        <member name="M:IFoxCAD.Cad.VectorEx.Cross2d(Autodesk.AutoCAD.Geometry.Vector2d,Autodesk.AutoCAD.Geometry.Vector2d)">
            <summary>
            2d叉乘
            </summary>
            <param name="a">向量a</param>
            <param name="b">向量b</param>
            <returns>叉乘值</returns>
        </member>
        <member name="M:IFoxCAD.Cad.VectorEx.Z20(Autodesk.AutoCAD.Geometry.Vector3d)">
            <summary>
            向量Z值归零
            </summary>
            <param name="vector3d">向量</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.VectorEx.AngleOnPlane(Autodesk.AutoCAD.Geometry.Vector3d,Autodesk.AutoCAD.Geometry.Plane)">
            <summary>
            向量在平面上的弧度
            </summary>
            <param name="vector">向量</param>
            <param name="plane">平面</param>
            <returns>弧度</returns>
        </member>
        <member name="T:IFoxCAD.Cad.PlaneEx">
            <summary>
            平面
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PlaneEx.X">
            <summary>
            X
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PlaneEx.Y">
            <summary>
            Y
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PlaneEx.Z">
            <summary>
            Z
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.PointEx">
            <summary>
            点
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.GetHashString(Autodesk.AutoCAD.Geometry.Point3d,System.Int32,System.Int32)">
            <summary>
            获取点的hash字符串，同时可以作为pt的字符串表示
            </summary>
            <param name="pt">点</param>
            <param name="xyz">指示计算几维坐标的标志，1为计算x，2为计算x，y，其他为计算x，y，z</param>
            <param name="decimalRetain">保留的小数位数</param>
            <returns>hash字符串</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.GetAngle(Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d,System.Nullable{Autodesk.AutoCAD.Geometry.Vector3d})">
            <summary>
            两点计算弧度范围0到2Pi
            </summary>
            <param name="startPoint">起点</param>
            <param name="endPoint">终点</param>
            <param name="direction">方向</param>
            <returns>弧度值</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.GetAngle(Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d)">
            <summary>
            两点计算弧度范围0到2Pi
            </summary>
            <param name="startPoint">起点</param>
            <param name="endPoint">终点</param>
            <returns>弧度值</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.GetMidPointTo(Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d)">
            <summary>
            获取中点
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.GetMidPointTo(Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            获取两个点之间的中点
            </summary>
            <param name="pt1">第一点</param>
            <param name="pt2">第二点</param>
            <returns>返回两个点之间的中点</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.Z20(Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            Z值归零
            </summary>
            <param name="point">点</param>
            <returns>新点</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.Point2d(Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            将三维点转换为二维点
            </summary>
            <param name="pt">三维点</param>
            <returns>二维点</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.Point2d(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point3d})">
            <summary>
            将三维点集转换为二维点集
            </summary>
            <param name="pts">三维点集</param>
            <returns>二维点集</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.Point3d(Autodesk.AutoCAD.Geometry.Point2d,System.Double)">
            <summary>
            将二维点转换为三维点
            </summary>
            <param name="pt">二维点</param>
            <param name="z">Z值</param>
            <returns>三维点</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.OrthoProject(Autodesk.AutoCAD.Geometry.Point3d,System.Double)">
            <summary>
            投影到指定Z值
            </summary>
            <param name="pt">点</param>
            <param name="z">新z值</param>
            <returns>投影后的坐标</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.TransPoint(Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d,System.Double)">
            <summary>
            根据世界坐标计算用户坐标
            </summary>
            <param name="basePt">基点世界坐标</param>
            <param name="userPt">基点用户坐标</param>
            <param name="transPt">目标世界坐标</param>
            <param name="ang">坐标网旋转角，按x轴正向逆时针弧度</param>
            <returns>目标用户坐标</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.Polar(Autodesk.AutoCAD.Geometry.Point3d,System.Double,System.Double)">
            <summary>
            计算指定距离和角度的点
            </summary>
            <remarks>本函数仅适用于x-y平面</remarks>
            <param name="pt">基点</param>
            <param name="ang">角度，x轴正向逆时针弧度</param>
            <param name="len">距离</param>
            <returns>目标点</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.Polar(Autodesk.AutoCAD.Geometry.Point2d,System.Double,System.Double)">
            <summary>
            计算指定距离和角度的点
            </summary>
            <remarks>本函数仅适用于x-y平面</remarks>
            <param name="pt">基点</param>
            <param name="ang">角度，x轴正向逆时针弧度</param>
            <param name="len">距离</param>
            <returns>目标点</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.GetArcBulge(Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,System.Double)">
            http://www.lee-mac.com/bulgeconversion.html
            <summary>
            求凸度,判断三点是否一条直线上
            </summary>
            <param name="arc1">圆弧起点</param>
            <param name="arc2">圆弧腰点</param>
            <param name="arc3">圆弧尾点</param>
            <param name="tol">容差</param>
            <returns>逆时针为正,顺时针为负</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.Distance2dTo(Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            求两点在Z平面的距离
            </summary>
            <param name="pt1">点1</param>
            <param name="pt2">点2</param>
            <returns>距离</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.End2End(Autodesk.AutoCAD.Geometry.Point2dCollection)">
            <summary>
            首尾相连
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.End2End(Autodesk.AutoCAD.Geometry.Point3dCollection)">
            <summary>
            首尾相连
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.GetRecPoint3ds(Autodesk.AutoCAD.DatabaseServices.Extents3d,System.Double)">
            <summary>
            获取矩形4个3d角点(左下起，正方向)
            </summary>
            <param name="extents3d">包围盒</param>
            <param name="z">z轴坐标</param>
            <returns>点表</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.GetRecPoint2ds(Autodesk.AutoCAD.DatabaseServices.Extents3d)">
            <summary>
            获取矩形4个2d角点(左下起，正方向)
            </summary>
            <param name="extents3d">包围盒</param>
            <returns>点表</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.GetRecPoint3ds(Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d,System.Double)">
            <summary>
            获取矩形4个角3d点(左下起，正方向)
            </summary>
            <param name="corner1">角1</param>
            <param name="corner2">角2</param>
            <param name="z">z轴坐标</param>
            <returns>点表</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.GetRecPoint2ds(Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,System.Double)">
            <summary>
            获取矩形4个角3d点(左下起，正方向)
            </summary>
            <param name="corner1">角1</param>
            <param name="corner2">角2</param>
            <param name="z">z轴坐标</param>
            <returns>点表</returns>
        </member>
        <member name="T:IFoxCAD.Cad.HatchDialog">
            <summary>
            填充图案选择对话框<br/>
            只是为了保持和其他Cad内置Dialog的使用一致性，并非真正的Dialog
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.HatchDialog.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.HatchDialog.Name">
            <summary>
            填充图案名称
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.HatchDialog.ShowCustom">
            <summary>
            显示自定义图案
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.HatchDialog.ShowDialog">
            <summary>
            模态显示图案选择对话框
            </summary>
            <returns>成功返回<c>true</c></returns>
        </member>
        <member name="T:IFoxCAD.Cad.WorldDrawEvent">
            <summary>
            重绘事件
            </summary>
            <param name="draw">worldDraw</param>
        </member>
        <member name="T:IFoxCAD.Cad.JigEx">
            <summary>
            jig扩展类
            </summary>
        </member>
        <member name="E:IFoxCAD.Cad.JigEx.WorldDrawEvent">
            <summary>
            事件:亮显/暗显会被刷新冲刷掉,所以这个事件用于补充非刷新的工作
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.JigEx.MousePointWcsLast">
            <summary>
            最后的鼠标点,用来确认长度
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.JigEx.Entities">
            <summary>
            最后的图元,用来生成
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.JigEx._mouseAction">
            <summary>
            鼠标移动时的委托
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.JigEx.#ctor">
            <summary>
            在界面绘制图元
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.JigEx.#ctor(System.Action{Autodesk.AutoCAD.Geometry.Point3d,System.Collections.Generic.Queue{Autodesk.AutoCAD.DatabaseServices.Entity}},System.Double)">
            <summary>
            在界面绘制图元
            </summary>
            <param name="action">
            用来频繁执行的回调:<br/>
            <see cref="T:Autodesk.AutoCAD.Geometry.Point3d"/>鼠标点;<br/>
            <see cref="T:System.Collections.Queue"/>加入新建的图元,鼠标采样期间会Dispose图元的;<br/>
            所以已经在数据库图元利用事件加入,不要在此加入;<br/>
            </param>
            <param name="tolerance">鼠标移动的容差</param>
        </member>
        <member name="F:IFoxCAD.Cad.JigEx.lastIsKw">
            <summary>
            因为是worldDraw触发sampler不是Sample触发worldDraw，所以要记一次上次的状态
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.JigEx.Sampler(Autodesk.AutoCAD.EditorInput.JigPrompts)">
            <summary>
            鼠标采样器
            </summary>
            <param name="prompts"></param>
            <returns>返回状态:令频繁刷新结束</returns>
        </member>
        <member name="M:IFoxCAD.Cad.JigEx.DatabaseEntityDraw(IFoxCAD.Cad.WorldDrawEvent)">
            <summary>
            重绘已在数据库的图元
            <para>
            0x01 此处不加入newEntity的,它们在构造函数的参数回调处加入,它们会进行频繁new和Dispose从而避免遗忘释放<br/>
            0x02 此处用于重绘已经在数据的图元<br/>
            0x03 此处用于图元亮显暗显,因为会被重绘冲刷掉所以独立出来不重绘,它们也往往已经存在数据库的
            </para>
            </summary>
            <remarks>
            newEntity只会存在一个图元队列中,而数据库图元可以分多个集合
            <para> 例如: 集合A亮显时 集合B暗显/集合B亮显时 集合A暗显,所以我没有设计多个"数据库图元集合"存放,而是由用户在构造函数外自行创建</para>
            </remarks>
            <param name="action"></param>
        </member>
        <member name="M:IFoxCAD.Cad.JigEx.WorldDraw(Autodesk.AutoCAD.GraphicsInterface.WorldDraw)">
            <summary>
            重绘图形
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.JigEx.SetOptions(Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.EditorInput.CursorType,System.String)">
            <summary>
            鼠标配置:基点
            </summary>
            <param name="basePoint">基点</param>
            <param name="cursorType">光标绑定</param>
            <param name="msg">提示信息</param>
        </member>
        <member name="M:IFoxCAD.Cad.JigEx.SetOptions(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            鼠标配置:提示信息,关键字
            </summary>
            <param name="msg">信息</param>
            <param name="keywords">关键字</param>
            <returns>jig配置</returns>
        </member>
        <member name="M:IFoxCAD.Cad.JigEx.SetOptions(System.Action{Autodesk.AutoCAD.EditorInput.JigPromptPointOptions})">
            <summary>
            鼠标配置:自定义
            </summary>
            <param name="action">拖拽设置委托</param>
        </member>
        <member name="M:IFoxCAD.Cad.JigEx.Drag">
            <summary>
            执行
            </summary>
            <returns>交互结果</returns>
        </member>
        <member name="M:IFoxCAD.Cad.JigEx.JigPointOptions">
            <summary>
            用户输入控制默认配置
            <para>令jig.Drag().Status == <see cref="F:Autodesk.AutoCAD.EditorInput.PromptStatus.None"/></para>
            </summary>
            <returns>Jig配置</returns>
        </member>
        <member name="M:IFoxCAD.Cad.JigEx.SetSpaceIsKeyword">
            <summary>
            空格默认是<see cref="F:Autodesk.AutoCAD.EditorInput.PromptStatus.None"/>,
            <para>将它设置为<see cref="F:Autodesk.AutoCAD.EditorInput.PromptStatus.Keyword"/></para>
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.JigEx.DimensionEntities">
            <summary>
            注释数据,可以在缩放的时候不受影响
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.JigEx.GetDynamicDimensionData(System.Double)">
            <summary>
            重写注释数据
            </summary>
            <param name="dimScale"></param>
            <returns></returns>
        </member>
        <member name="P:IFoxCAD.Cad.JigEx.IsDisposed">
            <summary>
            已经销毁
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.JigEx.Dispose">
            <summary>
            手动调用释放
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.JigEx.Finalize">
            <summary>
            析构函数调用释放
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.JigEx.Dispose(System.Boolean)">
            <summary>
            销毁
            </summary>
            <param name="disposing">正常销毁</param>
        </member>
        <member name="T:IFoxCAD.Cad.JigExTransient">
            <summary>
            瞬态容器
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.JigExTransient.Entities">
            <summary>
            图元集合
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.JigExTransient.Drawables">
            <summary>
            对象集合
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.JigExTransient.Count">
            <summary>
            数量
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.JigExTransient.#ctor">
            <summary>
            瞬态容器
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.JigExTransient.Contains(Autodesk.AutoCAD.GraphicsInterface.Drawable)">
            <summary>
            判断瞬态容器里是否含有对象
            </summary>
            <param name="drawable">对象</param>
            <returns>含有返回true</returns>
        </member>
        <member name="M:IFoxCAD.Cad.JigExTransient.Add(Autodesk.AutoCAD.GraphicsInterface.Drawable,Autodesk.AutoCAD.GraphicsInterface.TransientDrawingMode)">
            <summary>
            向瞬态容器中添加对象
            </summary>
            <param name="drawable">图元</param>
            <param name="tdm">绘图模式</param>
        </member>
        <member name="M:IFoxCAD.Cad.JigExTransient.Remove(Autodesk.AutoCAD.GraphicsInterface.Drawable)">
            <summary>
            从瞬态容器中移除图元
            </summary>
            <param name="drawable">已经加入瞬态容器的图元</param>
        </member>
        <member name="M:IFoxCAD.Cad.JigExTransient.Clear">
            <summary>
            清空瞬态容器并移除图元显示
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.JigExTransient.ClearAndDisposeDrawables">
            <summary>
            清空瞬态容器并移除图元显示
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.JigExTransient.Update(Autodesk.AutoCAD.GraphicsInterface.Drawable)">
            <summary>
            更新单个显示
            </summary>
            <param name="drawable">已经加入瞬态容器的图元</param>
        </member>
        <member name="M:IFoxCAD.Cad.JigExTransient.UpdateAll">
            <summary>
            更新全部显示
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.JigExTransient.IsDisposed">
            <summary>
            是否注销
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.JigExTransient.Dispose">
            <summary>
            手动释放
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.JigExTransient.Finalize">
            <summary>
            析构函数调用释放
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.JigExTransient.Dispose(System.Boolean)">
            <summary>
            销毁瞬态容器
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.ObjectIdEx">
            <summary>
            对象id扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.ObjectIdEx.GetObject(Autodesk.AutoCAD.DatabaseServices.ObjectId,Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean)">
            <summary>
            获取指定类型对象
            </summary>
            <param name="id">对象id</param>
            <param name="openMode">打开模式</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
            <returns>指定类型对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.ObjectIdEx.GetObject``1(Autodesk.AutoCAD.DatabaseServices.ObjectId,Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean)">
            <summary>
            获取指定类型对象
            </summary>
            <typeparam name="T">指定的泛型</typeparam>
            <param name="id">对象id</param>
            <param name="openMode">打开模式</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
            <returns>指定类型对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.ObjectIdEx.GetObject``1(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.ObjectId},Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean)">
            <summary>
            获取指定类型对象集合
            </summary>
            <typeparam name="T">指定的泛型</typeparam>
            <param name="ids">对象id集合</param>
            <param name="openMode">打开模式</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
            <returns>指定类型对象集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.ObjectIdEx.GetObject``1(Autodesk.AutoCAD.DatabaseServices.ObjectIdCollection,Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean)">
            <summary>
            获取指定类型对象集合
            </summary>
            <typeparam name="T">指定的泛型</typeparam>
            <param name="ids">对象id集合</param>
            <param name="openMode">打开模式</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
            <returns>指定类型对象集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.ObjectIdEx.IsDerivedFrom``1(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.ObjectId},System.Boolean)">
            <summary>
            返回符合类型的对象id
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="ids">对象id集合</param>
            <param name="exactMatch">精确匹配</param>
            <returns>对象id集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.ObjectIdEx.GetObjectId(Autodesk.AutoCAD.DatabaseServices.Database,System.String)">
            <summary>
            根据对象句柄字符串获取对象Id
            </summary>
            <param name="db">数据库</param>
            <param name="handleString">句柄字符串</param>
            <returns>对象的ObjectId</returns>
        </member>
        <member name="M:IFoxCAD.Cad.ObjectIdEx.GetObjectId(Autodesk.AutoCAD.DatabaseServices.Database,System.Nullable{Autodesk.AutoCAD.DatabaseServices.Handle})">
            <summary>
            根据对象句柄获取对象ObjectId
            </summary>
            <param name="db">数据库</param>
            <param name="handle">句柄</param>
            <returns>对象的ObjectId</returns>
        </member>
        <member name="M:IFoxCAD.Cad.ObjectIdEx.ConvertToHandle(System.String)">
            <summary>
            句柄字符串转句柄
            </summary>
            <param name="handleString">句柄字符串</param>
            <returns>句柄</returns>
        </member>
        <member name="M:IFoxCAD.Cad.ObjectIdEx.IsOk(Autodesk.AutoCAD.DatabaseServices.ObjectId)">
            <summary>
            id是否有效,未被删除
            </summary>
            <param name="id">对象id</param>
            <returns>id有效返回 <see langword="true"/>，反之返回 <see langword="false"/></returns>
        </member>
        <member name="M:IFoxCAD.Cad.ObjectIdEx.Erase(Autodesk.AutoCAD.DatabaseServices.ObjectId)">
            <summary>
            删除id代表的对象
            </summary>
            <param name="id">对象id</param>
        </member>
        <member name="T:IFoxCAD.Cad.PaneEx">
            <summary>
            托盘类扩展
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PaneEx.SetMargin(Autodesk.AutoCAD.Windows.Pane,IFoxCAD.Cad.PaneMarginType,IFoxCAD.Cad.PaneMarginType)">
            <summary>
            设置Pane的左右边距
            </summary>
            <param name="pane">Pane</param>
            <param name="leftMarginType">左边距类型</param>
            <param name="rightMarginType">右边距类型</param>
        </member>
        <member name="M:IFoxCAD.Cad.PaneEx.SetLeftMargin(Autodesk.AutoCAD.Windows.Pane,IFoxCAD.Cad.PaneMarginType)">
            <summary>
            设置左侧的边距
            </summary>
            <param name="pane">pane</param>
            <param name="marginType">边距类型</param>
        </member>
        <member name="M:IFoxCAD.Cad.PaneEx.SetRightMargin(Autodesk.AutoCAD.Windows.Pane,IFoxCAD.Cad.PaneMarginType)">
            <summary>
            设置右侧的边距
            </summary>
            <param name="pane">pane</param>
            <param name="marginType">边距类型</param>
        </member>
        <member name="T:IFoxCAD.Cad.PaneMarginType">
            <summary>
            托盘边距类型
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PaneMarginType.NONE">
            <summary>
            无
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PaneMarginType.SMALL">
            <summary>
            小边距
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PaneMarginType.LARGE">
            <summary>
            大边距
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.PromptOptionsEx">
            <summary>
            交互设置扩展
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PromptOptionsEx.SsGetSaveKeywords">
            <summary>
            保留关键字列表
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PromptOptionsEx.AddKeywords(Autodesk.AutoCAD.EditorInput.PromptSelectionOptions,System.String[])">
            <summary>
            添加关键字(顺序为：关键字, 描述, 关键字, 描述)<br/>
            例如 <c>pso.AddKeywords("SZ", "设置", "OP", "选项")</c>
            </summary>
            <param name="pso">选择集选项</param>
            <param name="keywords">关键字</param>
        </member>
        <member name="M:IFoxCAD.Cad.PromptOptionsEx.ThrowKeywordAsException(Autodesk.AutoCAD.EditorInput.PromptSelectionOptions)">
            <summary>
            将关键视视为错误抛出
            </summary>
            <param name="pso">选择集选项</param>
        </member>
        <member name="M:IFoxCAD.Cad.PromptOptionsEx.PsoOnKeywordInput(System.Object,Autodesk.AutoCAD.EditorInput.SelectionTextInputEventArgs)">
            <summary>
            选择集关键字输入时用于抛错的事件
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.KeywordException">
            <summary>
            关键字错误
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.KeywordException.#ctor(System.String)">
            <summary>
            关键字错误
            </summary>
            <param name="input">关键字</param>
        </member>
        <member name="P:IFoxCAD.Cad.KeywordException.Input">
            <summary>
            关键字
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.BrightEntity">
            <summary>
            亮显模式
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BrightEntity.RecordGraphicsModified">
            <summary>
            块更新
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BrightEntity.RecomputeDimensionBlock">
            <summary>
            标注更新
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BrightEntity.Draw">
            <summary>
            重画
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BrightEntity.Highlight">
            <summary>
            亮显
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BrightEntity.Unhighlight">
            <summary>
            亮显取消
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BrightEntity.VisibleTrue">
            <summary>
            显示图元
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BrightEntity.VisibleFalse">
            <summary>
            隐藏图元
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BrightEntity.MoveZero">
            <summary>
            平移更新,可以令ctrl+z撤回时候保证刷新
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.BrightEditor">
            <summary>
            刷新模式
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BrightEditor.UpdateScreen">
            <summary>
            刷新屏幕,图元不生成(例如块还是旧的显示)
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BrightEditor.Regen">
            <summary>
            刷新全图
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BrightEditor.SelectionClean">
            <summary>
            清空选择集
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BrightEditor.ViewportsFrom">
            <summary>
            视口外
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BrightEditor.ViewportsIn">
            <summary>
            视口内
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.RedrawEx">
            <summary>
            重绘扩展
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.RedrawEx.Redraw(Autodesk.AutoCAD.EditorInput.Editor,Autodesk.AutoCAD.DatabaseServices.Entity)">
            <summary>
            刷新屏幕
            </summary>
            <param name="ed">编辑器</param>
            <param name="ent">图元</param>
        </member>
        <member name="M:IFoxCAD.Cad.RedrawEx.Redraw(Autodesk.AutoCAD.EditorInput.Editor,IFoxCAD.Cad.BrightEditor)">
            <summary>
            刷新屏幕
            </summary>
            <param name="ed">编辑器</param>
            <param name="bright">更新的方式</param>
        </member>
        <member name="M:IFoxCAD.Cad.RedrawEx.Redraw(Autodesk.AutoCAD.DatabaseServices.Entity,IFoxCAD.Cad.BrightEntity)">
            <summary>
            更改图元显示
            </summary>
            <param name="ent">图元,调用时候图元必须提权</param>
            <param name="bright">更新的方式</param>
        </member>
        <member name="T:IFoxCAD.Cad.SelectionSetEx">
            <summary>
            选择集扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.SelectionSetEx.GetObjectIds``1(Autodesk.AutoCAD.EditorInput.SelectionSet)">
            <summary>
            从选择集中获取对象id
            </summary>
            <typeparam name="T">图元类型</typeparam>
            <param name="ss">选择集</param>
            <returns>已选择的对象id集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SelectionSetEx.GetObjectIdGroup(Autodesk.AutoCAD.EditorInput.SelectionSet)">
            <summary>
            将选择集的对象按类型分组
            </summary>
            <param name="ss">选择集</param>
            <returns>分组后的类型/对象id集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SelectionSetEx.GetEntities``1(Autodesk.AutoCAD.EditorInput.SelectionSet,Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean)">
            <summary>
            获取指定类型图元
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="ss">选择集</param>
            <param name="openMode">打开模式</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
            <returns>图元集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SelectionSetEx.ForEach``1(Autodesk.AutoCAD.EditorInput.SelectionSet,System.Action{``0},Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean)">
            <summary>
            遍历选择集
            </summary>
            <typeparam name="T">指定图元类型</typeparam>
            <param name="ss">选择集</param>
            <param name="action">处理函数;(图元)</param>
            <param name="openMode">打开模式</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
        </member>
        <member name="M:IFoxCAD.Cad.SelectionSetEx.ForEach``1(Autodesk.AutoCAD.EditorInput.SelectionSet,System.Action{``0,IFoxCAD.Basal.LoopState},Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean)">
            <summary>
            遍历选择集
            </summary>
            <typeparam name="T">指定图元类型</typeparam>
            <param name="ss">选择集</param>
            <param name="action">处理函数;(图元,终止方式)</param>
            <param name="openMode">打开模式</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:IFoxCAD.Cad.SingleKeyWordHook">
            <summary>
            关键字不需要空格钩子
            By DYH 20230508
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.SingleKeyWordHook._keyWords">
            <summary>
            关键字合集
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SingleKeyWordHook.Key">
            <summary>
            上一个触发的关键字
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SingleKeyWordHook.StringResult">
            <summary>
            上一个触发的关键字字符串
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SingleKeyWordHook.IsResponsed">
            <summary>
            是否响应了
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.SingleKeyWordHook.#ctor(IFoxCAD.Cad.SingleKeyWordWorkType)">
            <summary>
            单字母关键字免输回车钩子
            </summary>
            <param name="workType">使用esc(填false则使用回车)</param>
        </member>
        <member name="M:IFoxCAD.Cad.SingleKeyWordHook.AddKeys(System.Windows.Forms.Keys[])">
            <summary>
            添加Keys
            </summary>
            <param name="values">Keys集合</param>
        </member>
        <member name="M:IFoxCAD.Cad.SingleKeyWordHook.AddKeys(Autodesk.AutoCAD.EditorInput.KeywordCollection)">
            <summary>
            添加Keys
            </summary>
            <param name="keywordCollection">关键字集合</param>
        </member>
        <member name="M:IFoxCAD.Cad.SingleKeyWordHook.Remove(System.Windows.Forms.Keys[])">
            <summary>
            移除Keys
            </summary>
            <param name="values">Keys集合</param>
        </member>
        <member name="M:IFoxCAD.Cad.SingleKeyWordHook.Clear">
            <summary>
            清空Keys
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.SingleKeyWordHook.Reset">
            <summary>
            复位响应状态，每个循环开始时使用
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.SingleKeyWordHook.Pause">
            <summary>
            暂停工作
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.SingleKeyWordHook.Working">
            <summary>
            开始工作
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SingleKeyWordHook.IsDisposed">
            <summary>
            已经销毁
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.SingleKeyWordHook.Dispose(System.Boolean)">
            <summary>
            拆除事件
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:IFoxCAD.Cad.SingleKeyWordHook.Finalize">
            <summary>
            析构里把事件拆了
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.SingleKeyWordHook.Dispose">
            <summary>
            拆除事件并清空关键字
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.SingleKeyWordHook.KeyBoardSendKey(System.Windows.Forms.Keys,System.Byte,System.UInt32,System.UInt32)">
            <summary>
            发送按键
            </summary>
            <param name="key"></param>
            <param name="bScan"></param>
            <param name="dwFlags"></param>
            <param name="dwExtraInfo"></param>
        </member>
        <member name="T:IFoxCAD.Cad.SingleKeywordHookEx">
            <summary>
            单文本关键字钩子扩展
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.SingleKeywordHookEx.HookSingleKeyword(Autodesk.AutoCAD.EditorInput.KeywordCollection,IFoxCAD.Cad.SingleKeyWordWorkType)">
            <summary>
            钩取单文本关键字
            </summary>
            <param name="keywords">关键字集合</param>
            <param name="workType">工作模式</param>
            <returns>单文本关键字类(需要using)</returns>
        </member>
        <member name="T:IFoxCAD.Cad.SingleKeyWordWorkType">
            <summary>
            单关键字工作模式
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.SingleKeyWordWorkType.ESCAPE">
            <summary>
            Esc模式
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.SingleKeyWordWorkType.ENTER">
            <summary>
            Enter模式
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.SingleKeyWordWorkType.WRITE_LINE">
            <summary>
            Write Line 模式
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.SupportPathEx.Get">
            <summary>
            获取支持路径
            </summary>
            <returns>路径列表</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SupportPathEx.Add(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            添加支持路径
            </summary>
            <param name="dirs">路径列表</param>
        </member>
        <member name="M:IFoxCAD.Cad.SupportPathEx.Remove(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            移除支持路径
            </summary>
            <param name="dirs">路径列表</param>
        </member>
        <member name="M:IFoxCAD.Cad.SupportPathEx.Set(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            设置支持路径
            </summary>
            <param name="dirs">路径列表</param>
        </member>
        <member name="M:IFoxCAD.Cad.SupportPathEx.ToLowerDirSet(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            转换为小写并去除尾部反斜杠的路径集合
            </summary>
            <param name="dirs">路径列表</param>
            <returns>路径集合</returns>
        </member>
        <member name="T:IFoxCAD.Cad.SymbolTableEx">
            <summary>
            符号表类扩展函数
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableEx.Add(IFoxCAD.Cad.SymbolTable{Autodesk.AutoCAD.DatabaseServices.LayerTable,Autodesk.AutoCAD.DatabaseServices.LayerTableRecord},System.String,Autodesk.AutoCAD.Colors.Color)">
            <summary>
            添加图层
            </summary>
            <param name="table">图层符号表</param>
            <param name="name">图层名</param>
            <param name="color">图层颜色</param>
            <returns>图层id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableEx.Add(IFoxCAD.Cad.SymbolTable{Autodesk.AutoCAD.DatabaseServices.LayerTable,Autodesk.AutoCAD.DatabaseServices.LayerTableRecord},System.String,System.Int32)">
            <summary>
            添加图层
            </summary>
            <param name="table">图层符号表</param>
            <param name="name">图层名</param>
            <param name="colorIndex">图层颜色索引值</param>
            <returns>图层id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableEx.Rename(IFoxCAD.Cad.SymbolTable{Autodesk.AutoCAD.DatabaseServices.LayerTable,Autodesk.AutoCAD.DatabaseServices.LayerTableRecord},System.String,System.String)">
            <summary>
            更改图层名
            </summary>
            <param name="table">图层符号表</param>
            <param name="oldName">旧图层名</param>
            <param name="newName">新图层名</param>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableEx.Delete(IFoxCAD.Cad.SymbolTable{Autodesk.AutoCAD.DatabaseServices.LayerTable,Autodesk.AutoCAD.DatabaseServices.LayerTableRecord},System.String)">
            <summary>
            删除图层
            </summary>
            <param name="table">层表</param>
            <param name="name">图层名</param>
            <returns>成功返回 <see langword="true"/>，失败返回 <see langword="false"/></returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableEx.Add(IFoxCAD.Cad.SymbolTable{Autodesk.AutoCAD.DatabaseServices.BlockTable,Autodesk.AutoCAD.DatabaseServices.BlockTableRecord},System.String,System.Action{Autodesk.AutoCAD.DatabaseServices.BlockTableRecord},System.Func{System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.Entity}},System.Func{System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.AttributeDefinition}})">
            <summary>
            添加块定义
            </summary>
            <param name="table">块表</param>
            <param name="name">块名</param>
            <param name="action">对所添加块表的委托n</param>
            <param name="ents">添加图元的委托</param>
            <param name="attDef">添加属性定义的委托</param>
            <returns>块定义id</returns>
            TODO: 需要测试匿名块等特殊的块是否能定义
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableEx.Add(IFoxCAD.Cad.SymbolTable{Autodesk.AutoCAD.DatabaseServices.BlockTable,Autodesk.AutoCAD.DatabaseServices.BlockTableRecord},System.String,System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.Entity},System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.AttributeDefinition})">
            <summary>
            添加块定义
            </summary>
            <param name="table">块表</param>
            <param name="name">块名</param>
            <param name="ents">图元</param>
            <param name="attDef">属性定义</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableEx.Add(IFoxCAD.Cad.SymbolTable{Autodesk.AutoCAD.DatabaseServices.BlockTable,Autodesk.AutoCAD.DatabaseServices.BlockTableRecord},System.String,Autodesk.AutoCAD.DatabaseServices.Entity[])">
            <summary>
            添加块定义
            </summary>
            <param name="table">块表</param>
            <param name="name">块名</param>
            <param name="ents">图元(包括属性)</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableEx.AddAttsToBlocks(IFoxCAD.Cad.SymbolTable{Autodesk.AutoCAD.DatabaseServices.BlockTable,Autodesk.AutoCAD.DatabaseServices.BlockTableRecord},Autodesk.AutoCAD.DatabaseServices.ObjectId,System.Collections.Generic.List{Autodesk.AutoCAD.DatabaseServices.AttributeDefinition})">
            <summary>
            添加属性到块定义
            </summary>
            <param name="table">块表</param>
            <param name="id">块定义id</param>
            <param name="atts">属性列表</param>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableEx.AddAttsToBlocks(IFoxCAD.Cad.SymbolTable{Autodesk.AutoCAD.DatabaseServices.BlockTable,Autodesk.AutoCAD.DatabaseServices.BlockTableRecord},System.String,System.Collections.Generic.List{Autodesk.AutoCAD.DatabaseServices.AttributeDefinition})">
            <summary>
            添加属性到块定义
            </summary>
            <param name="table">块表</param>
            <param name="name">块定义名字</param>
            <param name="atts">属性列表</param>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableEx.GetBlockFrom(IFoxCAD.Cad.SymbolTable{Autodesk.AutoCAD.DatabaseServices.BlockTable,Autodesk.AutoCAD.DatabaseServices.BlockTableRecord},System.String,System.Boolean)">
            <summary>
            从文件中获取块定义
            </summary>
            <param name="table">块表</param>
            <param name="fileName">文件名</param>
            <param name="over">是否覆盖</param>
            <returns>块定义Id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableEx.GetBlockFrom(IFoxCAD.Cad.SymbolTable{Autodesk.AutoCAD.DatabaseServices.BlockTable,Autodesk.AutoCAD.DatabaseServices.BlockTableRecord},System.String,System.String,System.Boolean)">
            <summary>
            从文件中获取块定义
            </summary>
            <param name="table">块表</param>
            <param name="fileName">文件名</param>
            <param name="blockName">块定义名</param>
            <param name="over">是否覆盖</param>
            <returns>块定义Id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableEx.Add(IFoxCAD.Cad.SymbolTable{Autodesk.AutoCAD.DatabaseServices.LinetypeTable,Autodesk.AutoCAD.DatabaseServices.LinetypeTableRecord},System.String,System.String,System.Double,System.Double[])">
            <summary>
            添加线型
            </summary>
            <param name="table">线型表</param>
            <param name="name">线型名</param>
            <param name="description">线型说明</param>
            <param name="length">线型长度</param>
            <param name="dash">笔画长度数组</param>
            <returns>线型id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableEx.Add(IFoxCAD.Cad.SymbolTable{Autodesk.AutoCAD.DatabaseServices.TextStyleTable,Autodesk.AutoCAD.DatabaseServices.TextStyleTableRecord},System.String,System.String,System.Double)">
            <summary>
            添加文字样式记录
            </summary>
            <param name="table">文字样式表</param>
            <param name="textStyleName">文字样式名</param>
            <param name="font">字体名</param>
            <param name="xScale">宽度比例</param>
            <returns>文字样式Id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableEx.Add(IFoxCAD.Cad.SymbolTable{Autodesk.AutoCAD.DatabaseServices.TextStyleTable,Autodesk.AutoCAD.DatabaseServices.TextStyleTableRecord},System.String,IFoxCAD.Cad.FontTTF,System.Double)">
            <summary>
            添加文字样式记录
            </summary>
            <param name="table">文字样式表</param>
            <param name="textStyleName">文字样式名</param>
            <param name="fontTtf">字体名枚举</param>
            <param name="xScale">宽度比例</param>
            <returns>文字样式Id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableEx.AddWithChange(IFoxCAD.Cad.SymbolTable{Autodesk.AutoCAD.DatabaseServices.TextStyleTable,Autodesk.AutoCAD.DatabaseServices.TextStyleTableRecord},System.String,System.String,System.String,System.Double,System.Double,System.Boolean)">
            <summary>
            <p>添加文字样式记录,如果存在就默认强制替换</p>
            <para>此函数为了 <see langword="二惊"/> 和 <see langword="edata"/> 而设</para>
            </summary>
            <param name="table">文字样式表</param>
            <param name="textStyleName">文字样式名</param>
            <param name="smallFont">字体名</param>
            <param name="bigFont">大字体名</param>
            <param name="xScale">宽度比例</param>
            <param name="height">高度</param>
            <param name="forceChange">是否强制替换</param>
            <returns>文字样式Id</returns>
        </member>
        <member name="T:IFoxCAD.Cad.SymbolTableRecordEx">
            <summary>
            符号表记录扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableRecordEx.DeepCloneEx(Autodesk.AutoCAD.DatabaseServices.BlockTableRecord,Autodesk.AutoCAD.DatabaseServices.ObjectIdCollection,Autodesk.AutoCAD.DatabaseServices.IdMapping)">
            <summary>
            深度克隆id到块表记录
            <para>
            0x01 此方法不允许是未添加数据库的图元,因此它是id<br/>
            0x02 若为未添加数据库图元,则利用entity.Clone();同时不需要考虑动态块属性,可以使用entity.GetTransformedCopy
            </para>
            </summary>
            <param name="btr">块表记录
            <para>
            克隆到当前块表记录,相当于原地克隆<br/>
            克隆到目标块表记录内,相当于制作新块
            </para>
            </param>
            <param name="objIds">图元id集合,注意所有成员都要在同一个空间中</param>
            <param name="maoOut">返回克隆后的id词典</param>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableRecordEx.DeepCloneEx(Autodesk.AutoCAD.DatabaseServices.BlockTableRecord,Autodesk.AutoCAD.DatabaseServices.ObjectIdCollection)">
            <summary>
            深度克隆id到块表记录
            </summary>
            <param name="btr">块表记录</param>
            <param name="objIds">图元id集合</param>
            <returns>id词典</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableRecordEx.AddEntity(Autodesk.AutoCAD.DatabaseServices.BlockTableRecord,Autodesk.AutoCAD.DatabaseServices.Entity)">
            <summary>
            添加实体对象
            </summary>
            <param name="btr">块表记录</param>
            <param name="entity">实体</param>
            <returns>对象 id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableRecordEx.AddEntity(Autodesk.AutoCAD.DatabaseServices.BlockTableRecord,System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.Entity})">
            <summary>
            添加实体集合
            </summary>
            <param name="btr">块表记录</param>
            <param name="ents">实体集合</param>
            <returns>对象 id 列表</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableRecordEx.AddEntity(Autodesk.AutoCAD.DatabaseServices.BlockTableRecord,Autodesk.AutoCAD.DatabaseServices.Entity[])">
            <summary>
            添加多个实体
            </summary>
            <param name="btr">块表记录</param>
            <param name="ents">实体集合</param>
            <returns>对象 id 列表</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableRecordEx.GetEntities``1(Autodesk.AutoCAD.DatabaseServices.BlockTableRecord,Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean)">
            <summary>
            获取块表记录内的指定类型的实体
            (此处不会检查id.IsOk())
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="btr">块表记录</param>
            <param name="openMode">打开模式</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableRecordEx.GetObjectIds``1(Autodesk.AutoCAD.DatabaseServices.BlockTableRecord)">
            <summary>
            按类型获取实体Id
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="btr">块表记录</param>
            <returns>实体Id集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableRecordEx.GetObjectIds(Autodesk.AutoCAD.DatabaseServices.BlockTableRecord)">
            <summary>
            按类型获取实体Id的分组
            </summary>
            <param name="btr">块表记录</param>
            <returns>实体Id分组</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableRecordEx.GetDrawOrderTable(Autodesk.AutoCAD.DatabaseServices.BlockTableRecord,Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean)">
            <summary>
            获取绘制顺序表
            </summary>
            <param name="btr">块表</param>
            <param name="openMode">开启方式</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
            <returns>绘制顺序表</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableRecordEx.InsertBlock(Autodesk.AutoCAD.DatabaseServices.BlockTableRecord,Autodesk.AutoCAD.Geometry.Point3d,System.String,Autodesk.AutoCAD.Geometry.Scale3d,System.Double,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            插入块参照
            </summary>
            <param name="blockTableRecord">块表记录</param>
            <param name="position">插入点</param>
            <param name="blockName">块名</param>
            <param name="scale">块插入比例，默认为1</param>
            <param name="rotation">块插入旋转角(弧度)，默认为0</param>
            <param name="atts">属性字典{Tag,Value}，默认为null</param>
            <returns>块参照对象id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableRecordEx.InsertBlock(Autodesk.AutoCAD.DatabaseServices.BlockTableRecord,Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.DatabaseServices.ObjectId,Autodesk.AutoCAD.Geometry.Scale3d,System.Double,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            插入块参照
            </summary>
            <param name="blockTableRecord">块表记录</param>
            <param name="position">插入点</param>
            <param name="blockId">块定义id</param>
            <param name="scale">块插入比例，默认为1</param>
            <param name="rotation">块插入旋转角(弧度)，默认为0</param>
            <param name="atts">属性字典{Tag,Value}，默认为null</param>
            <returns>块参照对象id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableRecordEx.ForEach``1(``0,System.Action{Autodesk.AutoCAD.DatabaseServices.ObjectId})">
            <summary>
            遍历符号表记录,执行委托
            </summary>
            <param name="record">符号表记录</param>
            <param name="task">要运行的委托</param>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableRecordEx.ForEach``1(``0,System.Action{Autodesk.AutoCAD.DatabaseServices.ObjectId,IFoxCAD.Basal.LoopState})">
            <summary>
            遍历符号表记录,执行委托(允许循环中断)
            </summary>
            <param name="record">符号表记录</param>
            <param name="task">要执行的委托</param>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableRecordEx.ForEach``1(``0,System.Action{Autodesk.AutoCAD.DatabaseServices.ObjectId,IFoxCAD.Basal.LoopState,System.Int32})">
            <summary>
            遍历符号表记录,执行委托(允许循环中断,输出索引值)
            </summary>
            <param name="record">符号表记录</param>
            <param name="task">要执行的委托</param>
        </member>
        <member name="T:IFoxCAD.Cad.TangentEx">
            <summary>
            天正接口
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.TangentEx.TgetPscale">
            <summary>
            获取天正绘图比例
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFoxCAD.Cad.IFoxUtils">
            <summary>
            工具类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.IFoxUtils.RegenLayers(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.ObjectId})">
            <summary>
            刷新图层状态，在修改图层的锁定或冻结状态后使用
            </summary>
            <param name="layerIds">图层id集合</param>
        </member>
        <member name="M:IFoxCAD.Cad.IFoxUtils.RegenLayers2(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.ObjectId})">
            <summary>
            刷新图层状态，在修改图层的锁定或冻结状态后使用
            </summary>
            <param name="layerIds">图层id集合</param>
        </member>
        <member name="M:IFoxCAD.Cad.IFoxUtils.ShowBubbleWindow(System.Int32,System.String,System.String,Autodesk.AutoCAD.Windows.IconType,System.String,System.String,System.String)">
            <summary>
            发送气泡通知
            </summary>
            <param name="second">显示的秒数，范围1-10为相应秒数，0为常显</param>
            <param name="title">标题</param>
            <param name="text">内容1</param>
            <param name="iconType">图标样式</param>
            <param name="hyperText">链接</param>
            <param name="hyperLink">链接地址</param>
            <param name="text2">内容2</param>
        </member>
        <member name="M:IFoxCAD.Cad.IFoxUtils.VetoMouseDoubleClickEvent">
            <summary>
            否决双击事件本身的后续操作，在双击事件中使用
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.IFoxUtils.CreateTransparency(System.Int32)">
            <summary>
            获取透明度
            </summary>
            <param name="value">cad特性栏透明度值，范围0-100</param>
            <returns>cad透明度值</returns>
        </member>
        <member name="T:IFoxCAD.Cad.TransactionEx">
            <summary>
            cad的事务的扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.TransactionEx.GetObject(Autodesk.AutoCAD.DatabaseServices.Transaction,Autodesk.AutoCAD.DatabaseServices.ObjectId,Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean)">
            <summary>
            根据对象id获取对象
            </summary>
            <param name="tr"></param>
            <param name="id">对象id</param>
            <param name="openMode">打开模式,默认为只读</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
            <returns>数据库DBObject对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.TransactionEx.GetObject``1(Autodesk.AutoCAD.DatabaseServices.Transaction,Autodesk.AutoCAD.DatabaseServices.ObjectId,Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean)">
            <summary>
            根据对象id获取图元对象
            </summary>
            <typeparam name="T">要获取的图元对象的类型</typeparam>
            <param name="tr"></param>
            <param name="id">对象id</param>
            <param name="openMode">打开模式,默认为只读</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
            <returns>图元对象,类型不匹配时抛异常 </returns>
        </member>
        <member name="M:IFoxCAD.Cad.TrustedPathEx.Get">
            <summary>
            获取信任路径
            </summary>
            <returns>路径列表</returns>
        </member>
        <member name="M:IFoxCAD.Cad.TrustedPathEx.Add(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            添加信任路径
            </summary>
            <param name="dirs">路径列表</param>
        </member>
        <member name="M:IFoxCAD.Cad.TrustedPathEx.Remove(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            移除信任路径
            </summary>
            <param name="dirs">路径列表</param>
        </member>
        <member name="M:IFoxCAD.Cad.TrustedPathEx.Set(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            设置信任路径
            </summary>
            <param name="dirs">路径列表</param>
        </member>
        <member name="M:IFoxCAD.Cad.TrustedPathEx.ToLowerDirSet(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            转换为小写并去除尾部反斜杠的路径集合
            </summary>
            <param name="dirs">路径列表</param>
            <returns>路径集合</returns>
        </member>
        <member name="T:IFoxCAD.Cad.WindowEx">
            <summary>
            窗体扩展
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.WindowEx.AddEscQuit(System.Windows.Window)">
            <summary>
            添加Esc退出
            </summary>
            <param name="window">wpf窗体</param>
        </member>
        <member name="M:IFoxCAD.Cad.WindowEx.WindowOnClosed(System.Object,System.EventArgs)">
            <summary>
            关闭时减掉事件
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.WindowEx.IsModel(System.Windows.Window)">
            <summary>
            判断wpf是否为模态
            </summary>
            <param name="window">窗体</param>
            <returns>是则返回true</returns>
        </member>
        <member name="M:IFoxCAD.Cad.WindowEx.GetScreenResolutionFromWindowHandle(System.IntPtr)">
            <summary>
            获取屏幕分辨率
            </summary>
            <param name="windowHandle">窗口句柄</param>
            <returns>屏幕尺寸</returns>
        </member>
        <member name="M:IFoxCAD.Cad.WindowEx.SetSizeByScreenResolution(Autodesk.AutoCAD.Windows.PaletteSet,System.Int32,System.Int32)">
            <summary>
            通过分辨率设置面板尺寸
            </summary>
            <param name="paletteSet">侧栏</param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
        </member>
        <member name="M:IFoxCAD.Cad.WindowEx.GetScreenScale">
            <summary>
            获取屏幕比例
            </summary>
            <returns>比例</returns>
        </member>
        <member name="T:IFoxCAD.Cad.IXrefBindModes">
            <summary>
            参照绑定模式接口
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.IXrefBindModes.Unload">
            <summary>
            卸载
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.IXrefBindModes.Reload">
            <summary>
            重载
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.IXrefBindModes.Detach">
            <summary>
            拆离
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.IXrefBindModes.Bind">
            <summary>
            绑定
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.XrefFactory">
            <summary>
            参照工厂类
            </summary>
            <param name="tr"></param>
            <param name="xrefNames">要处理的参照名称,<see langword="null"/>就处理所有</param>
        </member>
        <member name="M:IFoxCAD.Cad.XrefFactory.#ctor(IFoxCAD.Cad.DBTrans,System.Collections.Generic.HashSet{System.String})">
            <summary>
            参照工厂类
            </summary>
            <param name="tr"></param>
            <param name="xrefNames">要处理的参照名称,<see langword="null"/>就处理所有</param>
        </member>
        <member name="F:IFoxCAD.Cad.XrefFactory._xrefNames">
            <summary>
            要处理的参照名称,<see langword="null"/>就处理所有
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.XrefFactory.UseThreadEngine">
            <summary>
            解析外部参照:线性引擎<br/>
            默认<see langword="false"/><br/>
            <see langword="true"/>时会在cad命令历史打印一些AEC信息,并导致绑定慢一点...具体作用不详<br/>
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.XrefFactory.DoNewOnly">
            <summary>
            解析外部参照:仅处理 Unresolved_未融入(未解析)的参照<br/>
            默认<see langword="true"/>
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.XrefFactory.IncludeGhosts">
            <summary>
            解析外部参照:包含僵尸参照
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.XrefFactory.BindOrInsert">
            <summary>
            绑定模式和双美元符号相关(与cad保持相同地默认)<br/>
            <see langword="false"/>为绑定模式,产生双美元;
            <see langword="true"/>为插入模式,块重名会以本图覆盖;
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.XrefFactory.AutoDetach">
            <summary>
            bind时候是否拆离参照<br/>
            默认<see langword="true"/>:学官方的绑定后自动拆离
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.XrefFactory.EraseNested">
            <summary>
            bind时候是否删除被卸载的嵌套参照<br/>
            默认<see langword="true"/>
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.XrefFactory.SymModesBind">
            <summary>
            bind时候控制绑定的符号表:请保持默认<br/>
            目前仅推荐用于<see cref="F:IFoxCAD.Cad.SymModes.LayerTable"/>项<br/>
            其他项有异常:<see langword="eWasOpenForNotify"/><br/>
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.XrefFactory.Bind">
            <summary>
            绑定
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.XrefFactory.Detach">
            <summary>
            分离
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.XrefFactory.Reload">
            <summary>
            重载
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.XrefFactory.Unload">
            <summary>
            卸载
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.XrefFactory.GetAllXrefNode(Autodesk.AutoCAD.DatabaseServices.ObjectIdCollection)">
            <summary>
            获取参照
            </summary>
            <param name="xrefIds">返回全部参照id</param>
        </member>
        <member name="M:IFoxCAD.Cad.XrefFactory.XrefNodeForEach(System.Action{System.String,Autodesk.AutoCAD.DatabaseServices.ObjectId,Autodesk.AutoCAD.DatabaseServices.XrefStatus,System.Boolean})">
            <summary>
            遍历参照
            </summary>
            <param name="action">(参照名,参照块表记录id,参照状态,是否嵌入)</param>
        </member>
        <member name="M:IFoxCAD.Cad.XrefFactory.AddedXBindIds``2(Autodesk.AutoCAD.DatabaseServices.ObjectIdCollection,IFoxCAD.Cad.SymbolTable{``0,``1})">
            <summary>
            符号表记录加入容器
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.XrefFactory.GetDetachIds(System.Collections.Generic.Dictionary{Autodesk.AutoCAD.DatabaseServices.ObjectId,System.String})">
            <summary>
            获取可以拆离的ids
            </summary>
            <param name="nested">返回已卸载中含有嵌套的参照,要重载之后才能绑定</param>
            <returns>返回未参照中嵌套的参照,直接拆离</returns>
        </member>
        <member name="M:IFoxCAD.Cad.XrefFactory.DoubleBind">
            <summary>
            双重绑定参照
            <a href="https://www.cnblogs.com/SHUN-ONCET/p/16593360.html">参考链接</a>
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.XrefEx">
            <summary>
            参照扩展
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.XrefEx.XrefFactory(IFoxCAD.Cad.DBTrans,IFoxCAD.Cad.XrefModes,System.Collections.Generic.HashSet{System.String})">
            <summary>
            外部参照工厂
            </summary>
            <param name="tr"></param>
            <param name="xrefModes">处理参照的枚举</param>
            <param name="xrefNames">要处理的参照名称,<see langword="null"/>就处理所有</param>
        </member>
        <member name="T:IFoxCAD.Cad.XrefPath">
            <summary>
            获取外部参照的路径
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.XrefPath.CurrentDatabasePath">
            <summary>
            基础路径
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.XrefPath.IsFromExternalReference">
            <summary>
            是否外部参照
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.XrefPath.PathSave">
            <summary>
            外部参照保存的路径
            <para>
            它们会是以下任一路径:<br/>
            0x01 相对路径<br/>
            0x02 绝对路径<br/>
            0x03 共目录优先找到的路径(文件夹整体移动会发生此类情况)
            </para>
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.XrefPath.PathDescribe">
            <summary>
            找到的路径(参照面板的名称)
            <para><see cref="P:IFoxCAD.Cad.XrefPath.PathSave"/>路径不存在时,返回是外部参照dwg文件路径</para>
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.XrefPath.PathComplete">
            <summary>
            绝对路径
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.XrefPath.PathRelative">
            <summary>
            相对路径
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.XrefPath.#ctor(Autodesk.AutoCAD.DatabaseServices.BlockReference,IFoxCAD.Cad.DBTrans)">
            <summary>
            获取外部参照的路径
            </summary>
            <param name="brf">外部参照图元</param>
            <param name="tr">事务</param>
            <returns>是否外部参照</returns>
        </member>
        <member name="M:IFoxCAD.Cad.XrefPath.PathConverter(System.String,System.String,IFoxCAD.Cad.PathConverterModes)">
            <summary>
            获取相对路径或者绝对路径
            <see href="https://www.cnblogs.com/hont/p/5412340.html">参考链接</see>
            </summary>
            <param name="directory">基础目录(末尾无斜杠)</param>
            <param name="fileRelations">相对路径或者绝对路径</param>
            <param name="converterModes">依照枚举返回对应的字符串</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.XrefPath.GetRelativePath(System.String,System.String)">
            <summary>
            绝对路径->相对路径
            </summary>
            <param name="directory">相对关系:文件夹路径</param>
            <param name="file">完整路径:文件路径</param>
            <returns>相对路径</returns>
            <![CDATA[
            GetRelativePath("G:\\A1.项目\\20190920金山谷黄宅\\01.饰施图\\03.平面图",
            "G:\\A1.项目\\20190920金山谷黄宅\\01.饰施图\\01.辅助文件\\图框\\A3图框.dwg")
            =>  "..\\01.辅助文件\\图框\\A3图框.dwg"
            ]]>
        </member>
        <member name="M:IFoxCAD.Cad.XrefPath.GetCompletePath(System.String,System.String)">
            <summary>
            相对路径->绝对路径
            </summary>
            <param name="directory">文件夹路径</param>
            <param name="relativePath">相对关系:有..的</param>
            <returns>完整路径</returns>
            <![CDATA[
            GetCompletePath("G:\\A1.项目\\20190920金山谷黄宅\\01.饰施图\\03.平面图" ,
            "..\\01.辅助文件\\图框\\A3图框.dwg")
            =>   "G:\\A1.项目\\20190920金山谷黄宅\\01.饰施图\\01.辅助文件\\图框\\A3图框.dwg"
            ]]>
        </member>
        <member name="T:IFoxCAD.Cad.HatchConverter">
            <summary>
            填充边界转换器
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.HatchConverter.CircleData">
            <summary>
            生成圆形数据
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.HatchConverter.CircleData.#ctor(Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d)">
            <summary>
            生成圆形数据
            </summary>
            <param name="symmetryAxisPoint1">对称点1</param>
            <param name="symmetryAxisPoint2">对称点2</param>
        </member>
        <member name="T:IFoxCAD.Cad.HatchConverter.HatchConverterData">
            <summary>
            填充转换器的数据
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.HatchConverter.HatchConverterData.#ctor">
            <summary>
            填充转换器的数据
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.HatchConverter.OldHatchId">
            <summary>
            外部只能调用id,否则跨事务造成错误
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchConverter.BoundaryIds">
            <summary>
            填充边界id(生成的/已存在反应器的直接提取)
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.HatchConverter.#ctor">
            <summary>
            填充边界转换器
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.HatchConverter.#ctor(Autodesk.AutoCAD.DatabaseServices.Hatch)">
            <summary>
            填充边界转换器
            </summary>
            <param name="hatch">需要转化的Hatch对象</param>
        </member>
        <member name="M:IFoxCAD.Cad.HatchConverter.GetBoundarysData">
            <summary>
            提取边界信息
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.HatchConverter.HatchLoopIsPolyline(Autodesk.AutoCAD.DatabaseServices.HatchLoop,IFoxCAD.Cad.HatchConverter.HatchConverterData)">
            <summary>
            多段线处理
            </summary>
            <param name="loop">填充边界</param>
            <param name="hcData">收集图元信息</param>
        </member>
        <member name="M:IFoxCAD.Cad.HatchConverter.TwoArcFormOneCircle(Autodesk.AutoCAD.DatabaseServices.HatchLoop)">
            <summary>
            两个圆弧组成圆形
            </summary>
            <param name="loop"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.HatchConverter.HatchLoopIsCurve2d(Autodesk.AutoCAD.DatabaseServices.HatchLoop,IFoxCAD.Cad.HatchConverter.HatchConverterData)">
            <summary>
            处理边界曲线
            </summary>
            <param name="loop">填充边界</param>
            <param name="hcData">收集图元信息</param>
        </member>
        <member name="M:IFoxCAD.Cad.HatchConverter.CreateBoundary(System.Collections.Generic.List{Autodesk.AutoCAD.DatabaseServices.Entity})">
            <summary>
            创建边界图元
            </summary>
            <param name="outEnts">返回图元</param>
        </member>
        <member name="M:IFoxCAD.Cad.HatchConverter.CreateBoundary">
            <summary>
            创建边界
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.HatchConverter.CreateBoundarysAndHatchToMsPs(Autodesk.AutoCAD.DatabaseServices.BlockTableRecord,System.Boolean,System.Boolean)">
            <summary>
            创建边界图元和新填充到当前空间
            </summary>
            <param name="btrOfAddEntitySpace"></param>
            <param name="boundaryAssociative">边界关联</param>
            <param name="createHatchFlag">是否创建填充,false则只创建边界</param>
            <returns>新填充id,边界在<see cref="F:IFoxCAD.Cad.HatchConverter.BoundaryIds"/>获取</returns>
        </member>
        <member name="M:IFoxCAD.Cad.HatchConverter.ResetBoundary(Autodesk.AutoCAD.DatabaseServices.Hatch,System.Boolean)">
            <summary>
            重设边界
            </summary>
            <param name="hatch"></param>
            <param name="boundaryAssociative">边界关联</param>
        </member>
        <member name="T:IFoxCAD.Cad.HatchEx">
            <summary>
            充填扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.HatchEx.ForEach(Autodesk.AutoCAD.DatabaseServices.Hatch,System.Action{Autodesk.AutoCAD.DatabaseServices.HatchLoop})">
            <summary>
            遍历填充每条边
            </summary>
            <param name="hatch"></param>
            <param name="action"></param>
        </member>
        <member name="M:IFoxCAD.Cad.HatchEx.GetAssociatedBoundaryIds(Autodesk.AutoCAD.DatabaseServices.Hatch)">
            <summary>
            提取已存在的关联边界(一个边界环里所有的对象 id 组成一个 ObjectIdCollection)
            </summary>
            <param name="hatch"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:IFoxCAD.Cad.HatchEx.CreateBoundarys(Autodesk.AutoCAD.DatabaseServices.Hatch)">
            <summary>
            创建边界(仅创建于内存中，未加入数据库)
            </summary>
            <param name="hatch"></param>
            <returns>边界环列表(一个边界环里所有的对象组成一个 DBObjectCollection)</returns>
        </member>
        <member name="M:IFoxCAD.Cad.HatchEx.ResetBoundarys(Autodesk.AutoCAD.DatabaseServices.Hatch,System.Collections.Generic.List{Autodesk.AutoCAD.DatabaseServices.ObjectIdCollection},System.Nullable{System.Boolean})">
            <summary>
            重新设置边界并计算
            </summary>
            <param name="hatch"></param>
            <param name="boundaryIds">边界对象(一个边界环里所有的对象 id 组成一个 ObjectIdCollection)
            <br>边界必需是封闭的环, 可以是一条线围合而成也可以是多条线首尾相连围合而成</br>
            <br>多个外边界的时候, 建议顺序为(外边界,外边界,外边界,普通边界....), 或(外边界, 普通边界.....外边界, 普通边界....)</br>
            </param>
            <param name="associative">关联边界(默认保持原样)</param>
        </member>
        <member name="M:IFoxCAD.Cad.HatchEx.HatchLoopIsPolyline(Autodesk.AutoCAD.DatabaseServices.HatchLoop,Autodesk.AutoCAD.DatabaseServices.DBObjectCollection)">
            <summary>
            处理边界多段线
            </summary>
            <param name="loop">填充边界</param>
            <param name="objColl">收集边界图元</param>
        </member>
        <member name="M:IFoxCAD.Cad.HatchEx.TwoArcFormOneCircle(Autodesk.AutoCAD.DatabaseServices.HatchLoop,Autodesk.AutoCAD.DatabaseServices.DBObjectCollection)">
            <summary>
            两个圆弧组成圆形
            </summary>
            <param name="loop">填充边界</param>
            <param name="objColl">收集边界图元</param>
        </member>
        <member name="M:IFoxCAD.Cad.HatchEx.HatchLoopIsCurve2d(Autodesk.AutoCAD.DatabaseServices.HatchLoop,Autodesk.AutoCAD.DatabaseServices.DBObjectCollection)">
            <summary>
            处理边界曲线
            </summary>
            <param name="loop">填充边界</param>
            <param name="objColl">收集边界图元</param>
        </member>
        <member name="T:IFoxCAD.Cad.HatchInfo">
            <summary>
            图案填充
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchInfo._boundaryIds">
            <summary>
            边界id(最外面放第一)
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchInfo._hatch">
            <summary>
            填充图元
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchInfo._boundaryAssociative">
            <summary>
            边界关联(此处不能直接=>给填充成员,因为它会加入反应器)
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchInfo._hatchName">
            <summary>
            填充的名称:用户定义(固定名称)/渐变/填充依据定义文件
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchInfo._patternTypeHatch">
            <summary>
            填充模式类型(预定义/用户定义/自定义)
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchInfo._patternTypeGradient">
            <summary>
            渐变模式类型
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.HatchInfo.Scale">
            <summary>
            比例/间距
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.HatchInfo.Angle">
            <summary>
            角度
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.HatchInfo.#ctor(System.Boolean,System.Nullable{Autodesk.AutoCAD.Geometry.Point2d},System.Double,System.Double)">
            <summary>
            图案填充
            </summary>
            <param name="boundaryAssociative">关联边界</param>
            <param name="hatchOrigin">填充原点</param>
            <param name="hatchScale">比例</param>
            <param name="hatchAngle">角度</param>
        </member>
        <member name="M:IFoxCAD.Cad.HatchInfo.#ctor(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.ObjectId},System.Boolean,System.Nullable{Autodesk.AutoCAD.Geometry.Point2d},System.Double,System.Double)">
            <summary>
            图案填充
            </summary>
            <param name="boundaryIds">边界</param>
            <param name="boundaryAssociative">关联边界</param>
            <param name="hatchOrigin">填充原点</param>
            <param name="hatchScale">比例</param>
            <param name="hatchAngle">角度</param>
        </member>
        <member name="M:IFoxCAD.Cad.HatchInfo.Mode1PreDefined(System.String)">
            <summary>
            模式1:预定义
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.HatchInfo.Mode2UserDefined(System.Boolean)">
            <summary>
            模式2:用户定义
            </summary>
            <param name="patternDouble">是否双向</param>
        </member>
        <member name="M:IFoxCAD.Cad.HatchInfo.Mode3UserDefined(System.String)">
            <summary>
            模式3:自定义
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:IFoxCAD.Cad.HatchInfo.Mode4Gradient(IFoxCAD.Cad.HatchInfo.GradientName,Autodesk.AutoCAD.Colors.Color,Autodesk.AutoCAD.Colors.Color,System.Single,System.Single,System.Boolean)">
            <summary>
            模式4:渐变填充
            </summary>
            <param name="name">渐变填充名称</param>
            <param name="colorStart">渐变色起始颜色</param>
            <param name="colorEnd">渐变色结束颜色</param>
            <param name="gradientShift">渐变移动</param>
            <param name="shadeTintValue">色调值</param>
            <param name="gradientOneColorMode">单色<see langword="true"/>双色<see langword="false"/></param>
        </member>
        <member name="M:IFoxCAD.Cad.HatchInfo.Build(Autodesk.AutoCAD.DatabaseServices.BlockTableRecord)">
            <summary>
            构建
            </summary>
            <param name="btrOfAddEntitySpace">将填充加入此空间</param>
        </member>
        <member name="M:IFoxCAD.Cad.HatchInfo.Action(System.Action{Autodesk.AutoCAD.DatabaseServices.Hatch})">
            <summary>
            执行图元的属性修改
            </summary>
            <param name="action">扔出填充实体</param>
        </member>
        <member name="M:IFoxCAD.Cad.HatchInfo.ClearBoundary">
            <summary>
            清空边界集合
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.HatchInfo.EraseBoundary">
            <summary>
            删除边界图元
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.HatchInfo.AppendLoop(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.ObjectId},Autodesk.AutoCAD.DatabaseServices.HatchLoopTypes)">
            <summary>
            加入边界
            </summary>
            <param name="boundaryIds">边界id</param>
            <param name="hatchLoopTypes">加入方式</param>
        </member>
        <member name="M:IFoxCAD.Cad.HatchInfo.AppendLoop(Autodesk.AutoCAD.Geometry.Point2dCollection,Autodesk.AutoCAD.Geometry.DoubleCollection,Autodesk.AutoCAD.DatabaseServices.BlockTableRecord,Autodesk.AutoCAD.DatabaseServices.HatchLoopTypes)">
            <summary>
            加入边界(仿高版本的填充函数)
            </summary>
            <param name="pts">点集</param>
            <param name="bluges">凸度集</param>
            <param name="btrOfAddEntitySpace">加入此空间</param>
            <param name="hatchLoopTypes">加入方式</param>
            <returns></returns>
        </member>
        <member name="T:IFoxCAD.Cad.HatchInfo.GradientName">
            <summary>
            渐变色填充的图案名称
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchInfo.GradientName.Linear">
            <summary>
            线状渐变
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchInfo.GradientName.Cylinder">
            <summary>
            圆柱状渐变
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchInfo.GradientName.Invcylinder">
            <summary>
            反圆柱状渐变
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchInfo.GradientName.Spherical">
            <summary>
            球状渐变
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchInfo.GradientName.Invspherical">
            <summary>
            反球状渐变
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchInfo.GradientName.Hemisperical">
            <summary>
            半球状渐变
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchInfo.GradientName.InvHemisperical">
            <summary>
            反半球状渐变
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchInfo.GradientName.Curved">
            <summary>
            抛物面状渐变
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchInfo.GradientName.Incurved">
            <summary>
            反抛物面状渐变
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.AcadEMR">
            <summary>
            去教育版
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.AcadEMR.GetModuleHandle(System.String)">
            <summary>
            获取一个应用程序或dll的模块句柄,要求已经载入
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.AcadEMR.GetProcAddress(System.IntPtr,System.String)">
            <summary>
            获取要引入的函数,将符号名或标识号转换为DLL内部地址
            </summary>
            <param name="hModule">exe/dll句柄</param>
            <param name="procName">接口名</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.AcadEMR.VirtualProtect(System.IntPtr,System.IntPtr,System.UInt32,System.UInt32@)">
            <summary>
            虚拟保护
            </summary>
            <param name="lpAddress"></param>
            <param name="dwSize"></param>
            <param name="flNewProtect"></param>
            <param name="lpflOldProtect"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.AcadEMR.Remove(System.Boolean)">
            <summary>
            移除教育版
            </summary>
            <param name="echoes">打印出错信息</param>
        </member>
        <member name="M:IFoxCAD.Cad.AcadEMR.CheckFunc(System.IntPtr@,System.Byte,System.Int32)">
            <summary>
            验证函数体
            </summary>
            <param name="address"></param>
            <param name="val"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="T:IFoxCAD.Cad.AssemInfo">
            <summary>
            程序集信息
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.AssemInfo.#ctor(System.Reflection.Assembly)">
            <summary>
            程序集信息
            </summary>
            <param name="assembly">程序集</param>
        </member>
        <member name="F:IFoxCAD.Cad.AssemInfo.Name">
            <summary>
            注册名
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AssemInfo.Fullname">
            <summary>
            程序集全名
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AssemInfo.Loader">
            <summary>
            程序集路径
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AssemInfo.LoadType">
            <summary>
            加载方式
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AssemInfo.Description">
            <summary>
            程序集说明
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.AssemLoadType">
            <summary>
            程序集加载类型
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AssemLoadType.Starting">
            <summary>
            启动
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AssemLoadType.ByCommand">
            <summary>
            随命令
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AssemLoadType.Disabled">
            <summary>
            无效
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.AutoRegConfig">
            <summary>
            注册中心配置信息
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AutoRegConfig.Undefined">
            <summary>
            不进行任何操作
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AutoRegConfig.Regedit">
            <summary>
            注册表
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AutoRegConfig.ReflectionAttribute">
            <summary>
            反射特性
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AutoRegConfig.ReflectionInterface">
            <summary>
            反射接口
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AutoRegConfig.RemoveEMR">
            <summary>
            移除教育版
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AutoRegConfig.All">
            <summary>
            全部
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.AutoReg">
            <summary>
            自动加载辅助类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.AutoReg.GetAcAppKey">
            <summary>
            获取自动加载注册表位置节点
            </summary>
            <returns>注册表节点</returns>
        </member>
        <member name="M:IFoxCAD.Cad.AutoReg.SearchForReg(IFoxCAD.Cad.AssemInfo)">
            <summary>
            是否已经自动加载
            </summary>
            <param name="info">程序集信息</param>
            <returns>已经设置返回true，反之返回false</returns>
        </member>
        <member name="M:IFoxCAD.Cad.AutoReg.RegApp(IFoxCAD.Cad.AssemInfo)">
            <summary>
            在注册表写入自动加载的程序集信息
            </summary>
            <param name="info">程序集信息</param>
        </member>
        <member name="M:IFoxCAD.Cad.AutoReg.RegApp(System.Reflection.Assembly)">
            <summary>
            在注册表写入自动加载的程序集信息
            </summary>
            <param name="assembly">程序集</param>
        </member>
        <member name="M:IFoxCAD.Cad.AutoReg.UnRegApp(IFoxCAD.Cad.AssemInfo)">
            <summary>
            卸载注册表信息
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.AutoReg.UnRegApp(System.Reflection.Assembly)">
            <summary>
            卸载注册表信息
            </summary>
            <param name="assembly">程序集</param>
        </member>
        <member name="T:IFoxCAD.Cad.AutoRegAssem">
            <summary>
            注册中心
            <para>
            初始化程序集信息写入注册表并反射<see cref="T:IFoxCAD.Cad.IFoxInitializeAttribute"/>特性和<see cref="T:IFoxCAD.Cad.IFoxAutoGo"/>接口<br/>
            启动cad后的执行顺序为:<br/>
            1:<see cref="T:IFoxCAD.Cad.AutoRegAssem"/>程序集配置中心构造函数<br/>
            2:<see cref="T:IFoxCAD.Cad.IFoxInitializeAttribute"/>特性..(多个)<br/>
            3:<see cref="T:IFoxCAD.Cad.IFoxAutoGo"/>接口..(多个)<br/>
            </para>
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AutoRegAssem.Location">
            <summary>
            程序集的路径
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AutoRegAssem.CurrDirectory">
            <summary>
            程序集的目录
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.AutoRegAssem.GetDirectory(System.Reflection.Assembly)">
            <summary>
            获取程序集的目录
            </summary>
            <param name="assem">程序集</param>
            <returns>路径对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.AutoRegAssem.#ctor(IFoxCAD.Cad.AutoRegConfig)">
            <summary>
            注册中心
            </summary>
            <param name="autoRegConfig">配置项目</param>
        </member>
        <member name="M:IFoxCAD.Cad.AutoRegAssem.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.AutoRegAssem.Terminate">
            <summary>
            
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.AutoRegAssem.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.CheckFactory">
            <summary>
            命令检查类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.CheckFactory.CheckDuplicateCommand(System.Reflection.Assembly)">
            <summary>
            检查Command命令重复
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.Sequence">
            <summary>
            加载时优先级
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Sequence.First">
            <summary>
            最先
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Sequence.Last">
            <summary>
            最后
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.IFoxAutoGo">
            <summary>
            加载时自动执行接口
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.IFoxAutoGo.SequenceId">
            <summary>
            控制加载顺序
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.IFoxAutoGo.Terminate">
            <summary>
            关闭cad的时候会自动执行
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.IFoxAutoGo.Initialize">
            <summary>
            打开cad的时候会自动执行
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.IFoxInitializeAttribute">
            <summary>
            加载时自动执行特性
            </summary>
            <remarks>
            用于初始化和结束回收
            </remarks>
            <param name="sequence">优先级</param>
            <param name="isInitialize"><see langword="true"/>用于初始化;<see langword="false"/>用于结束回收</param>
        </member>
        <member name="M:IFoxCAD.Cad.IFoxInitializeAttribute.#ctor(IFoxCAD.Cad.Sequence,System.Boolean)">
            <summary>
            加载时自动执行特性
            </summary>
            <remarks>
            用于初始化和结束回收
            </remarks>
            <param name="sequence">优先级</param>
            <param name="isInitialize"><see langword="true"/>用于初始化;<see langword="false"/>用于结束回收</param>
        </member>
        <member name="F:IFoxCAD.Cad.IFoxInitializeAttribute.SequenceId">
            <summary>
            优先级
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.IFoxInitializeAttribute.IsInitialize">
            <summary>
            <see langword="true"/>用于初始化;<see langword="false"/>用于结束回收
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.RunClass">
            <summary>
            执行此方法
            </summary>
            <param name="method"></param>
            <param name="sequence"></param>
            <param name="instance">已经创建的对象</param>
        </member>
        <member name="M:IFoxCAD.Cad.RunClass.#ctor(System.Reflection.MethodInfo,IFoxCAD.Cad.Sequence,System.Object)">
            <summary>
            执行此方法
            </summary>
            <param name="method"></param>
            <param name="sequence"></param>
            <param name="instance">已经创建的对象</param>
        </member>
        <member name="M:IFoxCAD.Cad.RunClass.Run">
            <summary>
            运行方法
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.AutoReflection">
            <summary>
            此类作为加载后cad自动运行接口的一部分,用于反射特性和接口
            <para>
            启动cad后的执行顺序为:<br/>
            1:<see cref="T:IFoxCAD.Cad.IFoxInitializeAttribute"/>特性..(多个)<br/>
            2:<see cref="T:IFoxCAD.Cad.IFoxAutoGo"/>接口..(多个)
            </para>
            </summary>
            <remarks>
            反射执行
            <para>
            1.特性:<see cref="T:IFoxCAD.Cad.IFoxInitializeAttribute"/><br/>
            2.接口:<see cref="T:IFoxCAD.Cad.IFoxAutoGo"/>
            </para>
            </remarks>
            <param name="dllName">约束在此dll进行加速</param>
            <param name="configInfo"></param>
        </member>
        <member name="M:IFoxCAD.Cad.AutoReflection.#ctor(System.String,IFoxCAD.Cad.AutoRegConfig)">
            <summary>
            此类作为加载后cad自动运行接口的一部分,用于反射特性和接口
            <para>
            启动cad后的执行顺序为:<br/>
            1:<see cref="T:IFoxCAD.Cad.IFoxInitializeAttribute"/>特性..(多个)<br/>
            2:<see cref="T:IFoxCAD.Cad.IFoxAutoGo"/>接口..(多个)
            </para>
            </summary>
            <remarks>
            反射执行
            <para>
            1.特性:<see cref="T:IFoxCAD.Cad.IFoxInitializeAttribute"/><br/>
            2.接口:<see cref="T:IFoxCAD.Cad.IFoxAutoGo"/>
            </para>
            </remarks>
            <param name="dllName">约束在此dll进行加速</param>
            <param name="configInfo"></param>
        </member>
        <member name="M:IFoxCAD.Cad.AutoReflection.Initialize">
            <summary>
            启动cad的时候会自动执行
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.AutoReflection.Terminate">
            <summary>
            关闭cad的时候会自动执行
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.AutoReflection.AppDomainGetTypes(System.Action{System.Type},System.String)">
            <summary>
            遍历程序域下所有类型
            </summary>
            <param name="action">输出每个成员执行</param>
            <param name="dllNameWithoutExtension">过滤此dll,不含后缀</param>
        </member>
        <member name="M:IFoxCAD.Cad.AutoReflection.GetInterfaceFunctions(System.Collections.Generic.List{IFoxCAD.Cad.RunClass},System.String,System.Collections.Generic.List{IFoxCAD.Cad.RunClass},System.String)">
            <summary>
            收集接口下的函数
            </summary>
            <param name="initializes"></param>
            <param name="initializeName"></param>
            <param name="terminates"></param>
            <param name="terminateName"></param>
        </member>
        <member name="M:IFoxCAD.Cad.AutoReflection.GetAttributeFunctions(System.Collections.Generic.List{IFoxCAD.Cad.RunClass},System.Collections.Generic.List{IFoxCAD.Cad.RunClass})">
            <summary>
            收集特性下的函数
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.AutoReflection.RunFunctions(System.Collections.Generic.List{IFoxCAD.Cad.RunClass})">
            <summary>
            执行收集到的函数
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.MethodInfoHelper.Invoke(System.Reflection.MethodInfo,System.Object@)">
            <summary>
            执行函数
            </summary>
            <param name="methodInfo">函数</param>
            <param name="instance">已经外部创建的对象,为空则此处创建</param>
        </member>
        <member name="T:IFoxCAD.Cad.AcadPeEnum">
            <summary>
            选择模式
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AcadPeEnum.AcadExe">
            <summary>
            AcadExe
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AcadPeEnum.AccoreDll">
            <summary>
            AccoreDll
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AcadPeEnum.Acdb">
            <summary>
            Acdb
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AcadPeEnum.ExeAndCore">
            <summary>
            ExeAndCore
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.GetMethodErrorNum">
            <summary>
            这里的枚举对应 GetMethodException 错误值
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.GetMethodErrorNum.Ok">
            <summary>
            
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.GetMethodErrorNum.NoModule">
            <summary>
            
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.GetMethodErrorNum.NoFuncName">
            <summary>
            
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.AcadPeInfo">
            <summary>
            自动获取本工程上面的发送命令的接口
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AcadPeInfo.PeForAcadExe">
            <summary>
            
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AcadPeInfo.PeForAccoreDll">
            <summary>
            
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AcadPeInfo.PeForAcdbDll">
            <summary>
            
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AcadPeInfo.Methods">
            <summary>
            同名函数指针们
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AcadPeInfo._findFuncName">
            <summary>
            用于查找PE不带修饰的函数名
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AcadPeInfo._acadPeEnum">
            <summary>
            枚举查找对象
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.AcadPeInfo.#ctor(System.String,IFoxCAD.Cad.AcadPeEnum)">
            <summary>
            通过函数名获取指针,指定类型
            </summary>
            <param name="methodName">不带修饰的函数名</param>
            <param name="acadPeEnum">读取哪个cad内部文件的枚举(目前只支持两个)</param>
        </member>
        <member name="M:IFoxCAD.Cad.AcadPeInfo.GetDelegate``1(System.String,IFoxCAD.Cad.AcadPeEnum)">
            <summary>
            获取CAD的函数指针
            </summary>
            <typeparam name="TDelegate">委托</typeparam>
            <param name="methodName">不带修饰的函数名</param>
            <param name="acadPeEnum">读取哪个cad内部文件的枚举(目前只支持两个)</param>
            <returns>委托</returns>
        </member>
        <member name="F:IFoxCAD.Cad.AcadPeInfo._Dict">
            <summary>
            储存旧值，去除修饰函数名（查找的）,带修饰函数名们
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.AcadPeInfo.GetPeMethod(IFoxCAD.Cad.PeInfo)">
            <summary>
            返回函数指针
            </summary>
            <param name="peInfo">Pe信息:可能来自exe/dll</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:IFoxCAD.Cad.AcadPeInfo.GetDelegate``1">
            <summary>
            转为委托
            </summary>
            <typeparam name="TDelegate">委托对象</typeparam>
            <returns></returns>
        </member>
        <member name="T:IFoxCAD.Cad.PeFunction">
            <summary>
            通过名字查找exe/dll内所有名字
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.PeFunction.CName">
            <summary>
            纯c语言名
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PeFunction.ModuleFullName">
            <summary>
            模块文件路径
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PeFunction.ModuleIntPtr">
            <summary>
            模块指针
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PeFunction.MethodName">
            <summary>
            函数名
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PeFunction.#ctor(System.String)">
            <summary>
            通过名字查找exe/dll内所有名字
            </summary>
            <param name="methodName">没修饰的方法名</param>
        </member>
        <member name="M:IFoxCAD.Cad.PeFunction.GetProcAddress">
            <summary>
            获取函数指针
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PeFunction.Finds(IFoxCAD.Cad.PeInfo,System.String,System.Collections.Generic.List{IFoxCAD.Cad.PeFunction})">
            <summary>
            通过名字查找exe/dll内所有名字
            </summary>
            <param name="peInfo">pe结构</param>
            <param name="findFuncName">用于查找的方法名</param>
            <param name="funcAdress_Out">返回函数集合</param>
        </member>
        <member name="T:IFoxCAD.Cad.GetPeMethodException">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.GetPeMethodException.ErrorNum">
            <summary>
            
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.GetPeMethodException.ErrorMsg">
            <summary>
            
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.GetPeMethodException.InnerException1">
            <summary>
            
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.GetPeMethodException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:IFoxCAD.Cad.GetPeMethodException.#ctor(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="errorNum"></param>
            <param name="msg"></param>
        </member>
        <member name="M:IFoxCAD.Cad.GetPeMethodException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:IFoxCAD.Cad.DBmod">
            <summary>
            获取数据库修改状态
            <a href="https://knowledge.autodesk.com/support/autocad/learn-explore/caas/CloudHelp/cloudhelp/2020/ENU/AutoCAD-Core/files/GUID-E255E808-2D48-4BDE-A760-FFEA28E5A86F-htm.html">
            相关链接</a>
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.DBmod.DatabaseNoModifies">
            <summary>
            数据库未修改
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.DBmod.Database">
            <summary>
            数据库有修改
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.DBmod.Value">
            <summary>
            变量有修改
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.DBmod.Window">
            <summary>
            窗口有修改
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.DBmod.View">
            <summary>
            视图有修改
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.DBmod.Field">
            <summary>
            字段有修改
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.DBmodEx">
            <summary>
            图形修改状态
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBmodEx.DBmod">
            <summary>
            图形修改状态
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DBmodEx.AcdbSetDbmod(System.IntPtr,IFoxCAD.Cad.DBmod)">
            <summary>
            设置图形修改状态
            </summary>
            <param name="db">数据库的指针</param>
            <param name="newValue">修改状态</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBmodEx.DBmodTask(System.Action)">
            <summary>
            Dbmod 不被修改的任务
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:IFoxCAD.Cad.DBmodEx.DatabaseNoModifies">
            <summary>
            请在无法处理的初始化才使用它
            (源泉在初始化的时候进行了修改数据库,所以必须要用一个新线程等待lisp执行完成才可以)
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.PostCmd">
            <summary>
            发送命令
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PostCmd.AcedCmd(Autodesk.AutoCAD.DatabaseServices.ResultBuffer)">
            <summary>
            发送命令(同步)如果2015.+这里报错,那么表示vs需要提权测试
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PostCmd.AcedCommand(System.IntPtr)">
            <summary>
            发送命令(同步)
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PostCmd.AcedPostCommand(System.String)">
            <summary>
            发送命令(同步)
            这个可以在多线程发送
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PostCmd.AcedInvoke(System.String)">
            <summary>
            发送命令(同步)
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PostCmd.AsyncCommand(System.String)">
            <summary>
            发送命令(异步)+CommandFlags.Session可以同步发送
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.PostCmd.RunCmdFlag">
            <summary>
            命令模式
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PostCmd.RunCmdFlag.AcedCmd">
            <summary>
            发送命令(同步)如果2015.+这里报错,那么表示vs需要提权测试
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PostCmd.RunCmdFlag.AcedCommand">
            <summary>
            发送命令(同步)
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PostCmd.RunCmdFlag.AcedPostCommand">
            <summary>
            发送命令(同步)，可以多线程
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PostCmd.RunCmdFlag.AcedInvoke">
            <summary>
            发送命令(同步)
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PostCmd.RunCmdFlag.SendStringToExecute">
            <summary>
            默认的发送命令
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PostCmd.RunCmdFlag.AsyncCommand">
            <summary>
            异步命令
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PostCmd.SendCommand(Autodesk.AutoCAD.DatabaseServices.ResultBuffer)">
            <summary>
            发送命令
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.PostCmd.SendCommand(System.IntPtr)">
            <summary>
            发送命令
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.PostCmd.SendCommand(System.String,IFoxCAD.Cad.PostCmd.RunCmdFlag)">
            <summary>
            发送命令
            </summary>
            <param name="args"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="T:IFoxCAD.Cad.PeInfo">
            <summary>
            微软软件结构PE信息
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.PeInfo.OpenFile">
            <summary>
            获取是否正常打开文件
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.PeInfo.ExportDirectory">
            <summary>
            函数接口名单
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PeInfo.FullName">
            <summary>
            PE文件完整路径
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PeInfo._PEFileByte">
            <summary>
            全部文件数据
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PeInfo._PEFileIndex">
            <summary>
            文件读取的位置
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="fullName"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.LoadFile">
            <summary>
            开始读取
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.LoadDosHeader">
            <summary>
            获得DOS头
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.LoadDosStub">
            <summary>
            获得DOS SUB字段
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.LoadPEHeader">
            <summary>
            获得PE的文件头
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.LoadOptionalHeader">
            <summary>
            获得OPTIONAL PE扩展属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.LoadOptionalDirAttrib">
            <summary>
            获取目录表
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.LoadSectionTable">
            <summary>
            获取节表
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.LoadExportDirectory">
            <summary>
            读取输出表
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.LoadImportDirectory">
            <summary>
            读取输入表
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.LoadResourceDirectory">
            <summary>
            读取资源表
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.AddResourceNode(IFoxCAD.Cad.ResourceDirectory,System.Int64,System.Int64,System.Int64)">
            <summary>
            添加资源节点
            </summary>
            <param name="node"></param>
            <param name="PEIndex"></param>
            <param name="RVA"></param>
            <param name="resourSectRva"></param>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.Loadbyte(System.Byte[]@)">
            <summary>
            读数据 读byte[]的数量 会改边PEFileIndex的值
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.GetString(System.Byte[])">
            <summary>
            转换byte为字符串
            </summary>
            <param name="data">byte[]</param>
            <returns>AA BB CC DD</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.GetString(System.Byte[],System.String)">
            <summary>
            转换字符为显示数据
            </summary>
            <param name="data">byte[]</param>
            <param name="type">ASCII DEFAULT UNICODE BYTE</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.GetInt(System.Byte[])">
            <summary>
            转换BYTE为INT
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.GetLong(System.Byte[])">
            <summary>
            转换数据为LONG
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.AddTableRow(System.Data.DataTable,System.Byte[],System.String,System.String)">
            <summary>
            添加一行信息
            </summary>
            <param name="refTable">表</param>
            <param name="data">数据</param>
            <param name="name">名称</param>
            <param name="describe">说明</param>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.GetPETable">
            <summary>
            获取PE信息 DataSet方式
            </summary>
            <returns>多个表 最后资源表 绘制成树结构TABLE </returns>
        </member>
        <member name="T:IFoxCAD.Cad.DosHeader">
            <summary>
            DOS文件都MS开始
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.DosStub">
            <summary>
            DOS程序 提示
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.PEHeader">
            <summary>
            PE文件头
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.OptionalHeader">
            <summary>
            PE头扩展
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.OptionalDirAttrib">
            <summary>
            目录结构
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.SectionTable">
            <summary>
            节表
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.ExportDirectory">
            <summary>
            输出表
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.ExportDirectory.FunctionNamesByte">
            <summary>
            函数指针名称集合
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.ExportDirectory.FunctionNames">
            <summary>
            获取函数名
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.ImportDirectory">
            <summary>
            输入表
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.ResourceDirectory">
            <summary>
            资源表
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.LispList">
            <summary>
            lisp数据封装类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.#ctor(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.TypedValue})">
            <summary>
            构造函数
            </summary>
            <param name="values">TypedValue 迭代器</param>
        </member>
        <member name="P:IFoxCAD.Cad.LispList.Value">
            <summary>
            lisp 列表的值
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.Add(System.Int32,System.Object)">
            <summary>
            添加数据
            </summary>
            <param name="code">组码</param>
            <param name="obj">组码值</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.Add(Autodesk.AutoCAD.Runtime.LispDataType,System.Object)">
            <summary>
            添加数据
            </summary>
            <param name="code">dxfcode枚举值</param>
            <param name="obj">组码值</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.Add(System.Boolean)">
            <summary>
            添加数据，参数为true时添加 lisp 中的 T，false时添加 lisp 中的 nil
            </summary>
            <param name="value">bool 型的数据</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.Add(System.String)">
            <summary>
            添加字符串
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.Add(System.Int16)">
            <summary>
            添加短整型数
            </summary>
            <param name="value">短整型数</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.Add(System.Int32)">
            <summary>
            添加整型数
            </summary>
            <param name="value">整型数</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.Add(System.Double)">
            <summary>
            添加浮点数
            </summary>
            <param name="value">浮点数</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.Add(Autodesk.AutoCAD.DatabaseServices.ObjectId)">
            <summary>
            添加对象id
            </summary>
            <param name="value">对象id</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.Add(Autodesk.AutoCAD.EditorInput.SelectionSet)">
            <summary>
            添加选择集
            </summary>
            <param name="value">选择集</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.Add(Autodesk.AutoCAD.Geometry.Point2d)">
            <summary>
            添加二维点
            </summary>
            <param name="value">二维点</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.Add(Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            添加三维点
            </summary>
            <param name="value">三维点</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.Add(System.Double,System.Double)">
            <summary>
            添加二维点
            </summary>
            <param name="x">X</param>
            <param name="y">Y</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.Add(System.Double,System.Double,System.Double)">
            <summary>
            添加三维点
            </summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="z">Z</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.Add(IFoxCAD.Cad.LispList)">
            <summary>
            添加列表
            </summary>
            <param name="value">lisp 列表</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.op_Implicit(Autodesk.AutoCAD.DatabaseServices.ResultBuffer)~IFoxCAD.Cad.LispList">
            <summary>
            ResultBuffer 隐式转换到 LispList
            </summary>
            <param name="buffer">ResultBuffer 实例</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.op_Implicit(IFoxCAD.Cad.LispList)~Autodesk.AutoCAD.DatabaseServices.TypedValue[]">
            <summary>
            LispList 隐式转换到 TypedValue 数组
            </summary>
            <param name="values">TypedValueList 实例</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.op_Implicit(IFoxCAD.Cad.LispList)~Autodesk.AutoCAD.DatabaseServices.ResultBuffer">
            <summary>
            LispList 隐式转换到 ResultBuffer
            </summary>
            <param name="values">TypedValueList 实例,要using</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.op_Implicit(Autodesk.AutoCAD.DatabaseServices.TypedValue[])~IFoxCAD.Cad.LispList">
            <summary>
            TypedValue 数组隐式转换到 LispList
            </summary>
            <param name="values">TypedValue 数组</param>
        </member>
        <member name="T:IFoxCAD.Cad.TypedValueList">
            <summary>
            用于集中管理扩展数据/扩展字典/resultBuffer的类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.TypedValueList.#ctor">
            <summary>
            默认无参构造函数
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.TypedValueList.#ctor(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.TypedValue})">
            <summary>
            采用 TypedValue 迭代器构造 TypedValueList
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:IFoxCAD.Cad.TypedValueList.Add(System.Int32,System.Object)">
            <summary>
            添加数据
            </summary>
            <param name="code">组码</param>
            <param name="obj">组码值</param>
        </member>
        <member name="M:IFoxCAD.Cad.TypedValueList.op_Implicit(Autodesk.AutoCAD.DatabaseServices.ResultBuffer)~IFoxCAD.Cad.TypedValueList">
            <summary>
            ResultBuffer 隐式转换到 TypedValueList
            </summary>
            <param name="buffer">ResultBuffer 实例</param>
        </member>
        <member name="M:IFoxCAD.Cad.TypedValueList.op_Implicit(IFoxCAD.Cad.TypedValueList)~Autodesk.AutoCAD.DatabaseServices.TypedValue[]">
            <summary>
            TypedValueList 隐式转换到 TypedValue 数组
            </summary>
            <param name="values">TypedValueList 实例</param>
        </member>
        <member name="M:IFoxCAD.Cad.TypedValueList.op_Implicit(IFoxCAD.Cad.TypedValueList)~Autodesk.AutoCAD.DatabaseServices.ResultBuffer">
            <summary>
            TypedValueList 隐式转换到 ResultBuffer
            </summary>
            <param name="values">TypedValueList 实例</param>
        </member>
        <member name="M:IFoxCAD.Cad.TypedValueList.op_Implicit(Autodesk.AutoCAD.DatabaseServices.TypedValue[])~IFoxCAD.Cad.TypedValueList">
            <summary>
            TypedValue 数组隐式转换到 TypedValueList
            </summary>
            <param name="values">TypedValue 数组</param>
        </member>
        <member name="M:IFoxCAD.Cad.TypedValueList.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns>ResultBuffer 字符串</returns>
        </member>
        <member name="T:IFoxCAD.Cad.XDataList">
            <summary>
            扩展数据封装类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.XDataList.#ctor">
            <summary>
            扩展数据封装类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.XDataList.#ctor(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.TypedValue})">
            <summary>
            扩展数据封装类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.XDataList.Add(System.Int32,System.Object)">
            <summary>
            添加数据
            </summary>
            <param name="code">组码</param>
            <param name="obj">组码值</param>
        </member>
        <member name="M:IFoxCAD.Cad.XDataList.Add(Autodesk.AutoCAD.DatabaseServices.DxfCode,System.Object)">
            <summary>
            添加数据
            </summary>
            <param name="code">dxfcode枚举值</param>
            <param name="obj">组码值</param>
        </member>
        <member name="M:IFoxCAD.Cad.XDataList.Contains(System.String)">
            <summary>
            是否含有注册名
            </summary>
            <param name="appName">注册名</param>
        </member>
        <member name="M:IFoxCAD.Cad.XDataList.Contains(System.String,System.Object)">
            <summary>
            注册名下含有指定成员
            </summary>
            <param name="appName">注册名</param>
            <param name="value">内容</param>
        </member>
        <member name="M:IFoxCAD.Cad.XDataList.GetXdataAppIndex(System.String,Autodesk.AutoCAD.DatabaseServices.DxfCode[])">
            <summary>
            获取appName的索引区间
            </summary>
            <param name="appName">注册名称</param>
            <param name="dxfCodes">任务组码对象</param>
            <returns>返回任务组码的索引</returns>
        </member>
        <member name="M:IFoxCAD.Cad.XDataList.RangeTask(System.String,System.Action{Autodesk.AutoCAD.DatabaseServices.TypedValue,IFoxCAD.Basal.LoopState,System.Int32})">
            <summary>
            区间任务
            </summary>
            <param name="appName"></param>
            <param name="action"></param>
        </member>
        <member name="M:IFoxCAD.Cad.XDataList.op_Implicit(Autodesk.AutoCAD.DatabaseServices.ResultBuffer)~IFoxCAD.Cad.XDataList">
            <summary>
            ResultBuffer 隐式转换到 XDataList
            </summary>
            <param name="buffer">ResultBuffer 实例</param>
        </member>
        <member name="M:IFoxCAD.Cad.XDataList.op_Implicit(IFoxCAD.Cad.XDataList)~Autodesk.AutoCAD.DatabaseServices.TypedValue[]">
            <summary>
            XDataList 隐式转换到 TypedValue 数组
            </summary>
            <param name="values">TypedValueList 实例</param>
        </member>
        <member name="M:IFoxCAD.Cad.XDataList.op_Implicit(IFoxCAD.Cad.XDataList)~Autodesk.AutoCAD.DatabaseServices.ResultBuffer">
            <summary>
            XDataList 隐式转换到 ResultBuffer
            </summary>
            <param name="values">TypedValueList 实例</param>
        </member>
        <member name="M:IFoxCAD.Cad.XDataList.op_Implicit(Autodesk.AutoCAD.DatabaseServices.TypedValue[])~IFoxCAD.Cad.XDataList">
            <summary>
            TypedValue 数组隐式转换到 XDataList
            </summary>
            <param name="values">TypedValue 数组</param>
        </member>
        <member name="T:IFoxCAD.Cad.XRecordDataList">
            <summary>
            扩展字典数据封装类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.XRecordDataList.#ctor">
            <summary>
            扩展字典数据封装类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.XRecordDataList.#ctor(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.TypedValue})">
            <summary>
            扩展字典数据封装类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.XRecordDataList.Add(System.Int32,System.Object)">
            <summary>
            添加数据
            </summary>
            <param name="code">组码</param>
            <param name="obj">组码值</param>
        </member>
        <member name="M:IFoxCAD.Cad.XRecordDataList.Add(Autodesk.AutoCAD.DatabaseServices.DxfCode,System.Object)">
            <summary>
            添加数据
            </summary>
            <param name="code">dxfcode枚举值</param>
            <param name="obj">组码值</param>
        </member>
        <member name="M:IFoxCAD.Cad.XRecordDataList.op_Implicit(Autodesk.AutoCAD.DatabaseServices.ResultBuffer)~IFoxCAD.Cad.XRecordDataList">
            <summary>
            ResultBuffer 隐式转换到 XRecordDataList
            </summary>
            <param name="buffer">ResultBuffer 实例</param>
        </member>
        <member name="M:IFoxCAD.Cad.XRecordDataList.op_Implicit(IFoxCAD.Cad.XRecordDataList)~Autodesk.AutoCAD.DatabaseServices.TypedValue[]">
            <summary>
            XRecordDataList 隐式转换到 TypedValue 数组
            </summary>
            <param name="values">TypedValueList 实例</param>
        </member>
        <member name="M:IFoxCAD.Cad.XRecordDataList.op_Implicit(IFoxCAD.Cad.XRecordDataList)~Autodesk.AutoCAD.DatabaseServices.ResultBuffer">
            <summary>
            XRecordDataList 隐式转换到 ResultBuffer
            </summary>
            <param name="values">TypedValueList 实例</param>s
        </member>
        <member name="M:IFoxCAD.Cad.XRecordDataList.op_Implicit(Autodesk.AutoCAD.DatabaseServices.TypedValue[])~IFoxCAD.Cad.XRecordDataList">
            <summary>
            TypedValue 数组隐式转换到 XRecordDataList
            </summary>
            <param name="values">TypedValue 数组</param>
        </member>
        <member name="T:IFoxCAD.Cad.AcPreferences">
            <summary>
            AcapPreference扩展
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.AcPreferences.Display">
            <summary>
            显示属性
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AcPreferences.Display.LayoutDisplayMargins">
            <summary>
            布局显示边距
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AcPreferences.Display.LayoutDisplayPaper">
            <summary>
            布局显示纸
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AcPreferences.Display.LayoutDisplayPaperShadow">
            <summary>
            布局显示纸张阴影
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AcPreferences.Display.LayoutShowPlotSetup">
            <summary>
            布局显示绘图设置
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AcPreferences.Display.LayoutCreateViewport">
            <summary>
            布局创建视口
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AcPreferences.Display.DisplayScrollBars">
            <summary>
            显示滚动条
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AcPreferences.Display.DisplayScreenMenu">
            <summary>
            显示屏幕菜单
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AcPreferences.Display.CursorSize">
            <summary>
            使用光标十字的大小
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AcPreferences.Display.DockedVisibleLines">
            <summary>
            停靠的可见线
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AcPreferences.Display.ShowRasterImage">
            <summary>
            显示光栅图像
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AcPreferences.Display.GraphicsWinModelBackgrndColor">
            <summary>
            模型空间背景颜色
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AcPreferences.Display.TextWinBackgrndColor">
            <summary>
            命令栏win文本背景颜色
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AcPreferences.Display.TextWinTextColor">
            <summary>
            命令栏win文本字体颜色
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AcPreferences.Display.ModelCrosshairColor">
            <summary>
            模型鼠标十字颜色
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AcPreferences.Display.LayoutCrosshairColor">
            <summary>
            布局鼠标十字颜色
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AcPreferences.Display.AutoTrackingVecColor">
            <summary>
            自动跟踪VEC颜色
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AcPreferences.Display.TextFont">
            <summary>
            文本字体
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AcPreferences.Display.TextFontStyle">
            <summary>
            文本字体样式
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AcPreferences.Display.TextFontSize">
            <summary>
            文本字体大小
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AcPreferences.Display.HistoryLines">
            <summary>
            历史文本的容量,最多2048行
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AcPreferences.Display.MaxAutoCADWindow">
            <summary>
            最大化自动设置窗体
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AcPreferences.Display.DisplayLayoutTabs">
            <summary>
            显示布局选项卡
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AcPreferences.Display.ImageFrameHighlight">
            <summary>
            图像框架亮点
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AcPreferences.Display.TrueColorImages">
            <summary>
            真彩色图像
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AcPreferences.Display.XRefFadeIntensity">
            <summary>
            参照淡化
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.DBTrans">
            <summary>
            事务栈
            <para>隐匿事务在数据库其中担任的角色</para>
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DBTrans.GetTopTransaction(Autodesk.AutoCAD.DatabaseServices.Database)">
            <summary>
            获取顶层事务
            </summary>
            <param name="database">数据库</param>
            <returns>事务对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBTrans.GetTop(Autodesk.AutoCAD.DatabaseServices.Database)">
            <summary>
            获取给定数据库的顶层 DBTrans 事务
            </summary>
            <param name="database">数据库</param>
            <returns>DBTrans 事务</returns>
            <exception cref="T:IFoxCAD.Basal.ArgumentNullEx"></exception>
        </member>
        <member name="F:IFoxCAD.Cad.DBTrans._dBTrans">
            <summary>
            事务栈
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.DBTrans._documentLock">
            <summary>
            文档锁
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.DBTrans._commit">
            <summary>
            是否提交事务
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.DBTrans._fileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.Top">
            <summary>
            返回当前事务
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.Document">
            <summary>
            文档
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.Editor">
            <summary>
            命令行
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.Transaction">
            <summary>
            事务管理器
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.Database">
            <summary>
            数据库
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DBTrans.#ctor(Autodesk.AutoCAD.ApplicationServices.Document,System.Boolean,System.Boolean)">
            <summary>
            事务栈
            <para>默认构造函数,默认为打开当前文档,默认提交事务</para>
            </summary>
            <param name="doc">要打开的文档</param>
            <param name="commit">事务是否提交</param>
            <param name="docLock">是否锁文档</param>
        </member>
        <member name="M:IFoxCAD.Cad.DBTrans.#ctor(Autodesk.AutoCAD.DatabaseServices.Database,System.Boolean)">
            <summary>
            事务栈
            <para>打开数据库,默认提交事务</para>
            </summary>
            <param name="database">要打开的数据库</param>
            <param name="commit">事务是否提交</param>
        </member>
        <member name="M:IFoxCAD.Cad.DBTrans.#ctor(System.String,System.Boolean,Autodesk.AutoCAD.DatabaseServices.FileOpenMode,System.String,System.Boolean)">
            <summary>
            事务栈
            <para>打开文件,默认提交事务</para>
            </summary>
            <param name="fileName">要打开的文件名</param>
            <param name="commit">事务是否提交</param>
            <param name="fileOpenMode">开图模式</param>
            <param name="password">密码</param>
            <param name="activeOpen">后台打开false;前台打开true(必须设置CommandFlags.Session)</param>
        </member>
        <member name="M:IFoxCAD.Cad.DBTrans.op_Implicit(IFoxCAD.Cad.DBTrans)~Autodesk.AutoCAD.DatabaseServices.Transaction">
            <summary>
            隐式转换为Transaction
            </summary>
            <param name="tr">事务管理器</param>
            <returns>事务管理器</returns>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.BlockTable">
            <summary>
            块表
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.CurrentSpace">
            <summary>
            当前绘图空间
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.ModelSpace">
            <summary>
            模型空间
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.PaperSpace">
            <summary>
            图纸空间
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.LayerTable">
            <summary>
            层表
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.TextStyleTable">
            <summary>
            文字样式表
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.RegAppTable">
            <summary>
            注册应用程序表
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.DimStyleTable">
            <summary>
            标注样式表
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.LinetypeTable">
            <summary>
            线型表
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.UcsTable">
            <summary>
            用户坐标系表
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.ViewTable">
            <summary>
            视图表
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.ViewportTable">
            <summary>
            视口表
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.NamedObjectsDict">
            <summary>
            命名对象字典
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.GroupDict">
            <summary>
            组字典
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.MLeaderStyleDict">
            <summary>
            多重引线样式字典
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.MLStyleDict">
            <summary>
            多线样式字典
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.MaterialDict">
            <summary>
            材质字典
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.TableStyleDict">
            <summary>
            表格样式字典
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.VisualStyleDict">
            <summary>
            视觉样式字典
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.ColorDict">
            <summary>
            颜色字典
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.PlotSettingsDict">
            <summary>
            打印设置字典
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.PlotStyleNameDict">
            <summary>
            打印样式表名字典
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.LayoutDict">
            <summary>
            布局字典
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.DataLinkDict">
            <summary>
            数据链接字典
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.DetailViewStyleDict">
            <summary>
            详细视图样式字典
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.SectionViewStyleDict">
            <summary>
            剖面视图样式字典
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DBTrans.GetObject(Autodesk.AutoCAD.DatabaseServices.ObjectId,Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean)">
            <summary>
            根据对象id获取对象
            </summary>
            <param name="id">对象id</param>
            <param name="openMode">打开模式,默认为只读</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
            <returns>数据库DBObject对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBTrans.GetObject``1(Autodesk.AutoCAD.DatabaseServices.ObjectId,Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean)">
            <summary>
            根据对象id获取图元对象
            </summary>
            <typeparam name="T">要获取的图元对象的类型</typeparam>
            <param name="id">对象id</param>
            <param name="openMode">打开模式,默认为只读</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
            <returns>图元对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBTrans.Task(System.Action,System.Boolean)">
            <summary>
            前台后台任务分别处理
            </summary>
            <remarks>
            备注:<br/>
            0x01 文字偏移问题主要出现线性引擎函数<see cref="M:Autodesk.AutoCAD.DatabaseServices.Database.ResolveXrefs(System.Boolean,System.Boolean)"/>上面,<br/>
                 在 参照绑定/深度克隆 的底层共用此函数导致<br/>
            0x02 后台是利用前台当前数据库进行处理的<br/>
            0x03 跨进程通讯暂无测试(可能存在bug)<br/>
            </remarks>
            <param name="action">委托</param>
            <param name="handlingDBTextDeviation">开启单行文字偏移处理</param>
        </member>
        <member name="M:IFoxCAD.Cad.DBTrans.Abort">
            <summary>
            取消事务
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DBTrans.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.IsDisposed">
            <summary>
            是否释放事务
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DBTrans.Dispose">
            <summary>
            手动调用释放
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DBTrans.Finalize">
            <summary>
            析构函数调用释放
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DBTrans.Dispose(System.Boolean)">
            <summary>
            释放函数
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:IFoxCAD.Cad.DBTrans.ToString">
            <inheritdoc/>
        </member>
        <member name="T:IFoxCAD.Cad.Env">
            <summary>
            系统管理类
            <para>
                封装了一些系统 osmode;cmdecho;dimblk 系统变量<br />
                封装了常用的 文档 编辑器 数据库等对象为静态变量<br />
                封装了配置页面的注册表信息获取函数
            </para>
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Env.Database">
            <summary>
            当前的数据库
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Env.Document">
            <summary>
            当前文档
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Env.Editor">
            <summary>
            编辑器对象
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Env.GsManager">
            <summary>
            图形管理器
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.Env.GetCurrentProfileProperty(System.String,System.String)">
            <summary>
            获取当前配置的数据
            </summary>
            <param name="subSectionName">小节名</param>
            <param name="propertyName">数据名</param>
            <returns>对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Env.GetDialogSection(System.Object)">
            <summary>
            获取对话框配置的数据
            </summary>
            <param name="dialog">对话框对象</param>
            <returns>配置项</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Env.GetGlobalSection(System.String)">
            <summary>
            获取公共配置的数据
            </summary>
            <param name="propertyName">数据名</param>
            <returns>配置项</returns>
        </member>
        <member name="P:IFoxCAD.Cad.Env.CmdActive">
            <summary>
            获取Cad当前是否有活动命令
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Env.OrthoMode">
            <summary>
            控制在光标是否为正交模式， <see langword="true" /> 为打开正交， <see langword="false" /> 为关闭正交
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.Env.DimblkType">
            <summary>
            标注箭头类型
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.Default">
            <summary>
            实心闭合
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.Dot">
            <summary>
            点
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.DotSmall">
            <summary>
            小点
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.DotBlank">
            <summary>
            空心点
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.Origin">
            <summary>
            原点标记
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.Origin2">
            <summary>
            原点标记2
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.Open">
            <summary>
            打开
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.Open90">
            <summary>
            直角
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.Open30">
            <summary>
            30度角
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.Closed">
            <summary>
            闭合
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.Small">
            <summary>
            空心小点
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.Oblique">
            <summary>
            倾斜
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.BoxFilled">
            <summary>
            实心框
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.BoxBlank">
            <summary>
            方框
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.ClosedBlank">
            <summary>
            空心闭合
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.DatumFilled">
            <summary>
            实心基准三角形
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.DatumBlank">
            <summary>
            基准三角形
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.Integral">
            <summary>
            完整标记
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.ArchTick">
            <summary>
            建筑标记
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Env.Dimblk">
            <summary>
            标注箭头属性
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.Env.GetDimblkName(IFoxCAD.Cad.Env.DimblkType)">
            <summary>
            获取标注箭头名
            </summary>
            <param name="dimblk">标注箭头类型</param>
            <returns>箭头名</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Env.GetDimblkId(IFoxCAD.Cad.Env.DimblkType)">
            <summary>
            获取标注箭头ID
            </summary>
            <param name="dimblk">标注箭头类型</param>
            <returns>箭头ID</returns>
        </member>
        <member name="T:IFoxCAD.Cad.Env.OSModeType">
            <summary>
            捕捉模式系统变量类型
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.OSModeType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.OSModeType.End">
            <summary>
            端点
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.OSModeType.Middle">
            <summary>
            中点
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.OSModeType.Center">
            <summary>
            圆心
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.OSModeType.Node">
            <summary>
            节点
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.OSModeType.Quadrant">
            <summary>
            象限点
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.OSModeType.Intersection">
            <summary>
            交点
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.OSModeType.Insert">
            <summary>
            插入点
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.OSModeType.Pedal">
            <summary>
            垂足
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.OSModeType.Tangent">
            <summary>
            切点
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.OSModeType.Nearest">
            <summary>
            最近点
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.OSModeType.Quick">
            <summary>
            几何中心
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.OSModeType.Appearance">
            <summary>
            外观交点
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.OSModeType.Extension">
            <summary>
            延伸
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.OSModeType.Parallel">
            <summary>
            平行
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.OSModeType.Disabled">
            <summary>
            禁用
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Env.OSMode">
            <summary>
            捕捉模式系统变量
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.Env.GetVar(System.String)">
            <summary>
            获取cad系统变量
            </summary>
            <param name="varName">变量名</param>
            <returns>变量值</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Env.SetVar(System.String,System.Object,System.Boolean)">
            <summary>
            设置cad系统变量<br />
            0x01 建议先获取现有变量值和设置的是否相同,否则直接设置会发生异常<br />
            0x02 建议锁文档,否则 Psltscale 设置发生异常<br />
            发生异常的时候vs输出窗口会打印一下,但是如果不介意也没啥问题
            </summary>
            <param name="varName">变量名</param>
            <param name="value">变量值</param>
            <param name="echo">输出异常,默认true;此设置仅为打印到命令栏,无法控制vs输出</param>
        </member>
        <member name="M:IFoxCAD.Cad.Env.GetEnv(System.String)">
            <summary>
            读取acad环境变量<br />
            也能获取win环境变量
            </summary>
            <param name="name">变量名</param>
            <returns>返回值从不为null,需判断<see cref="F:System.String.Empty" /></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Env.SetEnv(System.String,System.String)">
            <summary>
            设置acad环境变量<br />
            它是不会报错的,但是直接设置会写入注册表的,<br />
            如果是设置高低版本cad不同的变量,建议先读取判断再设置<br />
            </summary>
            <param name="name">变量名</param>
            <param name="var">变量值</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Env.AppendSupportPath(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            添加目录至CAD支持搜索的路径
            </summary>
            <param name="folders">目录</param>
        </member>
        <member name="M:IFoxCAD.Cad.Env.RemoveSupportPath(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            删除支持搜索文件目录
            </summary>
            <param name="folders">目录</param>
        </member>
        <member name="M:IFoxCAD.Cad.Env.GetSupportPath">
            <summary>
            获取支持搜索文件目录
            </summary>
            <returns>支持搜索文件目录列表</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Env.AppendTrustedPath(System.String[])">
            <summary>
            添加目录至CAD受信任的位置
            </summary>
            <param name="folders">目录</param>
        </member>
        <member name="M:IFoxCAD.Cad.Env.RemoveTrustedPath(System.String[])">
            <summary>
            移除信任目录
            </summary>
            <param name="folders">目录</param>
        </member>
        <member name="M:IFoxCAD.Cad.Env.GetTrustedPath">
            <summary>
            获取受信任的位置
            </summary>
            <returns>受信任的位置列表</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Env.Print``1(``0)">
            <summary>
            命令行打印，会自动调用对象的toString函数
            </summary>
            <param name="obj">要打印的对象</param>
        </member>
        <member name="M:IFoxCAD.Cad.Env.Printl(System.Object)">
            <summary>
            命令行打印，会自动调用对象的toString函数,在打印内容前添加换行
            </summary>
            <param name="message">要打印的对象</param>
        </member>
        <member name="M:IFoxCAD.Cad.Env.IsUcs">
            <summary>
            判断当前是否在UCS坐标下
            </summary>
            <returns>Bool</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Env.GetDefaultDwgVersion">
            <summary>
            获取当前配置文件的保存版本
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Env.IsDxfVersion(Autodesk.AutoCAD.DatabaseServices.DwgVersion)">
            <summary>
            是否为dxf版本号
            </summary>
            <param name="dwgVersion"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Env.GetAcadYear">
            <summary>
            获取cad年份
            </summary>
            <exception cref="T:System.NotImplementedException">超出年份就报错</exception>
        </member>
        <member name="M:IFoxCAD.Cad.Env.GetAcapVersionDll(System.String)">
            <summary>
            获取带cad版本号的dll
            </summary>
            <param name="str">dll名字</param>
            <returns>dll的前面</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Env.SetVarEx(System.String,System.String)">
            <summary>
            设置cad系统变量<br />
            提供一个反序列化后,无cad异常输出的功能<br />
            注意,您需要再此执行时候设置文档锁<br />
            否则也将导致修改数据库异常<br />
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>成功返回当前值,失败null</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:IFoxCAD.Cad.Env.SaveCadVar(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            设置新系统变量,返回现有系统变量
            </summary>
            <param name="args">设置的变量词典</param>
            <returns>返回现有变量词典,然后下次就可以利用它进行设置回来了</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Env.EntGet(Autodesk.AutoCAD.DatabaseServices.ObjectId)">
            <summary>
            EntGet
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.Env.EntUpd(Autodesk.AutoCAD.DatabaseServices.ObjectId)">
            <summary>
            EntUpd
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.Env.EntMod(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.TypedValue})">
            <summary>
            EntMod
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.Env.GetAdsName(Autodesk.AutoCAD.DatabaseServices.ObjectId)">
            <summary>
            GetAdsName
            </summary>
            <param name="objectId">ObjectId</param>
            <returns>ads_name</returns>
        </member>
        <member name="T:IFoxCAD.Cad.IdleAction">
            <summary>
            空闲执行
            by DYH
            20230114
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.IdleAction.alreadyLoad">
            <summary>
            是否已经加载
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.IdleAction._actions">
            <summary>
            委托列表
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.IdleAction.Count">
            <summary>
            未处理的委托数量
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.IdleAction.Add(System.Action)">
            <summary>
            添加空闲执行委托
            </summary>
            <param name="action">委托</param>
        </member>
        <member name="M:IFoxCAD.Cad.IdleAction.Acap_Idle(System.Object,System.EventArgs)">
            <summary>
            空闲处理事件
            </summary>
            <param name="sender">Acap</param>
            <param name="e">事件参数</param>
        </member>
        <member name="T:IFoxCAD.Cad.IdleNoCmdAction">
            <summary>
            空闲且无命令时执行
            by DYH
            20231230
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.IdleNoCmdAction.alreadyLoad">
            <summary>
            是否已经加载
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.IdleNoCmdAction._actions">
            <summary>
            委托列表
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.IdleNoCmdAction.Count">
            <summary>
            未处理的委托数量
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.IdleNoCmdAction.Add(System.Action)">
            <summary>
            添加空闲执行委托
            </summary>
            <param name="action">委托</param>
        </member>
        <member name="M:IFoxCAD.Cad.IdleNoCmdAction.Acap_Idle(System.Object,System.EventArgs)">
            <summary>
            空闲处理事件
            </summary>
            <param name="sender">Acap</param>
            <param name="e">事件参数</param>
        </member>
        <member name="T:IFoxCAD.Cad.PInvokeCad">
            <summary>
            cad相关的PInvoke
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PInvokeCad.AcdbEntGet(IFoxCAD.Cad.ads_name@)">
            <summary>
            Entget
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PInvokeCad.AcdbEntUpd(IFoxCAD.Cad.ads_name@)">
            <summary>
            EntUpd
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PInvokeCad.AcdbEntMod(System.IntPtr)">
            <summary>
            EntMod
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PInvokeCad.GetAdsName(IFoxCAD.Cad.ads_name@,Autodesk.AutoCAD.DatabaseServices.ObjectId)">
            <summary>
            GetAdsName
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.ads_name">
            <summary>
            用于使用Entget等函数的结构体
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.ads_name.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.SymbolTable`2">
            <summary>
            符号表管理类
            </summary>
            <typeparam name="TTable">符号表</typeparam>
            <typeparam name="TRecord">符号表记录</typeparam>
        </member>
        <member name="P:IFoxCAD.Cad.SymbolTable`2.DTrans">
            <summary>
            事务管理器
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SymbolTable`2.Database">
            <summary>
            数据库
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SymbolTable`2.CurrentSymbolTable">
            <summary>
            当前符号表
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.#ctor(IFoxCAD.Cad.DBTrans,Autodesk.AutoCAD.DatabaseServices.ObjectId,System.Boolean)">
            <summary>
            构造函数，初始化Trans和CurrentSymbolTable属性
            </summary>
            <param name="tr">事务管理器</param>
            <param name="tableId">符号表id</param>
            <param name="defaultBehavior">默认行为:例如打开隐藏图层</param>
        </member>
        <member name="P:IFoxCAD.Cad.SymbolTable`2.Item(System.String)">
            <summary>
            索引器
            </summary>
            <param name="key">对象名称</param>
            <returns>对象的id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.Has(System.String)">
            <summary>
            判断是否存在符号表记录
            </summary>
            <param name="key">记录名</param>
            <returns>存在返回 <see langword="true"/>, 不存在返回 <see langword="false"/></returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.Has(Autodesk.AutoCAD.DatabaseServices.ObjectId)">
            <summary>
            判断是否存在符号表记录
            </summary>
            <param name="objectId">记录id</param>
            <returns>存在返回 <see langword="true"/>, 不存在返回 <see langword="false"/></returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.Add(`1)">
            <summary>
            添加符号表记录
            </summary>
            <param name="record">符号表记录</param>
            <returns>对象id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.Add(System.String,System.Action{`1})">
            <summary>
            添加符号表记录
            </summary>
            <param name="name">符号表记录名</param>
            <param name="action">符号表记录处理函数的无返回值委托</param>
            <returns>对象id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.AddOrChange(System.String,System.Action{`1})">
            <summary>
            有则修改无则添加符号表记录
            </summary>
            <param name="name">符号表记录名</param>
            <param name="action">符号表记录处理函数的无返回值委托</param>
            <returns>对象id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.Remove(`1)">
            <summary>
            删除符号表记录
            </summary>
            <param name="record">符号表记录对象</param>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.Remove(System.String)">
            <summary>
            删除符号表记录
            </summary>
            <param name="name">符号表记录名</param>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.Remove(Autodesk.AutoCAD.DatabaseServices.ObjectId)">
            <summary>
            删除符号表记录
            </summary>
            <param name="id">符号表记录对象id</param>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.Change(System.String,System.Action{`1})">
            <summary>
            修改符号表
            </summary>
            <param name="name">符号表记录名</param>
            <param name="action">修改委托</param>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.Change(Autodesk.AutoCAD.DatabaseServices.ObjectId,System.Action{`1})">
            <summary>
            修改符号表
            </summary>
            <param name="id">符号表记录id</param>
            <param name="action">修改委托</param>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.GetRecord(Autodesk.AutoCAD.DatabaseServices.ObjectId,Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean)">
            <summary>
            获取符号表记录
            </summary>
            <param name="id">符号表记录的id</param>
            <param name="openMode">打开模式</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
            <returns>符号表记录</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.GetRecord(System.String,Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean)">
            <summary>
            获取符号表记录
            </summary>
            <param name="name">符号表记录名</param>
            <param name="openMode">打开模式</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
            <returns>符号表记录</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.GetRecords">
            <summary>
            获取符号表记录
            </summary>
            <returns>符号表记录集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.GetRecordNames">
            <summary>
            获取符号表记录的名字集合
            </summary>
            <returns>记录的名字集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.GetRecordNames(System.Func{`1,System.Boolean})">
            <summary>
            获取符合过滤条件的符号表记录名字集合
            </summary>
            <param name="filter">过滤器委托</param>
            <returns>记录的名字集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.GetRecordFrom(IFoxCAD.Cad.SymbolTable{`0,`1},System.String,System.Boolean)">
            <summary>
            从源数据库拷贝符号表记录
            </summary>
            <param name="table">符号表</param>
            <param name="name">符号表记录名</param>
            <param name="over">是否覆盖，<see langword="true"/> 为覆盖，<see langword="false"/> 为不覆盖</param>
            <returns>对象id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.GetRecordFrom(System.Func{IFoxCAD.Cad.DBTrans,IFoxCAD.Cad.SymbolTable{`0,`1}},System.String,System.String,System.Boolean)">
            <summary>
            从文件拷贝符号表记录
            </summary>
            <param name="tableSelector">符号表过滤器</param>
            <param name="fileName">文件名</param>
            <param name="name">符号表记录名</param>
            <param name="over">是否覆盖，<see langword="true"/> 为覆盖，<see langword="false"/> 为不覆盖</param>
            <returns>对象id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.ForEach(System.Action{`1},Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            遍历符号表,执行委托
            </summary>
            <param name="task">要运行的委托</param>
            <param name="openMode">打开模式,默认为只读</param>
            <param name="checkIdOk">检查id是否删除,默认true</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.ForEach(System.Action{`1,IFoxCAD.Basal.LoopState},Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            遍历符号表,执行委托(允许循环中断)
            </summary>
            <param name="task">要执行的委托</param>
            <param name="openMode">打开模式,默认为只读</param>
            <param name="checkIdOk">检查id是否删除,默认true</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.ForEach(System.Action{`1,IFoxCAD.Basal.LoopState,System.Int32},Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            遍历符号表,执行委托(允许循环中断,输出索引值)
            </summary>
            <param name="task">要执行的委托</param>
            <param name="openMode">打开模式,默认为只读</param>
            <param name="checkIdOk">检查id是否删除,默认true</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:IFoxCAD.Cad.SystemVariableManager">
            <summary>
            系统变量管理器
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.ApBox">
            <summary>
            打开或关闭自动捕捉靶框的显示
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.Aperture">
            <summary>
            对象捕捉靶框的大小，范围[1,50]
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.Aunits">
            <summary>
            图形单位-角度-类型，范围[0-十进制度数,1-度/分/秒,2-百分度,3-弧度,4-勘测单位]
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.Auprec">
            <summary>
            图形单位-角度-精度，范围<c>[0,8]</c>
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.BlockEditor">
            <summary>
            是否在块编辑器中
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.CanNoScale">
            <summary>
            用于设置当前空间的当前注释比例的值
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.CanNoScaleValue">
            <summary>
            用于显示当前的注释性比例
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.CDate">
            <summary>
            储存以公元纪年为基准的日历数据和时间
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.CEColor">
            <summary>
            设置新对象的颜色
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.CELtScale">
            <summary>
            设置新对象的线型比例因子
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.CELType">
            <summary>
            设置新对象的线型
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.CELWeight">
            <summary>
            设置新对象的线宽
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.CircleRad">
            <summary>
            设置圆的默认半径
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.CLayer">
            <summary>
            设置当前图层
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.CleanScreenState">
            <summary>
            用于确定全屏显示是打开或关闭状态
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.CliState">
            <summary>
            指示命令窗口是隐藏还是显示状态
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.CmdActive">
            <summary>
            存在活动命令
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.CmdDia">
            <summary>
            控制是否要打开对话框来显示命令
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.CmdEcho">
            <summary>
            在使用 LISP 的函数时，切换回应为打开或关闭
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.CmdNames">
            <summary>
            当前的命令
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.CTab">
            <summary>
            返回图形中的当前选项卡（模型或布局）的名称
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.CursorSize">
            <summary>
            指定十字光标的显示大小。输入的数字代表十字光标相对于屏幕的比例。<br/>
            范围[1, 100]
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.CVPort">
            <summary>
            当前viewport的编号
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.DblClkEdit">
            <summary>
            是否开启双击
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.DBMod">
            <summary>
            指示图形的修改状态
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.DynMode">
            <summary>
            动态输入
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.DynPrompt">
            <summary>
            动态提示
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.GridMode">
            <summary>
            显示图形栅格
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.HPName">
            <summary>
            当前填充的名称
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.HPScale">
            <summary>
            填充比例
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.Insunits">
            <summary>
            图形单位-插入时的缩放单位
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.LastPoint">
            <summary>
            储存所输入相对于当前用户坐标系统(UCS)的最后点的值
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.Lunits">
            <summary>
            图形单位-长度-类型，范围[1-科学,2-小数,3-工程,4-建筑,5-分数]
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.Luprec">
            <summary>
            图形单位-长度-精度，范围<c>[0,8]</c>
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.Measurement">
            <summary>
            图形单位
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.OrthoMode">
            <summary>
            正交
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.PickFirst">
            <summary>
            允许先选择后执行
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SystemVariableManager.Target">
            <summary>
            视图点
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.OpComp">
            <summary>
            比较运算符类
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.OpComp.Content">
            <summary>
            比较运算符，如：
            <code>"&lt;="</code>
            以及合并比较运算符：
            <code>"&lt;=,&lt;=,="</code>
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.OpComp.Name">
            <summary>
            符号名
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.OpComp.#ctor(System.String,Autodesk.AutoCAD.DatabaseServices.TypedValue)">
            <summary>
            比较运算符类构造函数
            </summary>
            <param name="content">运算符</param>
            <param name="value">数据</param>
        </member>
        <member name="M:IFoxCAD.Cad.OpComp.#ctor(System.String,System.Int32)">
            <summary>
            比较运算符类构造函数
            </summary>
            <param name="content">运算符</param>
            <param name="code">组码</param>
        </member>
        <member name="M:IFoxCAD.Cad.OpComp.#ctor(System.String,System.Int32,System.Object)">
            <summary>
            比较运算符类构造函数
            </summary>
            <param name="content">运算符</param>
            <param name="code">组码</param>
            <param name="value">组码值</param>
        </member>
        <member name="M:IFoxCAD.Cad.OpComp.#ctor(System.String,Autodesk.AutoCAD.DatabaseServices.DxfCode,System.Object)">
            <summary>
            比较运算符类构造函数
            </summary>
            <param name="content">运算符</param>
            <param name="code">组码</param>
            <param name="value">组码值</param>
        </member>
        <member name="M:IFoxCAD.Cad.OpComp.GetValues">
            <summary>
            获取过滤器数据迭代器
            </summary>
            <returns>TypedValue迭代器</returns>
        </member>
        <member name="T:IFoxCAD.Cad.OpEqual">
            <summary>
            相等运算符类
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.OpEqual.Value">
            <summary>
             组码与匹配值的TypedValue类型值
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.OpEqual.Name">
            <summary>
            符号名
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.OpEqual.#ctor(System.Int32)">
            <summary>
            相等运算符类构造函数
            </summary>
            <param name="code">组码</param>
        </member>
        <member name="M:IFoxCAD.Cad.OpEqual.#ctor(System.Int32,System.Object)">
            <summary>
            相等运算符类构造函数
            </summary>
            <param name="code">组码</param>
            <param name="value">组码值</param>
        </member>
        <member name="M:IFoxCAD.Cad.OpEqual.#ctor(Autodesk.AutoCAD.DatabaseServices.DxfCode,System.Object)">
            <summary>
            相等运算符类构造函数
            </summary>
            <param name="code">组码</param>
            <param name="value">组码值</param>
        </member>
        <member name="M:IFoxCAD.Cad.OpEqual.#ctor(Autodesk.AutoCAD.DatabaseServices.TypedValue)">
            <summary>
            相等运算符类构造函数
            </summary>
            <param name="value">组码与组码值的TypedValue类型值</param>
        </member>
        <member name="M:IFoxCAD.Cad.OpEqual.GetValues">
            <summary>
            过滤器数据迭代器
            </summary>
            <returns>TypedValue迭代器</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpEqual.SetValue(System.Object)">
            <summary>
            设置数据
            </summary>
            <param name="value">组码值</param>
        </member>
        <member name="M:IFoxCAD.Cad.OpEqual.SetValue(System.Int32,System.Object)">
            <summary>
            设置数据
            </summary>
            <param name="code">组码</param>
            <param name="value">组码值</param>
        </member>
        <member name="T:IFoxCAD.Cad.OpFilter">
            <summary>
            选择集过滤器抽象类
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.OpFilter.Name">
            <summary>
            过滤器的名字
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.OpFilter.Not">
            <summary>
            只读属性，表示这个过滤器取反
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.GetValues">
            <summary>
            获取TypedValue类型的值的迭代器的抽象方法，子类必须重写
            </summary>
            <returns>TypedValue迭代器</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.op_LogicalNot(IFoxCAD.Cad.OpFilter)">
            <summary>
            非操作符，返回的是OpFilter类型变量的 <see cref="P:IFoxCAD.Cad.OpFilter.Not"/> 属性
            </summary>
            <param name="item">OpFilter类型变量</param>
            <returns>OpFilter对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.ToArray">
            <summary>
            过滤器值转换为 TypedValue 类型数组
            </summary>
            <returns>TypedValue数组</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.op_Implicit(IFoxCAD.Cad.OpFilter)~Autodesk.AutoCAD.EditorInput.SelectionFilter">
            <summary>
            隐式类型转换，将自定义的过滤器转换为 Autocad 认识的选择集过滤器
            </summary>
            <param name="item">过滤器对象</param>
            <returns>
            选择集过滤器.
            </returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Build(System.Func{IFoxCAD.Cad.OpFilter.Op,IFoxCAD.Cad.OpFilter.Op})">
             <summary>
             构建过滤器
             </summary>
             <example>
             举两个利用构建函数创建选择集过滤的例子
             <code>
             <![CDATA[
             例子1：
             var p = new Point3d(10, 10, 0);
             var f = OpFilter.Build(
                     e =>!(e.Dxf(0) == "line" & e.Dxf(8) == "0")
                     | e.Dxf(0) != "circle" & e.Dxf(8) == "2" & e.Dxf(10) >= p);
            
             例子2：
             var f2 = OpFilter.Build(
                     e => e.Or(
                             !e.And(e.Dxf(0) == "line", e.Dxf(8) == "0"),
                             e.And(e.Dxf(0) != "circle", e.Dxf(8) == "2",
                                   e.Dxf(10) <= new Point3d(10, 10, 0))));
             ]]>
             </code></example>
             <param name="func">构建过滤器的函数委托</param>
             <returns>过滤器</returns>
        </member>
        <member name="T:IFoxCAD.Cad.OpFilter.Op">
            <summary>
            过滤器操作符类
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.OpFilter.Op.Filter">
            <summary>
            过滤器属性
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.And(IFoxCAD.Cad.OpFilter.Op[])">
            <summary>
            AND 操作符
            </summary>
            <param name="args">操作符类型的可变参数</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.Or(IFoxCAD.Cad.OpFilter.Op[])">
            <summary>
            or 操作符
            </summary>
            <param name="args">操作符类型的可变参数</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.Dxf(System.Int32)">
            <summary>
            dxf 操作符，此函数只能用于过滤器中，不是组码操作函数
            </summary>
            <param name="code">组码</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.Dxf(System.Int32,System.String)">
            <summary>
            dxf 操作符，此函数只能用于过滤器中，不是组码操作函数
            </summary>
            <param name="code">组码</param>
            <param name="content">关系运算符的值，比如">,>,="</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.op_LogicalNot(IFoxCAD.Cad.OpFilter.Op)">
            <summary>
            非操作符
            </summary>
            <param name="right">过滤器操作符对象</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.op_Equality(IFoxCAD.Cad.OpFilter.Op,System.Object)">
            <summary>
            相等操作符
            </summary>
            <param name="left">过滤器操作符对象</param>
            <param name="right">数据</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.op_Inequality(IFoxCAD.Cad.OpFilter.Op,System.Object)">
            <summary>
            不等操作符
            </summary>
            <param name="left">过滤器操作符对象</param>
            <param name="right">数据</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.op_GreaterThan(IFoxCAD.Cad.OpFilter.Op,System.Object)">
            <summary>
            大于操作符
            </summary>
            <param name="left">过滤器操作符对象</param>
            <param name="right">数据</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.op_LessThan(IFoxCAD.Cad.OpFilter.Op,System.Object)">
            <summary>
            小于操作符
            </summary>
            <param name="left">过滤器操作符对象</param>
            <param name="right">数据</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.op_GreaterThanOrEqual(IFoxCAD.Cad.OpFilter.Op,System.Object)">
            <summary>
            大于等于操作符
            </summary>
            <param name="left">过滤器操作符对象</param>
            <param name="right">数据</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.op_LessThanOrEqual(IFoxCAD.Cad.OpFilter.Op,System.Object)">
            <summary>
            小于等于操作符
            </summary>
            <param name="left">过滤器操作符对象</param>
            <param name="right">数据</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.op_GreaterThanOrEqual(IFoxCAD.Cad.OpFilter.Op,Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            大于等于操作符
            </summary>
            <param name="left">过滤器操作符对象</param>
            <param name="right">点</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.op_LessThanOrEqual(IFoxCAD.Cad.OpFilter.Op,Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            小于等于操作符
            </summary>
            <param name="left">过滤器操作符对象</param>
            <param name="right">点</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.op_BitwiseAnd(IFoxCAD.Cad.OpFilter.Op,IFoxCAD.Cad.OpFilter.Op)">
            <summary>
            并操作符
            </summary>
            <param name="left">过滤器操作符对象</param>
            <param name="right">过滤器操作符对象</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.op_BitwiseOr(IFoxCAD.Cad.OpFilter.Op,IFoxCAD.Cad.OpFilter.Op)">
            <summary>
            或操作符
            </summary>
            <param name="left">过滤器操作符对象</param>
            <param name="right">过滤器操作符对象</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.op_ExclusiveOr(IFoxCAD.Cad.OpFilter.Op,IFoxCAD.Cad.OpFilter.Op)">
            <summary>
            异或操作符
            </summary>
            <param name="left">过滤器操作符对象</param>
            <param name="right">过滤器操作符对象</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.Equals(System.Object)">
            <summary>
            比较函数
            </summary>
            <param name="obj">对象</param>
            <returns>
            是否相等
            </returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.GetHashCode">
            <summary>
            获取HashCode
            </summary>
            <returns>HashCode</returns>
        </member>
        <member name="T:IFoxCAD.Cad.OpList">
            <summary>
            逻辑操作符的列表抽象类
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.OpList.Lst">
            <summary>
            过滤器列表
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.OpList.Add(IFoxCAD.Cad.OpFilter)">
            <summary>
            添加过滤器条件的虚函数，子类可以重写
            </summary>
            <example>举个利用这个类及其子类创建选择集过滤的例子
            <code>
            <![CDATA[
            var fd = new OpOr
                     {
                         !new OpAnd
                         {
                             { 0, "line" },
                             { 8, "0" },
                         },
                         new OpAnd
                         {
                             !new OpEqual(0, "circle"),
                             { 8, "2" },
                            { 10, new Point3d(10,10,0), ">,>,*" }
                         },
                     };
            ]]>
            </code></example>
            <param name="value">过滤器对象</param>
        </member>
        <member name="M:IFoxCAD.Cad.OpList.Add(System.String,System.Int32,System.Object)">
            <summary>
            添加过滤条件
            </summary>
            <param name="speccode">逻辑非~</param>
            <param name="code">组码</param>
            <param name="value">组码值</param>
        </member>
        <member name="M:IFoxCAD.Cad.OpList.Add(System.Int32,System.Object)">
            <summary>
            添加过滤条件
            </summary>
            <param name="code">组码</param>
            <param name="value">组码值</param>
        </member>
        <member name="M:IFoxCAD.Cad.OpList.Add(Autodesk.AutoCAD.DatabaseServices.DxfCode,System.Object)">
            <summary>
            添加过滤条件
            </summary>
            <param name="code">组码</param>
            <param name="value">组码值</param>
        </member>
        <member name="M:IFoxCAD.Cad.OpList.Add(System.Int32,System.Object,System.String)">
            <summary>
            添加过滤条件
            </summary>
            <param name="code">组码</param>
            <param name="value">组码值</param>
            <param name="comp">比较运算符</param>
        </member>
        <member name="M:IFoxCAD.Cad.OpList.Add(Autodesk.AutoCAD.DatabaseServices.DxfCode,System.Object,System.String)">
            <summary>
            添加过滤条件
            </summary>
            <param name="code">组码</param>
            <param name="value">组码值</param>
            <param name="comp">比较运算符</param>
        </member>
        <member name="M:IFoxCAD.Cad.OpList.GetEnumerator">
            <summary>
            过滤器迭代器
            </summary>
            <returns>OpFilter迭代器</returns>
        </member>
        <member name="T:IFoxCAD.Cad.OpAnd">
            <summary>
            逻辑与类
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.OpAnd.Name">
            <summary>
            符号名
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.OpAnd.Add(IFoxCAD.Cad.OpFilter)">
            <summary>
            添加过滤条件
            </summary>
            <param name="value">过滤器对象</param>
        </member>
        <member name="T:IFoxCAD.Cad.OpOr">
            <summary>
            逻辑或类
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.OpOr.Name">
            <summary>
            符号名
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.OpOr.Add(IFoxCAD.Cad.OpFilter)">
            <summary>
            添加过滤条件
            </summary>
            <param name="value">过滤器对象</param>
        </member>
        <member name="T:IFoxCAD.Cad.OpLogi">
            <summary>
            过滤器逻辑运算符抽象类
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.OpLogi.First">
            <summary>
            返回-4组码的开始内容
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.OpLogi.Last">
            <summary>
            返回-4组码的结束内容
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.OpLogi.GetValues">
            <summary>
            获取过滤条件
            </summary>
            <returns>TypedValue迭代器</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpLogi.GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns>OpFilter迭代器</returns>
        </member>
        <member name="T:IFoxCAD.Cad.OpNot">
            <summary>
            逻辑非类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.OpNot.#ctor(IFoxCAD.Cad.OpFilter)">
            <summary>
            逻辑非类构造函数
            </summary>
            <param name="value">OpFilter数据</param>
        </member>
        <member name="P:IFoxCAD.Cad.OpNot.Name">
            <summary>
            符号名
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.OpNot.GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns>OpFilter迭代器</returns>
        </member>
        <member name="T:IFoxCAD.Cad.OpXor">
            <summary>
            逻辑异或类
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.OpXor.Left">
            <summary>
            左操作数
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.OpXor.Right">
            <summary>
            右操作数
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.OpXor.#ctor(IFoxCAD.Cad.OpFilter,IFoxCAD.Cad.OpFilter)">
            <summary>
            逻辑异或类构造函数
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="P:IFoxCAD.Cad.OpXor.Name">
            <summary>
            符号名
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.OpXor.GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns>选择集过滤器类型迭代器</returns>
        </member>
        <member name="T:IFoxCAD.Basal.ArrayEx">
            <summary>
            数组扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.ArrayEx.Combine2``1(``0[],``0[])">
            <summary>
            合并数组
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:IFoxCAD.Basal.ArrayEx.Deduplication``1(System.Collections.Generic.List{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            一维数组按规则消除<br/>
            本例适用于数值类型比较,特定规则比较<br/>
            如果是哈希比较,建议更改为:
            <![CDATA[
             HashSet<T> set = new();
             foreach (var item in listInOut)
                 set.Add(item);
            ]]>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lst">传入有重复成员的数组,原数组修改</param>
            <param name="func">
            传出参数1:数组开头<br/>
            传出参数2:数组结尾<br/>
            返回值比较结尾为<see langword="true"/>就移除<br/>
            </param>
        </member>
        <member name="T:IFoxCAD.Basal.DebugEx">
            <summary>
            调试工具
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.DebugEx.Printl(System.Object,System.Boolean)">
            <summary>
            cad命令切换: DebugEx
            </summary>
            <param name="message">打印信息</param>
            <param name="time">打印时间</param>
        </member>
        <member name="T:IFoxCAD.Basal.EnumEx">
            <summary>
            枚举扩展
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.EnumEx.CleanCache">
            <summary>
            清理缓存
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.EnumEx.GetAttribute``1(System.Enum,System.Boolean)">
            <summary>
            打印枚举的特性<see cref="T:System.ComponentModel.DescriptionAttribute"/>注释内容
            </summary>
            <param name="e">枚举</param>
            <param name="noDescrToString"></param>
            <returns>注释内容</returns>
        </member>
        <member name="M:IFoxCAD.Basal.EnumEx.PrintNote(System.Enum,System.Boolean)">
            <summary>
            打印枚举的特性<see cref="T:System.ComponentModel.DescriptionAttribute"/>注释内容
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.EnumEx.GetDescription(System.Enum)">
            <summary>
            获取枚举的描述内容
            </summary>
            <remarks>不按位运算的情况下,直接获取比较快捷</remarks>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.EnumEx.GetDescription(System.Type,System.String)">
            <summary>
            获取字段的描述内容
            </summary>
            <param name="type"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="T:IFoxCAD.Basal.LinqEx">
            <summary>
            linq 扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.LinqEx.FindByMax``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            按转换函数找出序列中最大键值的对应值
            </summary>
            <typeparam name="TValue">值</typeparam>
            <typeparam name="TKey">键</typeparam>
            <param name="source">序列</param>
            <param name="func">转换函数</param>
            <returns>最大键值的对应值</returns>
        </member>
        <member name="M:IFoxCAD.Basal.LinqEx.FindByMax``2(System.Collections.Generic.IEnumerable{``0},``1@,System.Func{``0,``1})">
            <summary>
            按转换函数找出序列中最大键值的对应值
            </summary>
            <typeparam name="TValue">值</typeparam>
            <typeparam name="TKey">键</typeparam>
            <param name="source">序列</param>
            <param name="maxResult">对应的最大键值</param>
            <param name="func">转换函数</param>
            <returns>最大键值的对应值</returns>
        </member>
        <member name="M:IFoxCAD.Basal.LinqEx.FindByMax``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            按比较器找出序列中最大键值的对应值
            </summary>
            <typeparam name="TValue">值</typeparam>
            <param name="source">序列</param>
            <param name="comparison">比较器</param>
            <returns>最大键值的对应值</returns>
        </member>
        <member name="M:IFoxCAD.Basal.LinqEx.FindByMin``2(System.Collections.Generic.IEnumerable{``0},``1@,System.Func{``0,``1})">
            <summary>
            按转换函数找出序列中最小键值的对应值
            </summary>
            <typeparam name="TValue">值</typeparam>
            <typeparam name="TKey">键</typeparam>
            <param name="source">序列</param>
            <param name="minKey">对应的最小键值</param>
            <param name="func">转换函数</param>
            <returns>最小键值的对应值</returns>
        </member>
        <member name="M:IFoxCAD.Basal.LinqEx.FindByMin``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            按转换函数找出序列中最小键值的对应值
            </summary>
            <typeparam name="TValue">值</typeparam>
            <typeparam name="TKey">键</typeparam>
            <param name="source">序列</param>
            <param name="func">转换函数</param>
            <returns>最小键值的对应值</returns>
        </member>
        <member name="M:IFoxCAD.Basal.LinqEx.FindByMin``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            按比较器找出序列中最小键值的对应值
            </summary>
            <typeparam name="TValue">值</typeparam>
            <param name="source">序列</param>
            <param name="comparison">比较器</param>
            <returns>最小键值的对应值</returns>
        </member>
        <member name="M:IFoxCAD.Basal.LinqEx.FindByExt``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            按转换函数找出序列中最(小/大)键值的对应值
            </summary>
            <typeparam name="TValue">值</typeparam>
            <typeparam name="TKey">键</typeparam>
            <param name="source">序列</param>
            <param name="func">转换函数</param>
            <returns>最(小/大)键值的对应值</returns>
        </member>
        <member name="M:IFoxCAD.Basal.LinqEx.FindByExt``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            按比较器找出序列中最(小/大)键值的对应值
            </summary>
            <typeparam name="TValue">值</typeparam>
            <param name="source">序列</param>
            <param name="comparison">比较器</param>
            <returns>最(小/大)键值的对应值</returns>
        </member>
        <member name="M:IFoxCAD.Basal.LinqEx.FindExt``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            按转换函数找出序列中最(小/大)键值的对应键值
            </summary>
            <typeparam name="TValue">值</typeparam>
            <typeparam name="TKey">键</typeparam>
            <param name="source">序列</param>
            <param name="func">转换函数</param>
            <returns>最(小/大)键值</returns>
        </member>
        <member name="T:IFoxCAD.Basal.LinqEx.SpecComparer`1">
            <summary>
            自定义的比较泛型类
            </summary>
            <typeparam name="T">泛型</typeparam>
        </member>
        <member name="M:IFoxCAD.Basal.LinqEx.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Comparison{``1})">
            <summary>
            使用指定的比较器将序列按升序排序
            </summary>
            <typeparam name="T">输入泛型</typeparam>
            <typeparam name="TKey">输出泛型</typeparam>
            <param name="source">序列</param>
            <param name="keySelector">用于从元素中提取键的函数</param>
            <param name="comparison">比较器</param>
            <returns>排序的序列</returns>
        </member>
        <member name="M:IFoxCAD.Basal.LinqEx.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Comparison{``1})">
            <summary>
            使用指定的比较器将其后的序列按升序排序
            </summary>
            <typeparam name="T">输入泛型</typeparam>
            <typeparam name="TKey">输出泛型</typeparam>
            <param name="source">序列</param>
            <param name="keySelector">用于从元素中提取键的函数</param>
            <param name="comparison">比较器</param>
            <returns>排序的序列</returns>
        </member>
        <member name="T:IFoxCAD.Basal.LoopListNode`1">
            <summary>
            环链表节点
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:IFoxCAD.Basal.LoopListNode`1.Value">
            <summary>
            取值
            </summary>
        </member>
        <member name="P:IFoxCAD.Basal.LoopListNode`1.Previous">
            <summary>
            上一个节点
            </summary>
        </member>
        <member name="P:IFoxCAD.Basal.LoopListNode`1.Next">
            <summary>
            下一个节点
            </summary>
        </member>
        <member name="P:IFoxCAD.Basal.LoopListNode`1.List">
            <summary>
            环链表序列
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.LoopListNode`1.#ctor(`0,IFoxCAD.Basal.LoopList{`0})">
            <summary>
            环链表节点构造函数
            </summary>
            <param name="value">节点值</param>
            <param name="ts">环链表</param>
        </member>
        <member name="M:IFoxCAD.Basal.LoopListNode`1.GetNext(System.Boolean)">
            <summary>
            获取当前节点的临近节点
            </summary>
            <param name="forward">搜索方向标志,<see langword="true"/>为向前搜索,<see langword="false"/>为向后搜索</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopListNode`1.Invalidate">
            <summary>
            无效化成员
            </summary>
        </member>
        <member name="T:IFoxCAD.Basal.LoopList`1">
            <summary>
            环链表
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:IFoxCAD.Basal.LoopList`1.Count">
            <summary>
            节点数
            </summary>
        </member>
        <member name="P:IFoxCAD.Basal.LoopList`1.First">
            <summary>
            首节点
            </summary>
        </member>
        <member name="P:IFoxCAD.Basal.LoopList`1.Last">
            <summary>
            尾节点
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            环链表构造函数
            </summary>
            <param name="values">节点迭代器</param>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.SetFirst(IFoxCAD.Basal.LoopListNode{`0})">
            <summary>
            设置首节点
            </summary>
            <param name="node">节点</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.Swap(IFoxCAD.Basal.LoopListNode{`0},IFoxCAD.Basal.LoopListNode{`0})">
            <summary>
            交换两个节点的值
            </summary>
            <param name="node1">第一个节点</param>
            <param name="node2">第二个节点</param>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.Reverse">
            <summary>
            链内翻转
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.Clear">
            <summary>
            清理
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.ForEach(System.Func{IFoxCAD.Basal.LoopListNode{`0},System.Boolean})">
            <summary>
            从头遍历_非迭代器(此处和通用ForEach冲突,所以内部用)
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.For(System.Func{System.Int32,IFoxCAD.Basal.LoopListNode{`0},System.Boolean})">
            <summary>
            从头遍历_非迭代器(扔出计数)
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.Contains(IFoxCAD.Basal.LoopListNode{`0})">
            <summary>
            是否包含节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.Contains(`0)">
            <summary>
            是否包含值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.Find(`0)">
            <summary>
            查找第一个出现的节点
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.Finds(`0)">
            <summary>
            查找所有出现的节点
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.GetNode(System.Func{`0,System.Boolean})">
            <summary>
            获取节点
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.AddFirst(`0)">
            <summary>
            在首节点之前插入节点,并设置新节点为首节点
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.Add(`0)">
            <summary>
             在尾节点之后插入节点,并设置新节点为尾节点
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.AddLast(`0)">
            <summary>
             在尾节点之后插入节点,并设置新节点为尾节点_此函数仅为与LinkedList同名方法
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            容器内容全部加入到末尾
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.AddBefore(IFoxCAD.Basal.LoopListNode{`0},`0)">
            <summary>
            前面增加节点
            </summary>
            <param name="node"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.AddAfter(IFoxCAD.Basal.LoopListNode{`0},`0)">
            <summary>
            后面增加节点
            </summary>
            <param name="node"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.RemoveFirst">
            <summary>
            删除首节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.RemoveLast">
            <summary>
            删除尾节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.Remove(IFoxCAD.Basal.LoopListNode{`0})">
            <summary>
            删除此参数节点(唯一)
            </summary>
            <param name="node">指定节点</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.Remove(`0)">
            <summary>
            删除含有此参数节点(所有)
            </summary>
            <param name="value">将移除所有含有此值</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.InternalRemove(IFoxCAD.Basal.LoopListNode{`0})">
            <summary>
            删除节点_内部调用
            </summary>
            <param name="node">此值肯定存在当前链表</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.LinkTo(IFoxCAD.Basal.LoopListNode{`0},IFoxCAD.Basal.LoopListNode{`0})">
            <summary>
            链接两节点,并去除这两个节点间的所有节点
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.LinkTo(IFoxCAD.Basal.LoopListNode{`0},IFoxCAD.Basal.LoopListNode{`0},System.Int32)">
            <summary>
            链接两节点,并去除这两个节点间的所有节点
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="number"></param>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.LinkTo(IFoxCAD.Basal.LoopListNode{`0},IFoxCAD.Basal.LoopListNode{`0},System.Int32,System.Boolean)">
            <summary>
            链接两节点,并去除这两个节点间的所有节点
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="number"></param>
            <param name="isFirstChanged"></param>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.GetNodes(IFoxCAD.Basal.LoopListNode{`0})">
            <summary>
            获取节点的查询器
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.GetNodes">
            <summary>
            获取节点的查询器
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.GetEnumerator">
            <summary>
            获取节点值的查询器
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.System#IFormattable#ToString(System.String,System.IFormatProvider)">
            <summary>
            转换为字符串_格式化实现
            </summary>
            <param name="format"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.ToString">
            <summary>
            转换为字符串_无参调用
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.ToString(System.String,System.IFormatProvider)">
            <summary>
            转换为字符串_有参调用
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFoxCAD.Basal.LoopState">
            <summary>
            控制循环结束
            </summary>
        </member>
        <member name="T:IFoxCAD.Basal.ProState">
            <summary>
            控制程序流程
            </summary>
        </member>
        <member name="T:IFoxCAD.Basal.ArgumentNullEx">
            <summary>
            参数null检查类
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.ArgumentNullEx.ThrowIfNull(System.Object,System.String)">
            <summary>
            检查参数是否为 null
            </summary>
            <param name="argument">参数</param>
            <param name="paramName">参数名字</param>
        </member>
        <member name="F:IFoxCAD.Basal.TH32CS.TH32CS_SNAPNOHEAPS">
            <summary>
            原因在于如果不采用改参数的话,有可能快照会占用整个堆的空间
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.TH32CS.TH32CS_INHERIT">
            <summary>
            声明快照句柄是可继承的
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.TH32CS.TH32CS_SNAPHEAPLIST">
            <summary>
            在快照中包含在th32ProcessID中指定的进程的所有的堆
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.TH32CS.TH32CS_SNAPPROCESS">
            <summary>
            在快照中包含系统中所有的进程
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.TH32CS.TH32CS_SNAPTHREAD">
            <summary>
            在快照中包含系统中所有的线程
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.TH32CS.TH32CS_SNAPMODULE">
            <summary>
            在快照中包含在th32ProcessID中指定的进程的所有的模块
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.TH32CS.TH32CS_SNAPALL">
            <summary>
            在快照中包含系统中所有的进程和线程
            </summary>
        </member>
        <member name="T:IFoxCAD.Basal.HookType">
            <summary>
            设置的钩子类型
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_MSGFILTER">
             <summary>
             WH_MSGFILTER 和 WH_SYSMSGFILTER Hooks使我们可以监视菜单,滚动
             条,消息框,对话框消息并且发现用户使用ALT+TAB or ALT+ESC 组合键切换窗口。
             WH_MSGFILTER Hook只能监视传递到菜单,滚动条,消息框的消息,以及传递到通
             过安装了Hook子过程的应用程序建立的对话框的消息。WH_SYSMSGFILTER Hook
             监视所有应用程序消息。
            
             WH_MSGFILTER 和 WH_SYSMSGFILTER Hooks使我们可以在模式循环期间
             过滤消息,这等价于在主消息循环中过滤消息。
            
             通过调用CallMsgFilter function可以直接的调用WH_MSGFILTER Hook。通过使用这
             个函数,应用程序能够在模式循环期间使用相同的代码去过滤消息,如同在主消息循
             环里一样
             </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_JOURNALRECORD">
            <summary>
            WH_JOURNALRECORD Hook用来监视和记录输入事件。典型的,可以使用这
            个Hook记录连续的鼠标和键盘事件,然后通过使用WH_JOURNALPLAYBACK Hook
            来回放。WH_JOURNALRECORD Hook是全局Hook,它不能象线程特定Hook一样
            使用。WH_JOURNALRECORD是system-wide local hooks,它们不会被注射到任何行
            程地址空间
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_JOURNALPLAYBACK">
            <summary>
            WH_JOURNALPLAYBACK Hook使应用程序可以插入消息到系统消息队列。可
            以使用这个Hook回放通过使用WH_JOURNALRECORD Hook记录下来的连续的鼠
            标和键盘事件。只要WH_JOURNALPLAYBACK Hook已经安装,正常的鼠标和键盘
            事件就是无效的。WH_JOURNALPLAYBACK Hook是全局Hook,它不能象线程特定
            Hook一样使用。WH_JOURNALPLAYBACK Hook返回超时值,这个值告诉系统在处
            理来自回放Hook当前消息之前需要等待多长时间（毫秒）。这就使Hook可以控制实
            时事件的回放。WH_JOURNALPLAYBACK是system-wide local hooks,它们不会被
            注射到任何行程地址空间
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_KEYBOARD">
            <summary>
            在应用程序中,WH_KEYBOARD Hook用来监视WM_KEYDOWN and
            WM_KEYUP消息,这些消息通过GetMessage or PeekMessage function返回。可以使
            用这个Hook来监视输入到消息队列中的键盘消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_GETMESSAGE">
            <summary>
            应用程序使用WH_GETMESSAGE Hook来监视从GetMessage or PeekMessage函
            数返回的消息。你可以使用WH_GETMESSAGE Hook去监视鼠标和键盘输入,以及
            其它发送到消息队列中的消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_CALLWNDPROC">
            <summary>
            监视发送到窗口过程的消息,系统在消息发送到接收窗口过程之前调用
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_CBT">
            <summary>
            在以下事件之前,系统都会调用WH_CBT Hook子过程,这些事件包括：
            1. 激活,建立,销毁,最小化,最大化,移动,改变尺寸等窗口事件；
            2. 完成系统指令；
            3. 来自系统消息队列中的移动鼠标,键盘事件；
            4. 设置输入焦点事件；
            5. 同步系统消息队列事件。
            Hook子过程的返回值确定系统是否允许或者防止这些操作中的一个
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_SYSMSGFILTER">
             <summary>
             WH_MSGFILTER 和 WH_SYSMSGFILTER Hooks使我们可以监视菜单,滚动
             条,消息框,对话框消息并且发现用户使用ALT+TAB or ALT+ESC 组合键切换窗口。
             WH_MSGFILTER Hook只能监视传递到菜单,滚动条,消息框的消息,以及传递到通
             过安装了Hook子过程的应用程序建立的对话框的消息。WH_SYSMSGFILTER Hook
             监视所有应用程序消息。
            
             WH_MSGFILTER 和 WH_SYSMSGFILTER Hooks使我们可以在模式循环期间
             过滤消息,这等价于在主消息循环中过滤消息。
            
             通过调用CallMsgFilter function可以直接的调用WH_MSGFILTER Hook。通过使用这
             个函数,应用程序能够在模式循环期间使用相同的代码去过滤消息,如同在主消息循
             环里一样
             </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_MOUSE">
            <summary>
            WH_MOUSE Hook监视从GetMessage 或者 PeekMessage 函数返回的鼠标消息。
            使用这个Hook监视输入到消息队列中的鼠标消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_HARDWARE">
            <summary>
            当调用GetMessage 或 PeekMessage 来从消息队列种查询非鼠标、键盘消息时
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_DEBUG">
            <summary>
            在系统调用系统中与其它Hook关联的Hook子过程之前,系统会调用
            WH_DEBUG Hook子过程。你可以使用这个Hook来决定是否允许系统调用与其它
            Hook关联的Hook子过程
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_SHELL">
             <summary>
             外壳应用程序可以使用WH_SHELL Hook去接收重要的通知。当外壳应用程序是
             激活的并且当顶层窗口建立或者销毁时,系统调用WH_SHELL Hook子过程。
             WH_SHELL 共有５钟情况：
             1. 只要有个top-level、unowned 窗口被产生、起作用、或是被摧毁；
             2. 当Taskbar需要重画某个按钮；
             3. 当系统需要显示关于Taskbar的一个程序的最小化形式；
             4. 当目前的键盘布局状态改变；
             5. 当使用者按Ctrl+Esc去执行Task Manager（或相同级别的程序）。
            
             按照惯例,外壳应用程序都不接收WH_SHELL消息。所以,在应用程序能够接
             收WH_SHELL消息之前,应用程序必须调用SystemParametersInfo function注册它自
             己
             </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_FOREGROUNDIDLE">
            <summary>
            当应用程序的前台线程处于空闲状态时,可以使用WH_FOREGROUNDIDLE
            Hook执行低优先级的任务。当应用程序的前台线程大概要变成空闲状态时,系统就
            会调用WH_FOREGROUNDIDLE Hook子过程
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_CALLWNDPROCRET">
            <summary>
            监视发送到窗口过程的消息,系统在消息发送到接收窗口过程之后调用
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_KEYBOARD_LL">
            <summary>
            监视键盘消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_MOUSE_LL">
            <summary>
            监视鼠标消息
            </summary>
        </member>
        <member name="T:IFoxCAD.Basal.WM">
            <summary>
            消息类型
            作为SendMessage和PostMessage的参数
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CREATE">
            <summary>
            创建一个窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_DESTROY">
            <summary>
            当一个窗口被破坏时发送
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_MOVE">
            <summary>
            移动一个窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SIZE">
            <summary>
            改变一个窗口的大小
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_ACTIVATE">
            <summary>
            一个窗口被激活或失去激活状态
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SETFOCUS">
            <summary>
            一个窗口获得焦点
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_KILLFOCUS">
            <summary>
            一个窗口失去焦点
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_ENABLE">
            <summary>
            一个窗口改变成Enable状态
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SETREDRAW">
            <summary>
            设置窗口是否能重画
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SETTEXT">
            <summary>
            应用程序发送此消息来设置一个窗口的文本
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_GETTEXT">
            <summary>
            应用程序发送此消息来复制对应窗口的文本到缓冲区
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_GETTEXTLENGTH">
            <summary>
            得到与一个窗口有关的文本的长度（不包含空字符）
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_PAINT">
            <summary>
            要求一个窗口重画自己
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CLOSE">
            <summary>
            当一个窗口或应用程序要关闭时发送一个信号
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_QUERYENDSESSION">
            <summary>
            当用户选择结束对话框或程序自己调用ExitWindows函数
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_QUIT">
            <summary>
            用来结束程序运行
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_QUERYOPEN">
            <summary>
            当用户窗口恢复以前的大小位置时,把此消息发送给某个图标
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_ERASEBKGND">
            <summary>
            当窗口背景必须被擦除时（例在窗口改变大小时）
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SYSCOLORCHANGE">
            <summary>
            当系统颜色改变时,发送此消息给所有顶级窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_ENDSESSION">
            <summary>
            当系统进程发出WM_QUERYENDSESSION消息后,此消息发送给应用程序,通知它对话是否结束
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SHOWWINDOW">
            <summary>
            当隐藏或显示窗口是发送此消息给这个窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_ACTIVATEAPP">
            <summary>
            发此消息给应用程序哪个窗口是激活的,哪个是非激活的
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_FONTCHANGE">
            <summary>
            当系统的字体资源库变化时发送此消息给所有顶级窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_TIMECHANGE">
            <summary>
            当系统的时间变化时发送此消息给所有顶级窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CANCELMODE">
            <summary>
            发送此消息来取消某种正在进行的摸态（操作）
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SETCURSOR">
            <summary>
            如果鼠标引起光标在某个窗口中移动且鼠标输入没有被捕获时,就发消息给某个窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_MOUSEACTIVATE">
            <summary>
            当光标在某个非激活的窗口中而用户正按着鼠标的某个键发送此消息给当前窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CHILDACTIVATE">
            <summary>
            发送此消息给MDI子窗口当用户点击此窗口的标题栏或当窗口被激活,移动,改变大小
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_QUEUESYNC">
            <summary>
            此消息由基于计算机的训练程序发送,通过WH_JOURNALPALYBACK的hook程序分离出用户输入消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_GETMINMAXINFO">
            <summary>
            此消息发送给窗口当它将要改变大小或位置
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_PAINTICON">
            <summary>
            发送给最小化窗口当它图标将要被重画
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_ICONERASEBKGND">
            <summary>
            此消息发送给某个最小化窗口,仅当它在画图标前它的背景必须被重画
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NEXTDLGCTL">
            <summary>
            发送此消息给一个对话框程序去更改焦点位置
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SPOOLERSTATUS">
            <summary>
            每当打印管理列队增加或减少一条作业时发出此消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_DRAWITEM">
            <summary>
            当button,combobox,listbox,menu的可视外观改变时发送
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_MEASUREITEM">
            <summary>
            当button, combo box, list box, list view control, or menu item 被创建时
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_VKEYTOITEM">
            <summary>
            此消息有一个LBS_WANTKEYBOARDINPUT风格的发出给它的所有者来响应WM_KEYDOWN消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CHARTOITEM">
            <summary>
            此消息由一个LBS_WANTKEYBOARDINPUT风格的列表框发送给他的所有者来响应WM_CHAR消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SETFONT">
            <summary>
            当绘制文本时程序发送此消息得到控件要用的颜色
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_GETFONT">
            <summary>
            应用程序发送此消息得到当前控件绘制文本的字体
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SETHOTKEY">
            <summary>
            应用程序发送此消息让一个窗口与一个热键相关连
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_GETHOTKEY">
            <summary>
            应用程序发送此消息来判断热键与某个窗口是否有关联
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_QUERYDRAGICON">
            <summary>
            此消息发送给最小化窗口,当此窗口将要被拖放而它的类中没有定义图标,应用程序能返回一个图标或光标的句柄,当用户拖放图标时系统显示这个图标或光标
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_COMPAREITEM">
            <summary>
            发送此消息来判定combobox或listbox新增加的项的相对位置
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_COMPACTING">
            <summary>
            显示内存已经很少了
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_WINDOWPOSCHANGING">
            <summary>
            窗口大小和位置将要被改变时,来调用Setwindowpos函数或其它窗口管理函数
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_WINDOWPOSCHANGED">
            <summary>
            窗口大小和位置已经被改变后,来调用Setwindowpos函数或其它窗口管理函数
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_POWER">
            <summary>
            当系统将要进入暂停状态时发送此消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_COPYDATA">
            <summary>
            当一个应用程序传递数据给另一个应用程序时发送此消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CANCELJOURNA">
            <summary>
            当某个用户取消程序日志激活状态,提交此消息给程序
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NOTIFY">
            <summary>
            当某个控件的某个事件已经发生或这个控件需要得到一些信息时,发送此消息给它的父窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_INPUTLANGCHANGEREQUEST">
            <summary>
            当用户选择某种输入语言,或输入语言的热键改变
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_INPUTLANGCHANGE">
            <summary>
            当平台现场已经被改变后发送此消息给受影响的最顶级窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_TCARD">
            <summary>
            当程序已经初始化windows帮助例程时发送此消息给应用程序
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_HELP">
            <summary>
            此消息显示用户按下了F1,如果某个菜单是激活的,就发送此消息个此窗口关联的菜单,否则就发送给有焦点的窗口,如果当前都没有焦点,就把此消息发送给当前激活的窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_USERCHANGED">
            <summary>
            当用户已经登入或退出后发送此消息给所有的窗口,当用户登入或退出时系统更新用户的具体设置信息,在用户更新设置时系统马上发送此消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NOTIFYFORMAT">
            <summary>
            公用控件,自定义控件和他们的父窗口通过此消息来判断控件是使用ANSI还是UNICODE结构
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CONTEXTMENU">
            <summary>
            当用户某个窗口中点击了一下右键就发送此消息给这个窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_STYLECHANGING">
            <summary>
            当调用SETWINDOWLONG函数将要改变一个或多个窗口的风格时发送此消息给那个窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_STYLECHANGED">
            <summary>
            当调用SETWINDOWLONG函数一个或多个窗口的风格后发送此消息给那个窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_DISPLAYCHANGE">
            <summary>
            当显示器的分辨率改变后发送此消息给所有的窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_GETICON">
            <summary>
            此消息发送给某个窗口来返回与某个窗口有关连的大图标或小图标的句柄
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SETICON">
            <summary>
            程序发送此消息让一个新的大图标或小图标与某个窗口关联
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCCREATE">
            <summary>
            当某个窗口第一次被创建时,此消息在WM_CREATE消息发送前发送
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCDESTROY">
            <summary>
            此消息通知某个窗口,非客户区正在销毁
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCCALCSIZE">
            <summary>
            当某个窗口的客户区域必须被核算时发送此消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCHITTEST">
            <summary>
            移动鼠标/按住/释放鼠标时
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCPAINT">
            <summary>
            程序发送此消息给某个窗口当它（窗口）的框架必须被绘制时
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCACTIVATE">
            <summary>
            此消息发送给某个窗口仅当它的非客户区需要被改变来显示是激活还是非激活状态
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_GETDLGCODE">
            <summary>
            发送此消息给某个与对话框程序关联的控件,widdows控制方位键和TAB键使输入进入此控件通过应
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCMOUSEMOVE">
            <summary>
            当光标在一个窗口的非客户区内移动时发送此消息给这个窗口 非客户区为：窗体的标题栏及窗的边框体
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCLBUTTONDOWN">
            <summary>
            当光标在一个窗口的非客户区同时按下鼠标左键时提交此消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCLBUTTONUP">
            <summary>
            当用户释放鼠标左键同时光标某个窗口在非客户区时发送此消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCLBUTTONDBLCLK">
            <summary>
            当用户双击鼠标左键同时光标某个窗口在非客户区时发送此消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCRBUTTONDOWN">
            <summary>
            当用户按下鼠标右键同时光标又在窗口的非客户区时发送此消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCRBUTTONUP">
            <summary>
            当用户释放鼠标右键同时光标又在窗口的非客户区时发送此消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCRBUTTONDBLCLK">
            <summary>
            当用户双击鼠标右键同时光标某个窗口在非客户区时发送此消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCMBUTTONDOWN">
            <summary>
            当用户按下鼠标中键同时光标又在窗口的非客户区时发送此消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCMBUTTONUP">
            <summary>
            当用户释放鼠标中键同时光标又在窗口的非客户区时发送此消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCMBUTTONDBLCLK">
            <summary>
            当用户双击鼠标中键同时光标又在窗口的非客户区时发送此消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_KEYFIRST">
            <summary>
            按下一个键 == WM_KEYDOWN
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_KEYDOWN">
            <summary>
            按下一个键
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_KEYUP">
            <summary>
            释放一个键
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CHAR">
            <summary>
            按下某键,并已发出WM_KEYDOWN, WM_KEYUP消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_DEADCHAR">
            <summary>
            当用translatemessage函数翻译WM_KEYUP消息时发送此消息给拥有焦点的窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SYSKEYDOWN">
            <summary>
            当用户按住ALT键同时按下其它键时提交此消息给拥有焦点的窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SYSKEYUP">
            <summary>
            当用户释放一个键同时ALT 键还按着时提交此消息给拥有焦点的窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SYSCHAR">
            <summary>
            当WM_SYSKEYDOWN消息被TRANSLATEMESSAGE函数翻译后提交此消息给拥有焦点的窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SYSDEADCHAR">
            <summary>
            当WM_SYSKEYDOWN消息被TRANSLATEMESSAGE函数翻译后发送此消息给拥有焦点的窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_INITDIALOG">
            <summary>
            在一个对话框程序被显示前发送此消息给它,通常用此消息初始化控件和执行其它任务
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_COMMAND">
            <summary>
            当用户选择一条菜单命令项或当某个控件发送一条消息给它的父窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SYSCOMMAND">
            <summary>
            当用户选择窗口菜单的一条命令或最大化最小化时窗口前会收到此消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_TIMER">
            <summary>
            发生了定时器事件
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_HSCROLL">
            <summary>
            当一个窗口标准水平滚动条产生一个滚动事件时发送此消息给那个窗口,也发送给拥有它的控件
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_VSCROLL">
            <summary>
            当一个窗口标准垂直滚动条产生一个滚动事件时发送此消息给那个窗口也,发送给拥有它的控件
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_INITMENU">
            <summary>
            当一个菜单将要被激活时发送此消息,它发生在用户菜单条中的某项或按下某个菜单键,它允许程序在显示前更改菜单
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_INITMENUPOPUP">
            <summary>
            当一个下拉菜单或子菜单将要被激活时发送此消息,它允许程序在它显示前更改菜单,而不要改变全部
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_MENUSELECT">
            <summary>
            当用户选择一条菜单项时发送此消息给菜单的所有者（一般是窗口）
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_MENUCHAR">
            <summary>
            当菜单已被激活用户按下了某个键（不同于加速键）,发送此消息给菜单的所有者
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_ENTERIDLE">
            <summary>
            当一个模态对话框或菜单进入空载状态时发送此消息给它的所有者,一个模态对话框或菜单进入空载状态就是在处理完一条或几条先前的消息后没有消息它的列队中等待
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CTLCOLORMSGBOX">
            <summary>
            在windows绘制消息框前发送此消息给消息框的所有者窗口,通过响应这条消息,所有者窗口可以通过使用给定的相关显示设备的句柄来设置消息框的文本和背景颜色
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CTLCOLOREDIT">
            <summary>
            当一个编辑型控件将要被绘制时发送此消息给它的父窗口通过响应这条消息,所有者窗口可以通过使用给定的相关显示设备的句柄来设置编辑框的文本和背景颜色
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CTLCOLORLISTBOX">
            <summary>
            当一个列表框控件将要被绘制前发送此消息给它的父窗口通过响应这条消息,所有者窗口可以通过使用给定的相关显示设备的句柄来设置列表框的文本和背景颜色
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CTLCOLORBTN">
            <summary>
            当一个按钮控件将要被绘制时发送此消息给它的父窗口通过响应这条消息,所有者窗口可以通过使用给定的相关显示设备的句柄来设置按纽的文本和背景颜色
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CTLCOLORDLG">
            <summary>
            当一个对话框控件将要被绘制前发送此消息给它的父窗口通过响应这条消息,所有者窗口可以通过使用给定的相关显示设备的句柄来设置对话框的文本背景颜色
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CTLCOLORSCROLLBAR">
            <summary>
            当一个滚动条控件将要被绘制时发送此消息给它的父窗口通过响应这条消息,所有者窗口可以通过使用给定的相关显示设备的句柄来设置滚动条的背景颜色
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CTLCOLORSTATIC">
            <summary>
            当一个静态控件将要被绘制时发送此消息给它的父窗口通过响应这条消息,所有者窗口可以通过使用给定的相关显示设备的句柄来设置静态控件的文本和背景颜色
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_MOUSEWHEEL">
            <summary>
            当鼠标轮子转动时发送此消息个当前有焦点的控件
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_MBUTTONDBLCLK">
            <summary>
            双击鼠标中键
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_MBUTTONUP">
            <summary>
            释放鼠标中键
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_MOUSEMOVE">
            <summary>
            移动鼠标时发生,同WM_MOUSEFIRST
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_LBUTTONDOWN">
            <summary>
            按下鼠标左键
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_LBUTTONUP">
            <summary>
            释放鼠标左键
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_LBUTTONDBLCLK">
            <summary>
            双击鼠标左键
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_RBUTTONDOWN">
            <summary>
            按下鼠标右键
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_RBUTTONUP">
            <summary>
            释放鼠标右键
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_RBUTTONDBLCLK">
            <summary>
            双击鼠标右键
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_MBUTTONDOWN">
            <summary>
            按下鼠标中键
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CLIPBOARDUPDATE">
            <summary>
            执行复制成功
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.MOUSEEVENTF.MOVE">
            <summary>
            移动鼠标
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.MOUSEEVENTF.LEFTDOWN">
            <summary>
            模拟鼠标左键按下
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.MOUSEEVENTF.LEFTUP">
            <summary>
            模拟鼠标左键抬起
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.MOUSEEVENTF.RIGHTDOWN">
            <summary>
            模拟鼠标右键按下
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.MOUSEEVENTF.RIGHTUP">
            <summary>
            模拟鼠标右键抬起
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.MOUSEEVENTF.MIDDLEDOWN">
            <summary>
            模拟鼠标中键按下
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.MOUSEEVENTF.MIDDLEUP">
            <summary>
            模拟鼠标中键抬起
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.MOUSEEVENTF.ABSOLUTE">
            <summary>
            标示是否采用绝对坐标
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.MOUSEEVENTF.WHEEL">
            <summary>
            模拟鼠标滚轮滚动操作,必须配合dwData参数
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.NCmdShow.SW_HIDE">
            <summary>
            隐藏窗口并激活其他窗口。nCmdShow
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.NCmdShow.SW_SHOWNORMAL">
            <summary>
            正常态的窗口(非最大化和非最小化)
            激活并显示一个窗口。如果窗口被最小化或最大化,系统将其恢复到原来的尺寸和大小。应用程序在第一次显示窗口的时候应该指定此标志
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.NCmdShow.SW_SHOWMINIMIZED">
            <summary>
            激活窗口并将其最小化
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.NCmdShow.SW_SHOWMAXIMIZED">
            <summary>
            激活窗口并将其最大化
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.NCmdShow.SW_MAXIMIZE">
            <summary>
            最大化指定的窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.NCmdShow.SW_SHOWNOACTIVATE">
            <summary>
            以窗口最近一次的大小和状态显示窗口。激活窗口仍然维持激活状态
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.NCmdShow.SW_SHOW">
            <summary>
            在窗口原来的位置以原来的尺寸激活和显示窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.NCmdShow.SW_MINIMIZE">
            <summary>
            最小化指定的窗口并且激活在Z序中的下一个顶层窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.NCmdShow.SW_SHOWMINNOACTIVE">
            <summary>
            窗口最小化,激活窗口仍然维持激活状态
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.NCmdShow.SW_SHOWNA">
            <summary>
            以窗口原来的状态显示窗口。激活窗口仍然维持激活状态
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.NCmdShow.SW_RESTORE">
            <summary>
            激活并显示窗口。如果窗口最小化或最大化,则系统将窗口恢复到原来的尺寸和位置。在恢复最小化窗口时,应用程序应该指定这个标志
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.NCmdShow.SW_SHOWDEFAULT">
            <summary>
            依据在STARTUPINFO结构中指定的SW_FLAG标志设定显示状态,STARTUPINFO 结构是由启动应用程序的程序传递给CreateProcess函数的
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.NCmdShow.SW_FORCEMINIMIZE">
            <summary>
            在WindowNT5.0中最小化窗口,即使拥有窗口的线程被挂起也会最小化。在从其他线程最小化窗口时才使用这个参数
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.GWL.GWL_WNDPROC">
            <summary>
            获取、设置窗口过程的地址
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.GWL.GWL_HINSTANCE">
            <summary>
            获取应用程序的实例句柄
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.GWL.GWL_HWNDPARENT">
            <summary>
            获取父窗口句柄
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.GWL.GWL_ID">
            <summary>
            获取窗口标识
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.GWL.GWL_STYLE">
            <summary>
            获取、设置窗口样式
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.GWL.GWL_EXSTYLE">
            <summary>
            获取、设置窗口扩展样式
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.GWL.GWL_USERDATA">
            <summary>
            获取、设置与窗口关联的自定义数据
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.GetWindowCmd.GW_HWNDFIRST">
            <summary>
            返回的句柄标识了在Z序最高端的相同类型的窗口。
            如果指定窗口是最高端窗口,则该句柄标识了在Z序最高端的最高端窗口；
            如果指定窗口是顶层窗口,则该句柄标识了在z序最高端的顶层窗口：
            如果指定窗口是子窗口,则句柄标识了在Z序最高端的同属窗口。
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.GetWindowCmd.GW_HWNDLAST">
            <summary>
            返回的句柄标识了在z序最低端的相同类型的窗口。
            如果指定窗口是最高端窗口,则该柄标识了在z序最低端的最高端窗口：
            如果指定窗口是顶层窗口,则该句柄标识了在z序最低端的顶层窗口；
            如果指定窗口是子窗口,则句柄标识了在Z序最低端的同属窗口。
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.GetWindowCmd.GW_HWNDNEXT">
            <summary>
            返回的句柄标识了在Z序中指定窗口下的相同类型的窗口。
            如果指定窗口是最高端窗口,则该句柄标识了在指定窗口下的最高端窗口：
            如果指定窗口是顶层窗口,则该句柄标识了在指定窗口下的顶层窗口；
            如果指定窗口是子窗口,则句柄标识了在指定窗口下的同属窗口。
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.GetWindowCmd.GW_HWNDPREV">
            <summary>
            返回的句柄标识了在Z序中指定窗口上的相同类型的窗口。
            如果指定窗口是最高端窗口,则该句柄标识了在指定窗口上的最高端窗口；
            如果指定窗口是顶层窗口,则该句柄标识了在指定窗口上的顶层窗口；
            如果指定窗口是子窗口,则句柄标识了在指定窗口上的同属窗口。
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.GetWindowCmd.GW_OWNER">
            <summary>
            返回的句柄标识了指定窗口的所有者窗口（如果存在）。
            GW_OWNER与GW_CHILD不是相对的参数,没有父窗口的含义,如果想得到父窗口请使用GetParent()。
            例如：例如有时对话框的控件的GW_OWNER,是不存在的。
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.GetWindowCmd.GW_CHILD">
            <summary>
            如果指定窗口是父窗口,则获得的是在Tab序顶端的子窗口的句柄,否则为NULL。
            函数仅检查指定父窗口的子窗口,不检查继承窗口。
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.GetWindowCmd.GW_ENABLEDPOPUP">
            <summary>
            （WindowsNT 5.0）返回的句柄标识了属于指定窗口的处于使能状态弹出式窗口（检索使用第一个由GW_HWNDNEXT 查找到的满足前述条件的窗口）；
            如果无使能窗口,则获得的句柄与指定窗口相同。
            </summary>
        </member>
        <member name="T:IFoxCAD.Basal.SystemEx">
            <summary>
            系统扩展
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.SystemEx.CloseProc(System.String)">
            <summary>
            关闭进程
            </summary>
            <param name="procName">进程名</param>
            <returns>成功返回<c>true</c></returns>
        </member>
        <member name="T:IFoxCAD.Basal.PInvokeUser32">
            <summary>
            PInvokeUser32
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.PInvokeUser32.FindWindow(System.String,System.String)">
            <summary>
            查找窗口
            </summary>
            <param name="lpClassName">类名</param>
            <param name="lpWindowName">窗口名</param>
            <returns>窗口句柄</returns>
        </member>
        <member name="M:IFoxCAD.Basal.PInvokeUser32.SendMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            发送指定消息给一个或多个接收对象，常用于窗口或控件的消息处理
            </summary>
            <param name="hWnd">目标窗口的句柄如果为0，表示发送给所有顶级窗口</param>
            <param name="msg">要发送的消息标识符</param>
            <param name="wParam">附加的消息特定信息，通常用于传递额外的参数</param>
            <param name="lParam">附加的消息特定信息，通常用于传递额外的参数</param>
            <returns>返回值取决于发送的消息类型，通常表示操作的结果或状态</returns>
        </member>
        <member name="M:IFoxCAD.Basal.PInvokeUser32.GetClientRect(System.IntPtr,IFoxCAD.Basal.WindowsAPI.IntRect@)">
            <summary>
            获取窗口客户区的大小,客户区为窗口中除标题栏,菜单栏之外的地方
            </summary>
            <param name="hwnd"></param>
            <param name="lpRect"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.PInvokeUser32.GetWindowThreadProcessId(System.IntPtr,System.UInt32@)">
            <summary>
            查找主线程<br/>
            代替<see cref="M:System.AppDomain.GetCurrentThreadId"/><br/>
            托管线程和他们不一样: <see>
                <cref>System.Threading.Thread.CurrentThread.ManagedThreadId</cref>
            </see>
            </summary>
            <param name="hWnd">主窗口</param>
            <param name="lpdwProcessId">进程ID</param>
            <returns>线程ID</returns>
        </member>
        <member name="M:IFoxCAD.Basal.PInvokeUser32.SetFocus(System.IntPtr)">
            <summary>
            设置焦点
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.PInvokeUser32.GetForegroundWindow">
            <summary>
            获取当前窗口
            </summary>
            <returns>当前窗口标识符</returns>
        </member>
        <member name="M:IFoxCAD.Basal.PInvokeUser32.PostMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            将一个消息的组成部分合成一个消息并放入对应线程消息队列的方法
            </summary>
            <param name="hhwnd">控件句柄</param>
            <param name="msg">消息是什么键盘按键、鼠标点击还是其他</param>
            <param name="wparam"></param>
            <param name="lparam"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.PInvokeUser32.KeybdEvent(System.Byte,System.Byte,System.Int32,System.Int32)">
            <summary>
            发送击键
            </summary>
            <param name="bVk"></param>
            <param name="bScan"></param>
            <param name="dwFlags"></param>
            <param name="dwExtraInfo"></param>
        </member>
        <member name="M:IFoxCAD.Basal.PInvokeUser32.GetWindowTextLength(System.IntPtr)">
            <summary>
            获取窗口文字的长度
            </summary>
            <param name="hWnd">窗口标识符</param>
            <returns>文字长度</returns>
        </member>
        <member name="M:IFoxCAD.Basal.PInvokeUser32.GetWindowText(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
            获取窗口的标题
            </summary>
            <param name="hWnd">窗口标识符</param>
            <param name="text">窗口文字</param>
            <param name="nMaxCount">文字长度</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.PInvokeUser32.GetKeyboardLayout(System.Int32)">
            <summary>
            获取某个线程的输入法布局
            </summary>
            <param name="threadId">线程ID</param>
            <returns>布局码</returns>
        </member>
        <member name="M:IFoxCAD.Basal.PInvokeUser32.GetKeyState(System.Int32)">
            <summary>
            获取按键的当前状态
            </summary>
            <param name="nVirtualKey">按键虚拟代码</param>
            <returns>表示没按下&gt;0;按下&lt;0</returns>
        </member>
        <member name="M:IFoxCAD.Basal.PInvokeUser32.GetClassName(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
            检索指定窗口所属的类的名称
            </summary>
            <param name="hWnd">窗口标识符</param>
            <param name="lpClassName">存储窗口类名称的字符串缓冲区</param>
            <param name="nMaxCount">缓冲区的最大字符数</param>
            <returns>如果函数成功，返回值是窗口类名的长度，不包括终止的空字符如果窗口没有类名，返回值为零如果函数失败，返回值为零，并且 GetLastError 返回值提供扩展错误信息</returns>
        </member>
        <member name="M:IFoxCAD.Basal.PInvokeUser32.GetWindow(System.IntPtr,System.UInt32)">
            <summary>
            检索由指定窗口拥有的下一个窗口的句柄
            </summary>
            <param name="hWnd">要获取其拥有的下一个窗口的句柄的窗口</param>
            <param name="uCmd">指定要获取的窗口的类型</param>
            <returns>如果函数成功，返回值是指定窗口拥有的下一个窗口的句柄如果没有更多窗口，返回值为<c>null</c></returns>
        </member>
        <member name="M:IFoxCAD.Basal.PInvokeUser32.GetTopWindow(System.IntPtr)">
            <summary>
            检索指定窗口的子窗口链表中的第一个窗口
            </summary>
            <param name="hWnd">要获取其第一个子窗口的父窗口句柄</param>
            <returns>如果函数成功，返回值是子窗口的句柄如果没有子窗口，返回值为<c>null</c></returns>
        </member>
        <member name="M:IFoxCAD.Basal.PInvokeUser32.GetGUIThreadInfo(System.UInt32,IFoxCAD.Basal.PInvokeUser32.GuiThreadInfo@)">
            <summary>
            获取线程对应的窗体信息
            </summary>
            <param name="idThread">线程</param>
            <param name="lpgui"></param>
            <returns></returns>
        </member>
        <member name="T:IFoxCAD.Basal.PInvokeUser32.GuiThreadInfo">
            <summary>
            获取线程对应的窗体信息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.PInvokeUser32.GuiThreadInfo.cbSize">
            <summary>
            结构体的大小
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.PInvokeUser32.GuiThreadInfo.flags">
            <summary>
            状态标志
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.PInvokeUser32.GuiThreadInfo.hwndActive">
            <summary>
            当前激活的窗口句柄
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.PInvokeUser32.GuiThreadInfo.hwndFocus">
            <summary>
            当前焦点的窗口句柄
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.PInvokeUser32.GuiThreadInfo.hwndCapture">
            <summary>
            当前捕获的窗口句柄
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.PInvokeUser32.GuiThreadInfo.hwndMenuOwner">
            <summary>
            当前菜单所有者的窗口句柄
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.PInvokeUser32.GuiThreadInfo.hwndMoveSize">
            <summary>
            当前正在移动或改变大小的窗口句柄
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.PInvokeUser32.GuiThreadInfo.hwndCaret">
            <summary>
            当前插入符号的窗口句柄
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.PInvokeUser32.GuiThreadInfo.rcCaret">
            <summary>
            插入符号的位置和大小
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.PInvokeUser32.GuiThreadInfo.Create(System.UInt32)">
            <summary>
            创建GuiThreadInfo实例
            </summary>
            <param name="windowThreadProcessId">窗口线程的进程ID</param>
            <returns>GuiThreadInfo实例</returns>
        </member>
        <member name="M:IFoxCAD.Basal.PInvokeUser32.GetFocus">
            <summary>
            获取当前焦点的窗口句柄
            </summary>
            <returns>窗口句柄</returns>
        </member>
        <member name="M:IFoxCAD.Basal.PInvokeUser32.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            发送消息到指定窗口
            </summary>
            <param name="hwnd">窗口句柄</param>
            <param name="msg">消息</param>
            <param name="wParam">附加参数</param>
            <param name="lParam">附加参数</param>
            <returns>消息处理结果</returns>
        </member>
        <member name="M:IFoxCAD.Basal.PInvokeUser32.GetParent(System.IntPtr)">
            <summary>
            获取指定窗口的父窗口句柄
            </summary>
            <param name="hWnd">窗口句柄</param>
            <returns>父窗口句柄</returns>
        </member>
        <member name="M:IFoxCAD.Basal.PInvokeUser32.ToAscii(System.Int32,System.Int32,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            将虚拟键代码和扫描码转换为ASCII字符
            </summary>
            <param name="uVirtKey">虚拟键代码</param>
            <param name="uScancode">扫描码</param>
            <param name="lpdKeyState">键盘状态</param>
            <param name="lpwTransKey">转换后的字符</param>
            <param name="fuState">状态标志</param>
            <returns>转换的字符数</returns>
        </member>
        <member name="M:IFoxCAD.Basal.PInvokeUser32.GetActiveWindow">
            <summary>
            获取当前激活的窗口句柄
            </summary>
            <returns>窗口句柄</returns>
        </member>
        <member name="M:IFoxCAD.Basal.PInvokeUser32.GetWindowThreadProcessId(System.IntPtr,System.Int32@)">
            <summary>
            获取窗口对应的线程和进程ID
            </summary>
            <param name="hwnd">窗口句柄</param>
            <param name="lpdwProcessId">进程ID</param>
            <returns>线程ID</returns>
        </member>
        <member name="M:IFoxCAD.Basal.PInvokeUser32.IsIconic(System.Int32)">
            <summary>
            检查窗口是否最小化
            </summary>
            <param name="hWnd">窗口句柄</param>
            <returns>是否最小化</returns>
        </member>
        <member name="M:IFoxCAD.Basal.PInvokeUser32.IsWindowEnabled(System.IntPtr)">
            <summary>
            检查窗口是否启用
            </summary>
            <param name="hWnd">窗口句柄</param>
            <returns>是否启用</returns>
        </member>
        <member name="T:IFoxCAD.Basal.WindowsAPI">
            <summary>
            系统Api
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.GetProcAddress(System.IntPtr,System.String)">
            <summary>
            获取要引入的函数,将符号名或标识号转换为DLL内部地址
            </summary>
            <param name="hModule">exe/dll句柄</param>
            <param name="procName">接口名</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.GlobalLock(System.IntPtr)">
            <summary>
            锁定内存
            </summary>
            <param name="hMem"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.GlobalUnlock(System.IntPtr)">
            <summary>
            解锁内存
            </summary>
            <param name="hMem"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.GlobalSize(System.IntPtr)">
            <summary>
            获取内存块大小
            </summary>
            <param name="hMem"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.GlobalLockTask(System.IntPtr,System.Action{System.IntPtr})">
            <summary>
            锁定和释放内存
            </summary>
            <param name="data">锁定数据对象指针</param>
            <param name="task">返回锁定的内存片段指针,锁定期间执行任务</param>
            <returns>是否锁定成功</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.BytesToStruct``1(System.Byte[],System.Int32@)">
            <summary>
            byte数组转结构体
            </summary>
            <param name="bytes">byte数组</param>
            <param name="typeSize">返回的结构大小</param>
            <returns>返回的结构体</returns>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.BytesToStruct``1(System.Byte[])">
            <summary>
            byte数组转结构体
            </summary>
            <param name="bytes">byte数组</param>
            <returns>返回的结构体</returns>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.StructToBytes``1(``0)">
            <summary>
            结构体转byte数组
            <a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/builtin-types/unmanaged-types">unmanaged</a>
            </summary>
            <param name="structObj">要转换的结构体</param>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.ImmGetVirtualKey(System.IntPtr)">
            <summary>
            获取输入法的虚拟键码
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.ImmGetConversionStatus(System.IntPtr,System.Int32@,System.Int32@)">
            <summary>
            获取输入法状态
            </summary>
            <param name="himc">输入法标识符</param>
            <param name="lpdw">输入模式</param>
            <param name="lpdw2">指向函数在其中检索句子模式值的变量的指针</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.ImmGetContext(System.IntPtr)">
            <summary>
            获取指定窗口的输入法状态
            </summary>
            <param name="hwnd">窗口句柄</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.ImmSetOpenStatus(System.IntPtr,System.Boolean)">
            <summary>
            设置输入法的当前状态
            </summary>
            <param name="hwnd">窗口句柄</param>
            <param name="fOpen"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.ImmGetOpenStatus(System.IntPtr)">
            <summary>
            输入法打开状态
            </summary>
            <param name="hwnd"></param>
            <returns>非0打开,0关闭;(true中文,false英文)</returns>
        </member>
        <member name="T:IFoxCAD.Basal.WindowsAPI.KeyboardHookStruct">
            <summary>
            Hook键盘数据结构
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.CheckLowLevelHooksTimeout(System.Int32)">
            <summary>
            注册表增加低级钩子超时处理,防止系统不允许,
            否则:偶发性出现 键盘钩子不能用了,而且退出时产生 1404 错误
            https://www.cnblogs.com/songr/p/5131655.html
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.CloseWindow(System.IntPtr)">
            <summary>
            关闭窗口
            </summary>
            <param name="hWnd"></param>
        </member>
        <member name="T:IFoxCAD.Basal.RandomEx">
            <summary>
            随机值扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.RandomEx.NextDouble(System.Random,System.Double,System.Double)">
            <summary>
            生成一个指定范围的浮点数值<br/>
            <a href="https://www.cnblogs.com/qingheshiguang/p/15806915.html">相关链接</a>
            </summary>
            <param name="ran">一个随机值产生器</param>
            <param name="minValue">范围最小浮点数值</param>
            <param name="maxValue">范围最大浮点数值</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.RandomEx.NextDouble(System.Double,System.Double)">
            <summary>
            生成一个指定范围的浮点数值
            </summary>
            <param name="minValue">范围最小浮点数值</param>
            <param name="maxValue">范围最大浮点数值</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.RandomEx.NextBool">
            <summary>
            生成一个布尔随机数
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.RandomEx.NextBool(System.Random)">
            <summary>
            生成一个布尔随机数<br/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.RandomEx.NextString(System.String[])">
            <summary>
            生成一个不连续或指定值的随机值
            </summary>
            <param name="arr">一个字符串数组</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.RandomEx.NextString(System.Random,System.String[])">
            <summary>
            生成一个不连续或指定值的随机值
            </summary>
            <param name="ran">一个随机值产生器</param>
            <param name="arr">一个字符串数组</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.RandomEx.NextDouble(System.Double[])">
            <summary>
            生成一个不连续或指定值的随机值
            </summary>
            <param name="arr">一个双精度值数组</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.RandomEx.NextDouble(System.Random,System.Double[])">
            <summary>
            生成不连续或指定值的随机值
            </summary>
            <param name="ran">一个随机值产生器</param>
            <param name="arr">一个双精度值数组</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.RandomEx.NextInt(System.Int32)">
            <summary>
            生成指定范围内的整数
            </summary>
            <param name="max">范围最大整数值</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.RandomEx.NextInt(System.Random,System.Int32)">
            <summary>
            生成指定范围内的整数
            </summary>
            <param name="ran">一个随机值产生器</param>
            <param name="max">范围最大整数值</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.RandomEx.NextInt(System.Int32,System.Int32)">
            <summary>
            生成指定范围内的整数
            </summary>
            <param name="min">范围的最小整数</param>
            <param name="max">范围的最大整数</param>
            <returns>返回一个介于<paramref name="min"/>与<paramref name="max"/>之间的整数</returns>
        </member>
        <member name="M:IFoxCAD.Basal.RandomEx.NextInt(System.Random,System.Int32,System.Int32)">
            <summary>
            生成指定范围内的整数
            </summary>
            <param name="ran">一个随机值产生器</param>
            <param name="min">范围的最小整数</param>
            <param name="max">范围的最大整数</param>
            <returns>返回一个介于<paramref name="min"/>与<paramref name="max"/>之间的整数</returns>
        </member>
        <member name="M:IFoxCAD.Basal.RandomEx.NextColor">
            <summary>
            生成一个随机颜色
            </summary>
            <returns>返回<see cref="T:System.Drawing.Color"/></returns>
        </member>
        <member name="M:IFoxCAD.Basal.RandomEx.NextColor(System.Random)">
            <summary>
            生成一个随机颜色
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.RandomEx.GetRandom">
            <summary>
            带有随机种子的随机数<br/>
            <a href="https://bbs.csdn.net/topics/250037962">为什么这样写随机种子呢</a>
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFoxCAD.CAD.RXClassEx">
            <summary>
            RXClass扩展
            </summary>
        </member>
        <member name="M:IFoxCAD.CAD.RXClassEx.Get``1">
            <summary>
            获取RXClass
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns><see cref="T:Autodesk.AutoCAD.Runtime.RXClass"/></returns>
        </member>
        <member name="F:IFoxCAD.CAD.RXClassEx._dict">
            <summary>
            由于RXObject.GetClass速度极慢，采用内部字典优化速度
            </summary>
        </member>
    </members>
</doc>
